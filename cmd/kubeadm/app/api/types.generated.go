/*
Copyright 2016 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// ************************************************************
// DO NOT EDIT.
// THIS FILE IS AUTO-GENERATED BY codecgen.
// ************************************************************

package api

import (
	"errors"
	"fmt"
	codec1978 "github.com/ugorji/go/codec"
	pkg1_unversioned "k8s.io/kubernetes/pkg/api/unversioned"
	"reflect"
	"runtime"
)

const (
	// ----- content types ----
	codecSelferC_UTF81234 = 1
	codecSelferC_RAW1234  = 0
	// ----- value types used ----
	codecSelferValueTypeArray1234 = 10
	codecSelferValueTypeMap1234   = 9
	// ----- containerStateValues ----
	codecSelfer_containerMapKey1234    = 2
	codecSelfer_containerMapValue1234  = 3
	codecSelfer_containerMapEnd1234    = 4
	codecSelfer_containerArrayElem1234 = 6
	codecSelfer_containerArrayEnd1234  = 7
)

var (
	codecSelferBitsize1234                         = uint8(reflect.TypeOf(uint(0)).Bits())
	codecSelferOnlyMapOrArrayEncodeToStructErr1234 = errors.New(`only encoded map or array can be decoded into a struct`)
)

type codecSelfer1234 struct{}

func init() {
	if codec1978.GenVersion != 5 {
		_, file, _, _ := runtime.Caller(0)
		err := fmt.Errorf("codecgen version mismatch: current: %v, need %v. Re-generate file: %v",
			5, codec1978.GenVersion, file)
		panic(err)
	}
	if false { // reference the types, but skip this branch at build/run time
		var v0 pkg1_unversioned.TypeMeta
		_ = v0
	}
}

func (x *MasterConfiguration) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [8]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			yyq2[0] = x.Kind != ""
			yyq2[1] = x.APIVersion != ""
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(8)
			} else {
				yynn2 = 6
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[0] {
					yym4 := z.EncBinary()
					_ = yym4
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym5 := z.EncBinary()
					_ = yym5
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[1] {
					yym7 := z.EncBinary()
					_ = yym7
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym8 := z.EncBinary()
					_ = yym8
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy10 := &x.Secrets
				yy10.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Secrets"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy11 := &x.Secrets
				yy11.CodecEncodeSelf(e)
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy13 := &x.API
				yy13.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("API"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy14 := &x.API
				yy14.CodecEncodeSelf(e)
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy16 := &x.Etcd
				yy16.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Etcd"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy17 := &x.Etcd
				yy17.CodecEncodeSelf(e)
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy19 := &x.Networking
				yy19.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Networking"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy20 := &x.Networking
				yy20.CodecEncodeSelf(e)
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym22 := z.EncBinary()
				_ = yym22
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubernetesVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("KubernetesVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym23 := z.EncBinary()
				_ = yym23
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubernetesVersion))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym25 := z.EncBinary()
				_ = yym25
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.CloudProvider))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("CloudProvider"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym26 := z.EncBinary()
				_ = yym26
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.CloudProvider))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *MasterConfiguration) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym27 := z.DecBinary()
	_ = yym27
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct28 := r.ContainerType()
		if yyct28 == codecSelferValueTypeMap1234 {
			yyl28 := r.ReadMapStart()
			if yyl28 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl28, d)
			}
		} else if yyct28 == codecSelferValueTypeArray1234 {
			yyl28 := r.ReadArrayStart()
			if yyl28 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl28, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *MasterConfiguration) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys29Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys29Slc
	var yyhl29 bool = l >= 0
	for yyj29 := 0; ; yyj29++ {
		if yyhl29 {
			if yyj29 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys29Slc = r.DecodeBytes(yys29Slc, true, true)
		yys29 := string(yys29Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys29 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "Secrets":
			if r.TryDecodeAsNil() {
				x.Secrets = Secrets{}
			} else {
				yyv32 := &x.Secrets
				yyv32.CodecDecodeSelf(d)
			}
		case "API":
			if r.TryDecodeAsNil() {
				x.API = API{}
			} else {
				yyv33 := &x.API
				yyv33.CodecDecodeSelf(d)
			}
		case "Etcd":
			if r.TryDecodeAsNil() {
				x.Etcd = Etcd{}
			} else {
				yyv34 := &x.Etcd
				yyv34.CodecDecodeSelf(d)
			}
		case "Networking":
			if r.TryDecodeAsNil() {
				x.Networking = Networking{}
			} else {
				yyv35 := &x.Networking
				yyv35.CodecDecodeSelf(d)
			}
		case "KubernetesVersion":
			if r.TryDecodeAsNil() {
				x.KubernetesVersion = ""
			} else {
				x.KubernetesVersion = string(r.DecodeString())
			}
		case "CloudProvider":
			if r.TryDecodeAsNil() {
				x.CloudProvider = ""
			} else {
				x.CloudProvider = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys29)
		} // end switch yys29
	} // end for yyj29
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *MasterConfiguration) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj38 int
	var yyb38 bool
	var yyhl38 bool = l >= 0
	yyj38++
	if yyhl38 {
		yyb38 = yyj38 > l
	} else {
		yyb38 = r.CheckBreak()
	}
	if yyb38 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj38++
	if yyhl38 {
		yyb38 = yyj38 > l
	} else {
		yyb38 = r.CheckBreak()
	}
	if yyb38 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj38++
	if yyhl38 {
		yyb38 = yyj38 > l
	} else {
		yyb38 = r.CheckBreak()
	}
	if yyb38 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Secrets = Secrets{}
	} else {
		yyv41 := &x.Secrets
		yyv41.CodecDecodeSelf(d)
	}
	yyj38++
	if yyhl38 {
		yyb38 = yyj38 > l
	} else {
		yyb38 = r.CheckBreak()
	}
	if yyb38 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.API = API{}
	} else {
		yyv42 := &x.API
		yyv42.CodecDecodeSelf(d)
	}
	yyj38++
	if yyhl38 {
		yyb38 = yyj38 > l
	} else {
		yyb38 = r.CheckBreak()
	}
	if yyb38 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Etcd = Etcd{}
	} else {
		yyv43 := &x.Etcd
		yyv43.CodecDecodeSelf(d)
	}
	yyj38++
	if yyhl38 {
		yyb38 = yyj38 > l
	} else {
		yyb38 = r.CheckBreak()
	}
	if yyb38 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Networking = Networking{}
	} else {
		yyv44 := &x.Networking
		yyv44.CodecDecodeSelf(d)
	}
	yyj38++
	if yyhl38 {
		yyb38 = yyj38 > l
	} else {
		yyb38 = r.CheckBreak()
	}
	if yyb38 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.KubernetesVersion = ""
	} else {
		x.KubernetesVersion = string(r.DecodeString())
	}
	yyj38++
	if yyhl38 {
		yyb38 = yyj38 > l
	} else {
		yyb38 = r.CheckBreak()
	}
	if yyb38 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.CloudProvider = ""
	} else {
		x.CloudProvider = string(r.DecodeString())
	}
	for {
		yyj38++
		if yyhl38 {
			yyb38 = yyj38 > l
		} else {
			yyb38 = r.CheckBreak()
		}
		if yyb38 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj38-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *API) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym47 := z.EncBinary()
		_ = yym47
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep48 := !z.EncBinary()
			yy2arr48 := z.EncBasicHandle().StructToArray
			var yyq48 [2]bool
			_, _, _ = yysep48, yyq48, yy2arr48
			const yyr48 bool = false
			var yynn48 int
			if yyr48 || yy2arr48 {
				r.EncodeArrayStart(2)
			} else {
				yynn48 = 2
				for _, b := range yyq48 {
					if b {
						yynn48++
					}
				}
				r.EncodeMapStart(yynn48)
				yynn48 = 0
			}
			if yyr48 || yy2arr48 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.AdvertiseAddresses == nil {
					r.EncodeNil()
				} else {
					yym50 := z.EncBinary()
					_ = yym50
					if false {
					} else {
						z.F.EncSliceStringV(x.AdvertiseAddresses, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("AdvertiseAddresses"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.AdvertiseAddresses == nil {
					r.EncodeNil()
				} else {
					yym51 := z.EncBinary()
					_ = yym51
					if false {
					} else {
						z.F.EncSliceStringV(x.AdvertiseAddresses, false, e)
					}
				}
			}
			if yyr48 || yy2arr48 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.ExternalDNSNames == nil {
					r.EncodeNil()
				} else {
					yym53 := z.EncBinary()
					_ = yym53
					if false {
					} else {
						z.F.EncSliceStringV(x.ExternalDNSNames, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("ExternalDNSNames"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.ExternalDNSNames == nil {
					r.EncodeNil()
				} else {
					yym54 := z.EncBinary()
					_ = yym54
					if false {
					} else {
						z.F.EncSliceStringV(x.ExternalDNSNames, false, e)
					}
				}
			}
			if yyr48 || yy2arr48 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *API) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym55 := z.DecBinary()
	_ = yym55
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct56 := r.ContainerType()
		if yyct56 == codecSelferValueTypeMap1234 {
			yyl56 := r.ReadMapStart()
			if yyl56 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl56, d)
			}
		} else if yyct56 == codecSelferValueTypeArray1234 {
			yyl56 := r.ReadArrayStart()
			if yyl56 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl56, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *API) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys57Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys57Slc
	var yyhl57 bool = l >= 0
	for yyj57 := 0; ; yyj57++ {
		if yyhl57 {
			if yyj57 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys57Slc = r.DecodeBytes(yys57Slc, true, true)
		yys57 := string(yys57Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys57 {
		case "AdvertiseAddresses":
			if r.TryDecodeAsNil() {
				x.AdvertiseAddresses = nil
			} else {
				yyv58 := &x.AdvertiseAddresses
				yym59 := z.DecBinary()
				_ = yym59
				if false {
				} else {
					z.F.DecSliceStringX(yyv58, false, d)
				}
			}
		case "ExternalDNSNames":
			if r.TryDecodeAsNil() {
				x.ExternalDNSNames = nil
			} else {
				yyv60 := &x.ExternalDNSNames
				yym61 := z.DecBinary()
				_ = yym61
				if false {
				} else {
					z.F.DecSliceStringX(yyv60, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys57)
		} // end switch yys57
	} // end for yyj57
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *API) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj62 int
	var yyb62 bool
	var yyhl62 bool = l >= 0
	yyj62++
	if yyhl62 {
		yyb62 = yyj62 > l
	} else {
		yyb62 = r.CheckBreak()
	}
	if yyb62 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.AdvertiseAddresses = nil
	} else {
		yyv63 := &x.AdvertiseAddresses
		yym64 := z.DecBinary()
		_ = yym64
		if false {
		} else {
			z.F.DecSliceStringX(yyv63, false, d)
		}
	}
	yyj62++
	if yyhl62 {
		yyb62 = yyj62 > l
	} else {
		yyb62 = r.CheckBreak()
	}
	if yyb62 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ExternalDNSNames = nil
	} else {
		yyv65 := &x.ExternalDNSNames
		yym66 := z.DecBinary()
		_ = yym66
		if false {
		} else {
			z.F.DecSliceStringX(yyv65, false, d)
		}
	}
	for {
		yyj62++
		if yyhl62 {
			yyb62 = yyj62 > l
		} else {
			yyb62 = r.CheckBreak()
		}
		if yyb62 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj62-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Networking) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym67 := z.EncBinary()
		_ = yym67
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep68 := !z.EncBinary()
			yy2arr68 := z.EncBasicHandle().StructToArray
			var yyq68 [3]bool
			_, _, _ = yysep68, yyq68, yy2arr68
			const yyr68 bool = false
			var yynn68 int
			if yyr68 || yy2arr68 {
				r.EncodeArrayStart(3)
			} else {
				yynn68 = 3
				for _, b := range yyq68 {
					if b {
						yynn68++
					}
				}
				r.EncodeMapStart(yynn68)
				yynn68 = 0
			}
			if yyr68 || yy2arr68 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym70 := z.EncBinary()
				_ = yym70
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ServiceSubnet))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("ServiceSubnet"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym71 := z.EncBinary()
				_ = yym71
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ServiceSubnet))
				}
			}
			if yyr68 || yy2arr68 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym73 := z.EncBinary()
				_ = yym73
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.PodSubnet))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("PodSubnet"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym74 := z.EncBinary()
				_ = yym74
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.PodSubnet))
				}
			}
			if yyr68 || yy2arr68 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym76 := z.EncBinary()
				_ = yym76
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DNSDomain))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("DNSDomain"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym77 := z.EncBinary()
				_ = yym77
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DNSDomain))
				}
			}
			if yyr68 || yy2arr68 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Networking) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym78 := z.DecBinary()
	_ = yym78
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct79 := r.ContainerType()
		if yyct79 == codecSelferValueTypeMap1234 {
			yyl79 := r.ReadMapStart()
			if yyl79 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl79, d)
			}
		} else if yyct79 == codecSelferValueTypeArray1234 {
			yyl79 := r.ReadArrayStart()
			if yyl79 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl79, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Networking) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys80Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys80Slc
	var yyhl80 bool = l >= 0
	for yyj80 := 0; ; yyj80++ {
		if yyhl80 {
			if yyj80 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys80Slc = r.DecodeBytes(yys80Slc, true, true)
		yys80 := string(yys80Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys80 {
		case "ServiceSubnet":
			if r.TryDecodeAsNil() {
				x.ServiceSubnet = ""
			} else {
				x.ServiceSubnet = string(r.DecodeString())
			}
		case "PodSubnet":
			if r.TryDecodeAsNil() {
				x.PodSubnet = ""
			} else {
				x.PodSubnet = string(r.DecodeString())
			}
		case "DNSDomain":
			if r.TryDecodeAsNil() {
				x.DNSDomain = ""
			} else {
				x.DNSDomain = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys80)
		} // end switch yys80
	} // end for yyj80
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Networking) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj84 int
	var yyb84 bool
	var yyhl84 bool = l >= 0
	yyj84++
	if yyhl84 {
		yyb84 = yyj84 > l
	} else {
		yyb84 = r.CheckBreak()
	}
	if yyb84 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ServiceSubnet = ""
	} else {
		x.ServiceSubnet = string(r.DecodeString())
	}
	yyj84++
	if yyhl84 {
		yyb84 = yyj84 > l
	} else {
		yyb84 = r.CheckBreak()
	}
	if yyb84 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PodSubnet = ""
	} else {
		x.PodSubnet = string(r.DecodeString())
	}
	yyj84++
	if yyhl84 {
		yyb84 = yyj84 > l
	} else {
		yyb84 = r.CheckBreak()
	}
	if yyb84 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DNSDomain = ""
	} else {
		x.DNSDomain = string(r.DecodeString())
	}
	for {
		yyj84++
		if yyhl84 {
			yyb84 = yyj84 > l
		} else {
			yyb84 = r.CheckBreak()
		}
		if yyb84 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj84-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Etcd) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym88 := z.EncBinary()
		_ = yym88
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep89 := !z.EncBinary()
			yy2arr89 := z.EncBasicHandle().StructToArray
			var yyq89 [4]bool
			_, _, _ = yysep89, yyq89, yy2arr89
			const yyr89 bool = false
			var yynn89 int
			if yyr89 || yy2arr89 {
				r.EncodeArrayStart(4)
			} else {
				yynn89 = 4
				for _, b := range yyq89 {
					if b {
						yynn89++
					}
				}
				r.EncodeMapStart(yynn89)
				yynn89 = 0
			}
			if yyr89 || yy2arr89 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Endpoints == nil {
					r.EncodeNil()
				} else {
					yym91 := z.EncBinary()
					_ = yym91
					if false {
					} else {
						z.F.EncSliceStringV(x.Endpoints, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Endpoints"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Endpoints == nil {
					r.EncodeNil()
				} else {
					yym92 := z.EncBinary()
					_ = yym92
					if false {
					} else {
						z.F.EncSliceStringV(x.Endpoints, false, e)
					}
				}
			}
			if yyr89 || yy2arr89 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym94 := z.EncBinary()
				_ = yym94
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.CAFile))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("CAFile"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym95 := z.EncBinary()
				_ = yym95
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.CAFile))
				}
			}
			if yyr89 || yy2arr89 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym97 := z.EncBinary()
				_ = yym97
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.CertFile))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("CertFile"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym98 := z.EncBinary()
				_ = yym98
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.CertFile))
				}
			}
			if yyr89 || yy2arr89 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym100 := z.EncBinary()
				_ = yym100
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KeyFile))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("KeyFile"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym101 := z.EncBinary()
				_ = yym101
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KeyFile))
				}
			}
			if yyr89 || yy2arr89 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Etcd) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym102 := z.DecBinary()
	_ = yym102
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct103 := r.ContainerType()
		if yyct103 == codecSelferValueTypeMap1234 {
			yyl103 := r.ReadMapStart()
			if yyl103 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl103, d)
			}
		} else if yyct103 == codecSelferValueTypeArray1234 {
			yyl103 := r.ReadArrayStart()
			if yyl103 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl103, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Etcd) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys104Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys104Slc
	var yyhl104 bool = l >= 0
	for yyj104 := 0; ; yyj104++ {
		if yyhl104 {
			if yyj104 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys104Slc = r.DecodeBytes(yys104Slc, true, true)
		yys104 := string(yys104Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys104 {
		case "Endpoints":
			if r.TryDecodeAsNil() {
				x.Endpoints = nil
			} else {
				yyv105 := &x.Endpoints
				yym106 := z.DecBinary()
				_ = yym106
				if false {
				} else {
					z.F.DecSliceStringX(yyv105, false, d)
				}
			}
		case "CAFile":
			if r.TryDecodeAsNil() {
				x.CAFile = ""
			} else {
				x.CAFile = string(r.DecodeString())
			}
		case "CertFile":
			if r.TryDecodeAsNil() {
				x.CertFile = ""
			} else {
				x.CertFile = string(r.DecodeString())
			}
		case "KeyFile":
			if r.TryDecodeAsNil() {
				x.KeyFile = ""
			} else {
				x.KeyFile = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys104)
		} // end switch yys104
	} // end for yyj104
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Etcd) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj110 int
	var yyb110 bool
	var yyhl110 bool = l >= 0
	yyj110++
	if yyhl110 {
		yyb110 = yyj110 > l
	} else {
		yyb110 = r.CheckBreak()
	}
	if yyb110 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Endpoints = nil
	} else {
		yyv111 := &x.Endpoints
		yym112 := z.DecBinary()
		_ = yym112
		if false {
		} else {
			z.F.DecSliceStringX(yyv111, false, d)
		}
	}
	yyj110++
	if yyhl110 {
		yyb110 = yyj110 > l
	} else {
		yyb110 = r.CheckBreak()
	}
	if yyb110 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.CAFile = ""
	} else {
		x.CAFile = string(r.DecodeString())
	}
	yyj110++
	if yyhl110 {
		yyb110 = yyj110 > l
	} else {
		yyb110 = r.CheckBreak()
	}
	if yyb110 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.CertFile = ""
	} else {
		x.CertFile = string(r.DecodeString())
	}
	yyj110++
	if yyhl110 {
		yyb110 = yyj110 > l
	} else {
		yyb110 = r.CheckBreak()
	}
	if yyb110 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.KeyFile = ""
	} else {
		x.KeyFile = string(r.DecodeString())
	}
	for {
		yyj110++
		if yyhl110 {
			yyb110 = yyj110 > l
		} else {
			yyb110 = r.CheckBreak()
		}
		if yyb110 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj110-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Secrets) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym116 := z.EncBinary()
		_ = yym116
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep117 := !z.EncBinary()
			yy2arr117 := z.EncBasicHandle().StructToArray
			var yyq117 [4]bool
			_, _, _ = yysep117, yyq117, yy2arr117
			const yyr117 bool = false
			var yynn117 int
			if yyr117 || yy2arr117 {
				r.EncodeArrayStart(4)
			} else {
				yynn117 = 4
				for _, b := range yyq117 {
					if b {
						yynn117++
					}
				}
				r.EncodeMapStart(yynn117)
				yynn117 = 0
			}
			if yyr117 || yy2arr117 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym119 := z.EncBinary()
				_ = yym119
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.GivenToken))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("GivenToken"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym120 := z.EncBinary()
				_ = yym120
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.GivenToken))
				}
			}
			if yyr117 || yy2arr117 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym122 := z.EncBinary()
				_ = yym122
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.TokenID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("TokenID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym123 := z.EncBinary()
				_ = yym123
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.TokenID))
				}
			}
			if yyr117 || yy2arr117 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Token == nil {
					r.EncodeNil()
				} else {
					yym125 := z.EncBinary()
					_ = yym125
					if false {
					} else {
						r.EncodeStringBytes(codecSelferC_RAW1234, []byte(x.Token))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Token"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Token == nil {
					r.EncodeNil()
				} else {
					yym126 := z.EncBinary()
					_ = yym126
					if false {
					} else {
						r.EncodeStringBytes(codecSelferC_RAW1234, []byte(x.Token))
					}
				}
			}
			if yyr117 || yy2arr117 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym128 := z.EncBinary()
				_ = yym128
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.BearerToken))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("BearerToken"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym129 := z.EncBinary()
				_ = yym129
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.BearerToken))
				}
			}
			if yyr117 || yy2arr117 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Secrets) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym130 := z.DecBinary()
	_ = yym130
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct131 := r.ContainerType()
		if yyct131 == codecSelferValueTypeMap1234 {
			yyl131 := r.ReadMapStart()
			if yyl131 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl131, d)
			}
		} else if yyct131 == codecSelferValueTypeArray1234 {
			yyl131 := r.ReadArrayStart()
			if yyl131 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl131, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Secrets) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys132Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys132Slc
	var yyhl132 bool = l >= 0
	for yyj132 := 0; ; yyj132++ {
		if yyhl132 {
			if yyj132 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys132Slc = r.DecodeBytes(yys132Slc, true, true)
		yys132 := string(yys132Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys132 {
		case "GivenToken":
			if r.TryDecodeAsNil() {
				x.GivenToken = ""
			} else {
				x.GivenToken = string(r.DecodeString())
			}
		case "TokenID":
			if r.TryDecodeAsNil() {
				x.TokenID = ""
			} else {
				x.TokenID = string(r.DecodeString())
			}
		case "Token":
			if r.TryDecodeAsNil() {
				x.Token = nil
			} else {
				yyv135 := &x.Token
				yym136 := z.DecBinary()
				_ = yym136
				if false {
				} else {
					*yyv135 = r.DecodeBytes(*(*[]byte)(yyv135), false, false)
				}
			}
		case "BearerToken":
			if r.TryDecodeAsNil() {
				x.BearerToken = ""
			} else {
				x.BearerToken = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys132)
		} // end switch yys132
	} // end for yyj132
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Secrets) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj138 int
	var yyb138 bool
	var yyhl138 bool = l >= 0
	yyj138++
	if yyhl138 {
		yyb138 = yyj138 > l
	} else {
		yyb138 = r.CheckBreak()
	}
	if yyb138 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.GivenToken = ""
	} else {
		x.GivenToken = string(r.DecodeString())
	}
	yyj138++
	if yyhl138 {
		yyb138 = yyj138 > l
	} else {
		yyb138 = r.CheckBreak()
	}
	if yyb138 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TokenID = ""
	} else {
		x.TokenID = string(r.DecodeString())
	}
	yyj138++
	if yyhl138 {
		yyb138 = yyj138 > l
	} else {
		yyb138 = r.CheckBreak()
	}
	if yyb138 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Token = nil
	} else {
		yyv141 := &x.Token
		yym142 := z.DecBinary()
		_ = yym142
		if false {
		} else {
			*yyv141 = r.DecodeBytes(*(*[]byte)(yyv141), false, false)
		}
	}
	yyj138++
	if yyhl138 {
		yyb138 = yyj138 > l
	} else {
		yyb138 = r.CheckBreak()
	}
	if yyb138 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.BearerToken = ""
	} else {
		x.BearerToken = string(r.DecodeString())
	}
	for {
		yyj138++
		if yyhl138 {
			yyb138 = yyj138 > l
		} else {
			yyb138 = r.CheckBreak()
		}
		if yyb138 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj138-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeConfiguration) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym144 := z.EncBinary()
		_ = yym144
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep145 := !z.EncBinary()
			yy2arr145 := z.EncBasicHandle().StructToArray
			var yyq145 [4]bool
			_, _, _ = yysep145, yyq145, yy2arr145
			const yyr145 bool = false
			yyq145[0] = x.Kind != ""
			yyq145[1] = x.APIVersion != ""
			var yynn145 int
			if yyr145 || yy2arr145 {
				r.EncodeArrayStart(4)
			} else {
				yynn145 = 2
				for _, b := range yyq145 {
					if b {
						yynn145++
					}
				}
				r.EncodeMapStart(yynn145)
				yynn145 = 0
			}
			if yyr145 || yy2arr145 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq145[0] {
					yym147 := z.EncBinary()
					_ = yym147
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq145[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym148 := z.EncBinary()
					_ = yym148
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr145 || yy2arr145 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq145[1] {
					yym150 := z.EncBinary()
					_ = yym150
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq145[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym151 := z.EncBinary()
					_ = yym151
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr145 || yy2arr145 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.MasterAddresses == nil {
					r.EncodeNil()
				} else {
					yym153 := z.EncBinary()
					_ = yym153
					if false {
					} else {
						z.F.EncSliceStringV(x.MasterAddresses, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("MasterAddresses"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.MasterAddresses == nil {
					r.EncodeNil()
				} else {
					yym154 := z.EncBinary()
					_ = yym154
					if false {
					} else {
						z.F.EncSliceStringV(x.MasterAddresses, false, e)
					}
				}
			}
			if yyr145 || yy2arr145 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy156 := &x.Secrets
				yy156.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Secrets"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy157 := &x.Secrets
				yy157.CodecEncodeSelf(e)
			}
			if yyr145 || yy2arr145 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeConfiguration) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym158 := z.DecBinary()
	_ = yym158
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct159 := r.ContainerType()
		if yyct159 == codecSelferValueTypeMap1234 {
			yyl159 := r.ReadMapStart()
			if yyl159 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl159, d)
			}
		} else if yyct159 == codecSelferValueTypeArray1234 {
			yyl159 := r.ReadArrayStart()
			if yyl159 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl159, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeConfiguration) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys160Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys160Slc
	var yyhl160 bool = l >= 0
	for yyj160 := 0; ; yyj160++ {
		if yyhl160 {
			if yyj160 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys160Slc = r.DecodeBytes(yys160Slc, true, true)
		yys160 := string(yys160Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys160 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "MasterAddresses":
			if r.TryDecodeAsNil() {
				x.MasterAddresses = nil
			} else {
				yyv163 := &x.MasterAddresses
				yym164 := z.DecBinary()
				_ = yym164
				if false {
				} else {
					z.F.DecSliceStringX(yyv163, false, d)
				}
			}
		case "Secrets":
			if r.TryDecodeAsNil() {
				x.Secrets = Secrets{}
			} else {
				yyv165 := &x.Secrets
				yyv165.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys160)
		} // end switch yys160
	} // end for yyj160
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeConfiguration) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj166 int
	var yyb166 bool
	var yyhl166 bool = l >= 0
	yyj166++
	if yyhl166 {
		yyb166 = yyj166 > l
	} else {
		yyb166 = r.CheckBreak()
	}
	if yyb166 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj166++
	if yyhl166 {
		yyb166 = yyj166 > l
	} else {
		yyb166 = r.CheckBreak()
	}
	if yyb166 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj166++
	if yyhl166 {
		yyb166 = yyj166 > l
	} else {
		yyb166 = r.CheckBreak()
	}
	if yyb166 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MasterAddresses = nil
	} else {
		yyv169 := &x.MasterAddresses
		yym170 := z.DecBinary()
		_ = yym170
		if false {
		} else {
			z.F.DecSliceStringX(yyv169, false, d)
		}
	}
	yyj166++
	if yyhl166 {
		yyb166 = yyj166 > l
	} else {
		yyb166 = r.CheckBreak()
	}
	if yyb166 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Secrets = Secrets{}
	} else {
		yyv171 := &x.Secrets
		yyv171.CodecDecodeSelf(d)
	}
	for {
		yyj166++
		if yyhl166 {
			yyb166 = yyj166 > l
		} else {
			yyb166 = r.CheckBreak()
		}
		if yyb166 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj166-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ClusterInfo) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym172 := z.EncBinary()
		_ = yym172
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep173 := !z.EncBinary()
			yy2arr173 := z.EncBasicHandle().StructToArray
			var yyq173 [4]bool
			_, _, _ = yysep173, yyq173, yy2arr173
			const yyr173 bool = false
			yyq173[0] = x.Kind != ""
			yyq173[1] = x.APIVersion != ""
			var yynn173 int
			if yyr173 || yy2arr173 {
				r.EncodeArrayStart(4)
			} else {
				yynn173 = 2
				for _, b := range yyq173 {
					if b {
						yynn173++
					}
				}
				r.EncodeMapStart(yynn173)
				yynn173 = 0
			}
			if yyr173 || yy2arr173 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq173[0] {
					yym175 := z.EncBinary()
					_ = yym175
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq173[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym176 := z.EncBinary()
					_ = yym176
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr173 || yy2arr173 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq173[1] {
					yym178 := z.EncBinary()
					_ = yym178
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq173[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym179 := z.EncBinary()
					_ = yym179
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr173 || yy2arr173 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.CertificateAuthorities == nil {
					r.EncodeNil()
				} else {
					yym181 := z.EncBinary()
					_ = yym181
					if false {
					} else {
						z.F.EncSliceStringV(x.CertificateAuthorities, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("certificateAuthorities"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.CertificateAuthorities == nil {
					r.EncodeNil()
				} else {
					yym182 := z.EncBinary()
					_ = yym182
					if false {
					} else {
						z.F.EncSliceStringV(x.CertificateAuthorities, false, e)
					}
				}
			}
			if yyr173 || yy2arr173 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Endpoints == nil {
					r.EncodeNil()
				} else {
					yym184 := z.EncBinary()
					_ = yym184
					if false {
					} else {
						z.F.EncSliceStringV(x.Endpoints, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("endpoints"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Endpoints == nil {
					r.EncodeNil()
				} else {
					yym185 := z.EncBinary()
					_ = yym185
					if false {
					} else {
						z.F.EncSliceStringV(x.Endpoints, false, e)
					}
				}
			}
			if yyr173 || yy2arr173 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ClusterInfo) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym186 := z.DecBinary()
	_ = yym186
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct187 := r.ContainerType()
		if yyct187 == codecSelferValueTypeMap1234 {
			yyl187 := r.ReadMapStart()
			if yyl187 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl187, d)
			}
		} else if yyct187 == codecSelferValueTypeArray1234 {
			yyl187 := r.ReadArrayStart()
			if yyl187 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl187, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ClusterInfo) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys188Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys188Slc
	var yyhl188 bool = l >= 0
	for yyj188 := 0; ; yyj188++ {
		if yyhl188 {
			if yyj188 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys188Slc = r.DecodeBytes(yys188Slc, true, true)
		yys188 := string(yys188Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys188 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "certificateAuthorities":
			if r.TryDecodeAsNil() {
				x.CertificateAuthorities = nil
			} else {
				yyv191 := &x.CertificateAuthorities
				yym192 := z.DecBinary()
				_ = yym192
				if false {
				} else {
					z.F.DecSliceStringX(yyv191, false, d)
				}
			}
		case "endpoints":
			if r.TryDecodeAsNil() {
				x.Endpoints = nil
			} else {
				yyv193 := &x.Endpoints
				yym194 := z.DecBinary()
				_ = yym194
				if false {
				} else {
					z.F.DecSliceStringX(yyv193, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys188)
		} // end switch yys188
	} // end for yyj188
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ClusterInfo) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj195 int
	var yyb195 bool
	var yyhl195 bool = l >= 0
	yyj195++
	if yyhl195 {
		yyb195 = yyj195 > l
	} else {
		yyb195 = r.CheckBreak()
	}
	if yyb195 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj195++
	if yyhl195 {
		yyb195 = yyj195 > l
	} else {
		yyb195 = r.CheckBreak()
	}
	if yyb195 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj195++
	if yyhl195 {
		yyb195 = yyj195 > l
	} else {
		yyb195 = r.CheckBreak()
	}
	if yyb195 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.CertificateAuthorities = nil
	} else {
		yyv198 := &x.CertificateAuthorities
		yym199 := z.DecBinary()
		_ = yym199
		if false {
		} else {
			z.F.DecSliceStringX(yyv198, false, d)
		}
	}
	yyj195++
	if yyhl195 {
		yyb195 = yyj195 > l
	} else {
		yyb195 = r.CheckBreak()
	}
	if yyb195 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Endpoints = nil
	} else {
		yyv200 := &x.Endpoints
		yym201 := z.DecBinary()
		_ = yym201
		if false {
		} else {
			z.F.DecSliceStringX(yyv200, false, d)
		}
	}
	for {
		yyj195++
		if yyhl195 {
			yyb195 = yyj195 > l
		} else {
			yyb195 = r.CheckBreak()
		}
		if yyb195 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj195-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}
