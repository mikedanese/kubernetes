/*
Copyright 2015 The Kubernetes Authors All rights reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// ************************************************************
// DO NOT EDIT.
// THIS FILE IS AUTO-GENERATED BY codecgen.
// ************************************************************

package extensions

import (
	"errors"
	"fmt"
	codec1978 "github.com/ugorji/go/codec"
	pkg2_api "k8s.io/kubernetes/pkg/api"
	pkg4_resource "k8s.io/kubernetes/pkg/api/resource"
	pkg1_unversioned "k8s.io/kubernetes/pkg/api/unversioned"
	pkg3_types "k8s.io/kubernetes/pkg/types"
	pkg6_util "k8s.io/kubernetes/pkg/util"
	"reflect"
	"runtime"
	pkg5_inf "speter.net/go/exp/math/dec/inf"
	time "time"
)

const (
	codecSelferC_UTF81234         = 1
	codecSelferC_RAW1234          = 0
	codecSelferValueTypeArray1234 = 10
	codecSelferValueTypeMap1234   = 9
)

var (
	codecSelferBitsize1234                         = uint8(reflect.TypeOf(uint(0)).Bits())
	codecSelferOnlyMapOrArrayEncodeToStructErr1234 = errors.New(`only encoded map or array can be decoded into a struct`)
)

type codecSelfer1234 struct{}

func init() {
	if codec1978.GenVersion != 4 {
		_, file, _, _ := runtime.Caller(0)
		err := fmt.Errorf("codecgen version mismatch: current: %v, need %v. Re-generate file: %v",
			4, codec1978.GenVersion, file)
		panic(err)
	}
	if false { // reference the types, but skip this branch at build/run time
		var v0 pkg2_api.ObjectMeta
		var v1 pkg4_resource.Quantity
		var v2 pkg1_unversioned.TypeMeta
		var v3 pkg3_types.UID
		var v4 pkg6_util.IntOrString
		var v5 pkg5_inf.Dec
		var v6 time.Time
		_, _, _, _, _, _, _ = v0, v1, v2, v3, v4, v5, v6
	}
}

func (x *ScaleSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [1]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			yyq2[0] = x.Replicas != 0
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(1)
			} else {
				var yynn2 int = 0
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
			}
			if yyr2 || yy2arr2 {
				if yyq2[0] {
					yym4 := z.EncBinary()
					_ = yym4
					if false {
					} else {
						r.EncodeInt(int64(x.Replicas))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2[0] {
					r.EncodeString(codecSelferC_UTF81234, string("replicas"))
					yym5 := z.EncBinary()
					_ = yym5
					if false {
					} else {
						r.EncodeInt(int64(x.Replicas))
					}
				}
			}
			if yysep2 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ScaleSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym6 := z.DecBinary()
	_ = yym6
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl7 := r.ReadMapStart()
			if yyl7 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl7, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl7 := r.ReadArrayStart()
			if yyl7 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl7, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ScaleSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys8Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys8Slc
	var yyhl8 bool = l >= 0
	for yyj8 := 0; ; yyj8++ {
		if yyhl8 {
			if yyj8 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys8Slc = r.DecodeBytes(yys8Slc, true, true)
		yys8 := string(yys8Slc)
		switch yys8 {
		case "replicas":
			if r.TryDecodeAsNil() {
				x.Replicas = 0
			} else {
				x.Replicas = int(r.DecodeInt(codecSelferBitsize1234))
			}
		default:
			z.DecStructFieldNotFound(-1, yys8)
		} // end switch yys8
	} // end for yyj8
	if !yyhl8 {
		r.ReadEnd()
	}
}

func (x *ScaleSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj10 int
	var yyb10 bool
	var yyhl10 bool = l >= 0
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = r.CheckBreak()
	}
	if yyb10 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Replicas = 0
	} else {
		x.Replicas = int(r.DecodeInt(codecSelferBitsize1234))
	}
	for {
		yyj10++
		if yyhl10 {
			yyb10 = yyj10 > l
		} else {
			yyb10 = r.CheckBreak()
		}
		if yyb10 {
			break
		}
		z.DecStructFieldNotFound(yyj10-1, "")
	}
	r.ReadEnd()
}

func (x *ScaleStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym12 := z.EncBinary()
		_ = yym12
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep13 := !z.EncBinary()
			yy2arr13 := z.EncBasicHandle().StructToArray
			var yyq13 [2]bool
			_, _, _ = yysep13, yyq13, yy2arr13
			const yyr13 bool = false
			yyq13[1] = len(x.Selector) != 0
			if yyr13 || yy2arr13 {
				r.EncodeArrayStart(2)
			} else {
				var yynn13 int = 1
				for _, b := range yyq13 {
					if b {
						yynn13++
					}
				}
				r.EncodeMapStart(yynn13)
			}
			if yyr13 || yy2arr13 {
				yym15 := z.EncBinary()
				_ = yym15
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("replicas"))
				yym16 := z.EncBinary()
				_ = yym16
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			}
			if yyr13 || yy2arr13 {
				if yyq13[1] {
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym18 := z.EncBinary()
						_ = yym18
						if false {
						} else {
							z.F.EncMapStringStringV(x.Selector, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq13[1] {
					r.EncodeString(codecSelferC_UTF81234, string("selector"))
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym19 := z.EncBinary()
						_ = yym19
						if false {
						} else {
							z.F.EncMapStringStringV(x.Selector, false, e)
						}
					}
				}
			}
			if yysep13 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ScaleStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym20 := z.DecBinary()
	_ = yym20
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl21 := r.ReadMapStart()
			if yyl21 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl21, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl21 := r.ReadArrayStart()
			if yyl21 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl21, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ScaleStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys22Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys22Slc
	var yyhl22 bool = l >= 0
	for yyj22 := 0; ; yyj22++ {
		if yyhl22 {
			if yyj22 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys22Slc = r.DecodeBytes(yys22Slc, true, true)
		yys22 := string(yys22Slc)
		switch yys22 {
		case "replicas":
			if r.TryDecodeAsNil() {
				x.Replicas = 0
			} else {
				x.Replicas = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "selector":
			if r.TryDecodeAsNil() {
				x.Selector = nil
			} else {
				yyv24 := &x.Selector
				yym25 := z.DecBinary()
				_ = yym25
				if false {
				} else {
					z.F.DecMapStringStringX(yyv24, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys22)
		} // end switch yys22
	} // end for yyj22
	if !yyhl22 {
		r.ReadEnd()
	}
}

func (x *ScaleStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj26 int
	var yyb26 bool
	var yyhl26 bool = l >= 0
	yyj26++
	if yyhl26 {
		yyb26 = yyj26 > l
	} else {
		yyb26 = r.CheckBreak()
	}
	if yyb26 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Replicas = 0
	} else {
		x.Replicas = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj26++
	if yyhl26 {
		yyb26 = yyj26 > l
	} else {
		yyb26 = r.CheckBreak()
	}
	if yyb26 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Selector = nil
	} else {
		yyv28 := &x.Selector
		yym29 := z.DecBinary()
		_ = yym29
		if false {
		} else {
			z.F.DecMapStringStringX(yyv28, false, d)
		}
	}
	for {
		yyj26++
		if yyhl26 {
			yyb26 = yyj26 > l
		} else {
			yyb26 = r.CheckBreak()
		}
		if yyb26 {
			break
		}
		z.DecStructFieldNotFound(yyj26-1, "")
	}
	r.ReadEnd()
}

func (x *Scale) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym30 := z.EncBinary()
		_ = yym30
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep31 := !z.EncBinary()
			yy2arr31 := z.EncBasicHandle().StructToArray
			var yyq31 [5]bool
			_, _, _ = yysep31, yyq31, yy2arr31
			const yyr31 bool = false
			yyq31[0] = x.Kind != ""
			yyq31[1] = x.APIVersion != ""
			yyq31[2] = true
			yyq31[3] = true
			yyq31[4] = true
			if yyr31 || yy2arr31 {
				r.EncodeArrayStart(5)
			} else {
				var yynn31 int = 0
				for _, b := range yyq31 {
					if b {
						yynn31++
					}
				}
				r.EncodeMapStart(yynn31)
			}
			if yyr31 || yy2arr31 {
				if yyq31[0] {
					yym33 := z.EncBinary()
					_ = yym33
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq31[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym34 := z.EncBinary()
					_ = yym34
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr31 || yy2arr31 {
				if yyq31[1] {
					yym36 := z.EncBinary()
					_ = yym36
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq31[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym37 := z.EncBinary()
					_ = yym37
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr31 || yy2arr31 {
				if yyq31[2] {
					yy39 := &x.ObjectMeta
					yy39.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq31[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy40 := &x.ObjectMeta
					yy40.CodecEncodeSelf(e)
				}
			}
			if yyr31 || yy2arr31 {
				if yyq31[3] {
					yy42 := &x.Spec
					yy42.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq31[3] {
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					yy43 := &x.Spec
					yy43.CodecEncodeSelf(e)
				}
			}
			if yyr31 || yy2arr31 {
				if yyq31[4] {
					yy45 := &x.Status
					yy45.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq31[4] {
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					yy46 := &x.Status
					yy46.CodecEncodeSelf(e)
				}
			}
			if yysep31 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Scale) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym47 := z.DecBinary()
	_ = yym47
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl48 := r.ReadMapStart()
			if yyl48 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl48, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl48 := r.ReadArrayStart()
			if yyl48 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl48, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Scale) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys49Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys49Slc
	var yyhl49 bool = l >= 0
	for yyj49 := 0; ; yyj49++ {
		if yyhl49 {
			if yyj49 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys49Slc = r.DecodeBytes(yys49Slc, true, true)
		yys49 := string(yys49Slc)
		switch yys49 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_api.ObjectMeta{}
			} else {
				yyv52 := &x.ObjectMeta
				yyv52.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ScaleSpec{}
			} else {
				yyv53 := &x.Spec
				yyv53.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ScaleStatus{}
			} else {
				yyv54 := &x.Status
				yyv54.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys49)
		} // end switch yys49
	} // end for yyj49
	if !yyhl49 {
		r.ReadEnd()
	}
}

func (x *Scale) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj55 int
	var yyb55 bool
	var yyhl55 bool = l >= 0
	yyj55++
	if yyhl55 {
		yyb55 = yyj55 > l
	} else {
		yyb55 = r.CheckBreak()
	}
	if yyb55 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj55++
	if yyhl55 {
		yyb55 = yyj55 > l
	} else {
		yyb55 = r.CheckBreak()
	}
	if yyb55 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj55++
	if yyhl55 {
		yyb55 = yyj55 > l
	} else {
		yyb55 = r.CheckBreak()
	}
	if yyb55 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_api.ObjectMeta{}
	} else {
		yyv58 := &x.ObjectMeta
		yyv58.CodecDecodeSelf(d)
	}
	yyj55++
	if yyhl55 {
		yyb55 = yyj55 > l
	} else {
		yyb55 = r.CheckBreak()
	}
	if yyb55 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Spec = ScaleSpec{}
	} else {
		yyv59 := &x.Spec
		yyv59.CodecDecodeSelf(d)
	}
	yyj55++
	if yyhl55 {
		yyb55 = yyj55 > l
	} else {
		yyb55 = r.CheckBreak()
	}
	if yyb55 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = ScaleStatus{}
	} else {
		yyv60 := &x.Status
		yyv60.CodecDecodeSelf(d)
	}
	for {
		yyj55++
		if yyhl55 {
			yyb55 = yyj55 > l
		} else {
			yyb55 = r.CheckBreak()
		}
		if yyb55 {
			break
		}
		z.DecStructFieldNotFound(yyj55-1, "")
	}
	r.ReadEnd()
}

func (x *ReplicationControllerDummy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym61 := z.EncBinary()
		_ = yym61
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep62 := !z.EncBinary()
			yy2arr62 := z.EncBasicHandle().StructToArray
			var yyq62 [2]bool
			_, _, _ = yysep62, yyq62, yy2arr62
			const yyr62 bool = false
			yyq62[0] = x.Kind != ""
			yyq62[1] = x.APIVersion != ""
			if yyr62 || yy2arr62 {
				r.EncodeArrayStart(2)
			} else {
				var yynn62 int = 0
				for _, b := range yyq62 {
					if b {
						yynn62++
					}
				}
				r.EncodeMapStart(yynn62)
			}
			if yyr62 || yy2arr62 {
				if yyq62[0] {
					yym64 := z.EncBinary()
					_ = yym64
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq62[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym65 := z.EncBinary()
					_ = yym65
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr62 || yy2arr62 {
				if yyq62[1] {
					yym67 := z.EncBinary()
					_ = yym67
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq62[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym68 := z.EncBinary()
					_ = yym68
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yysep62 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ReplicationControllerDummy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym69 := z.DecBinary()
	_ = yym69
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl70 := r.ReadMapStart()
			if yyl70 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl70, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl70 := r.ReadArrayStart()
			if yyl70 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl70, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationControllerDummy) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys71Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys71Slc
	var yyhl71 bool = l >= 0
	for yyj71 := 0; ; yyj71++ {
		if yyhl71 {
			if yyj71 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys71Slc = r.DecodeBytes(yys71Slc, true, true)
		yys71 := string(yys71Slc)
		switch yys71 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys71)
		} // end switch yys71
	} // end for yyj71
	if !yyhl71 {
		r.ReadEnd()
	}
}

func (x *ReplicationControllerDummy) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj74 int
	var yyb74 bool
	var yyhl74 bool = l >= 0
	yyj74++
	if yyhl74 {
		yyb74 = yyj74 > l
	} else {
		yyb74 = r.CheckBreak()
	}
	if yyb74 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj74++
	if yyhl74 {
		yyb74 = yyj74 > l
	} else {
		yyb74 = r.CheckBreak()
	}
	if yyb74 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	for {
		yyj74++
		if yyhl74 {
			yyb74 = yyj74 > l
		} else {
			yyb74 = r.CheckBreak()
		}
		if yyb74 {
			break
		}
		z.DecStructFieldNotFound(yyj74-1, "")
	}
	r.ReadEnd()
}

func (x *SubresourceReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym77 := z.EncBinary()
		_ = yym77
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep78 := !z.EncBinary()
			yy2arr78 := z.EncBasicHandle().StructToArray
			var yyq78 [5]bool
			_, _, _ = yysep78, yyq78, yy2arr78
			const yyr78 bool = false
			yyq78[0] = x.Kind != ""
			yyq78[1] = x.Namespace != ""
			yyq78[2] = x.Name != ""
			yyq78[3] = x.APIVersion != ""
			yyq78[4] = x.Subresource != ""
			if yyr78 || yy2arr78 {
				r.EncodeArrayStart(5)
			} else {
				var yynn78 int = 0
				for _, b := range yyq78 {
					if b {
						yynn78++
					}
				}
				r.EncodeMapStart(yynn78)
			}
			if yyr78 || yy2arr78 {
				if yyq78[0] {
					yym80 := z.EncBinary()
					_ = yym80
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq78[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym81 := z.EncBinary()
					_ = yym81
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr78 || yy2arr78 {
				if yyq78[1] {
					yym83 := z.EncBinary()
					_ = yym83
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq78[1] {
					r.EncodeString(codecSelferC_UTF81234, string("namespace"))
					yym84 := z.EncBinary()
					_ = yym84
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				}
			}
			if yyr78 || yy2arr78 {
				if yyq78[2] {
					yym86 := z.EncBinary()
					_ = yym86
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq78[2] {
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					yym87 := z.EncBinary()
					_ = yym87
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr78 || yy2arr78 {
				if yyq78[3] {
					yym89 := z.EncBinary()
					_ = yym89
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq78[3] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym90 := z.EncBinary()
					_ = yym90
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr78 || yy2arr78 {
				if yyq78[4] {
					yym92 := z.EncBinary()
					_ = yym92
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Subresource))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq78[4] {
					r.EncodeString(codecSelferC_UTF81234, string("subresource"))
					yym93 := z.EncBinary()
					_ = yym93
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Subresource))
					}
				}
			}
			if yysep78 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *SubresourceReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym94 := z.DecBinary()
	_ = yym94
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl95 := r.ReadMapStart()
			if yyl95 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl95, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl95 := r.ReadArrayStart()
			if yyl95 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl95, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SubresourceReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys96Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys96Slc
	var yyhl96 bool = l >= 0
	for yyj96 := 0; ; yyj96++ {
		if yyhl96 {
			if yyj96 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys96Slc = r.DecodeBytes(yys96Slc, true, true)
		yys96 := string(yys96Slc)
		switch yys96 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "namespace":
			if r.TryDecodeAsNil() {
				x.Namespace = ""
			} else {
				x.Namespace = string(r.DecodeString())
			}
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "subresource":
			if r.TryDecodeAsNil() {
				x.Subresource = ""
			} else {
				x.Subresource = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys96)
		} // end switch yys96
	} // end for yyj96
	if !yyhl96 {
		r.ReadEnd()
	}
}

func (x *SubresourceReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj102 int
	var yyb102 bool
	var yyhl102 bool = l >= 0
	yyj102++
	if yyhl102 {
		yyb102 = yyj102 > l
	} else {
		yyb102 = r.CheckBreak()
	}
	if yyb102 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj102++
	if yyhl102 {
		yyb102 = yyj102 > l
	} else {
		yyb102 = r.CheckBreak()
	}
	if yyb102 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Namespace = ""
	} else {
		x.Namespace = string(r.DecodeString())
	}
	yyj102++
	if yyhl102 {
		yyb102 = yyj102 > l
	} else {
		yyb102 = r.CheckBreak()
	}
	if yyb102 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj102++
	if yyhl102 {
		yyb102 = yyj102 > l
	} else {
		yyb102 = r.CheckBreak()
	}
	if yyb102 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj102++
	if yyhl102 {
		yyb102 = yyj102 > l
	} else {
		yyb102 = r.CheckBreak()
	}
	if yyb102 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Subresource = ""
	} else {
		x.Subresource = string(r.DecodeString())
	}
	for {
		yyj102++
		if yyhl102 {
			yyb102 = yyj102 > l
		} else {
			yyb102 = r.CheckBreak()
		}
		if yyb102 {
			break
		}
		z.DecStructFieldNotFound(yyj102-1, "")
	}
	r.ReadEnd()
}

func (x *CPUTargetUtilization) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym108 := z.EncBinary()
		_ = yym108
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep109 := !z.EncBinary()
			yy2arr109 := z.EncBasicHandle().StructToArray
			var yyq109 [1]bool
			_, _, _ = yysep109, yyq109, yy2arr109
			const yyr109 bool = false
			if yyr109 || yy2arr109 {
				r.EncodeArrayStart(1)
			} else {
				var yynn109 int = 1
				for _, b := range yyq109 {
					if b {
						yynn109++
					}
				}
				r.EncodeMapStart(yynn109)
			}
			if yyr109 || yy2arr109 {
				yym111 := z.EncBinary()
				_ = yym111
				if false {
				} else {
					r.EncodeInt(int64(x.TargetPercentage))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("targetPercentage"))
				yym112 := z.EncBinary()
				_ = yym112
				if false {
				} else {
					r.EncodeInt(int64(x.TargetPercentage))
				}
			}
			if yysep109 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *CPUTargetUtilization) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym113 := z.DecBinary()
	_ = yym113
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl114 := r.ReadMapStart()
			if yyl114 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl114, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl114 := r.ReadArrayStart()
			if yyl114 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl114, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CPUTargetUtilization) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys115Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys115Slc
	var yyhl115 bool = l >= 0
	for yyj115 := 0; ; yyj115++ {
		if yyhl115 {
			if yyj115 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys115Slc = r.DecodeBytes(yys115Slc, true, true)
		yys115 := string(yys115Slc)
		switch yys115 {
		case "targetPercentage":
			if r.TryDecodeAsNil() {
				x.TargetPercentage = 0
			} else {
				x.TargetPercentage = int(r.DecodeInt(codecSelferBitsize1234))
			}
		default:
			z.DecStructFieldNotFound(-1, yys115)
		} // end switch yys115
	} // end for yyj115
	if !yyhl115 {
		r.ReadEnd()
	}
}

func (x *CPUTargetUtilization) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj117 int
	var yyb117 bool
	var yyhl117 bool = l >= 0
	yyj117++
	if yyhl117 {
		yyb117 = yyj117 > l
	} else {
		yyb117 = r.CheckBreak()
	}
	if yyb117 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.TargetPercentage = 0
	} else {
		x.TargetPercentage = int(r.DecodeInt(codecSelferBitsize1234))
	}
	for {
		yyj117++
		if yyhl117 {
			yyb117 = yyj117 > l
		} else {
			yyb117 = r.CheckBreak()
		}
		if yyb117 {
			break
		}
		z.DecStructFieldNotFound(yyj117-1, "")
	}
	r.ReadEnd()
}

func (x *HorizontalPodAutoscalerSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym119 := z.EncBinary()
		_ = yym119
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep120 := !z.EncBinary()
			yy2arr120 := z.EncBasicHandle().StructToArray
			var yyq120 [4]bool
			_, _, _ = yysep120, yyq120, yy2arr120
			const yyr120 bool = false
			yyq120[1] = x.MinReplicas != nil
			yyq120[3] = x.CPUUtilization != nil
			if yyr120 || yy2arr120 {
				r.EncodeArrayStart(4)
			} else {
				var yynn120 int = 2
				for _, b := range yyq120 {
					if b {
						yynn120++
					}
				}
				r.EncodeMapStart(yynn120)
			}
			if yyr120 || yy2arr120 {
				yy122 := &x.ScaleRef
				yy122.CodecEncodeSelf(e)
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("scaleRef"))
				yy123 := &x.ScaleRef
				yy123.CodecEncodeSelf(e)
			}
			if yyr120 || yy2arr120 {
				if yyq120[1] {
					if x.MinReplicas == nil {
						r.EncodeNil()
					} else {
						yy125 := *x.MinReplicas
						yym126 := z.EncBinary()
						_ = yym126
						if false {
						} else {
							r.EncodeInt(int64(yy125))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq120[1] {
					r.EncodeString(codecSelferC_UTF81234, string("minReplicas"))
					if x.MinReplicas == nil {
						r.EncodeNil()
					} else {
						yy127 := *x.MinReplicas
						yym128 := z.EncBinary()
						_ = yym128
						if false {
						} else {
							r.EncodeInt(int64(yy127))
						}
					}
				}
			}
			if yyr120 || yy2arr120 {
				yym130 := z.EncBinary()
				_ = yym130
				if false {
				} else {
					r.EncodeInt(int64(x.MaxReplicas))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("maxReplicas"))
				yym131 := z.EncBinary()
				_ = yym131
				if false {
				} else {
					r.EncodeInt(int64(x.MaxReplicas))
				}
			}
			if yyr120 || yy2arr120 {
				if yyq120[3] {
					if x.CPUUtilization == nil {
						r.EncodeNil()
					} else {
						x.CPUUtilization.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq120[3] {
					r.EncodeString(codecSelferC_UTF81234, string("cpuUtilization"))
					if x.CPUUtilization == nil {
						r.EncodeNil()
					} else {
						x.CPUUtilization.CodecEncodeSelf(e)
					}
				}
			}
			if yysep120 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *HorizontalPodAutoscalerSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym133 := z.DecBinary()
	_ = yym133
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl134 := r.ReadMapStart()
			if yyl134 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl134, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl134 := r.ReadArrayStart()
			if yyl134 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl134, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HorizontalPodAutoscalerSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys135Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys135Slc
	var yyhl135 bool = l >= 0
	for yyj135 := 0; ; yyj135++ {
		if yyhl135 {
			if yyj135 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys135Slc = r.DecodeBytes(yys135Slc, true, true)
		yys135 := string(yys135Slc)
		switch yys135 {
		case "scaleRef":
			if r.TryDecodeAsNil() {
				x.ScaleRef = SubresourceReference{}
			} else {
				yyv136 := &x.ScaleRef
				yyv136.CodecDecodeSelf(d)
			}
		case "minReplicas":
			if r.TryDecodeAsNil() {
				if x.MinReplicas != nil {
					x.MinReplicas = nil
				}
			} else {
				if x.MinReplicas == nil {
					x.MinReplicas = new(int)
				}
				yym138 := z.DecBinary()
				_ = yym138
				if false {
				} else {
					*((*int)(x.MinReplicas)) = int(r.DecodeInt(codecSelferBitsize1234))
				}
			}
		case "maxReplicas":
			if r.TryDecodeAsNil() {
				x.MaxReplicas = 0
			} else {
				x.MaxReplicas = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "cpuUtilization":
			if r.TryDecodeAsNil() {
				if x.CPUUtilization != nil {
					x.CPUUtilization = nil
				}
			} else {
				if x.CPUUtilization == nil {
					x.CPUUtilization = new(CPUTargetUtilization)
				}
				x.CPUUtilization.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys135)
		} // end switch yys135
	} // end for yyj135
	if !yyhl135 {
		r.ReadEnd()
	}
}

func (x *HorizontalPodAutoscalerSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj141 int
	var yyb141 bool
	var yyhl141 bool = l >= 0
	yyj141++
	if yyhl141 {
		yyb141 = yyj141 > l
	} else {
		yyb141 = r.CheckBreak()
	}
	if yyb141 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ScaleRef = SubresourceReference{}
	} else {
		yyv142 := &x.ScaleRef
		yyv142.CodecDecodeSelf(d)
	}
	yyj141++
	if yyhl141 {
		yyb141 = yyj141 > l
	} else {
		yyb141 = r.CheckBreak()
	}
	if yyb141 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.MinReplicas != nil {
			x.MinReplicas = nil
		}
	} else {
		if x.MinReplicas == nil {
			x.MinReplicas = new(int)
		}
		yym144 := z.DecBinary()
		_ = yym144
		if false {
		} else {
			*((*int)(x.MinReplicas)) = int(r.DecodeInt(codecSelferBitsize1234))
		}
	}
	yyj141++
	if yyhl141 {
		yyb141 = yyj141 > l
	} else {
		yyb141 = r.CheckBreak()
	}
	if yyb141 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.MaxReplicas = 0
	} else {
		x.MaxReplicas = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj141++
	if yyhl141 {
		yyb141 = yyj141 > l
	} else {
		yyb141 = r.CheckBreak()
	}
	if yyb141 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.CPUUtilization != nil {
			x.CPUUtilization = nil
		}
	} else {
		if x.CPUUtilization == nil {
			x.CPUUtilization = new(CPUTargetUtilization)
		}
		x.CPUUtilization.CodecDecodeSelf(d)
	}
	for {
		yyj141++
		if yyhl141 {
			yyb141 = yyj141 > l
		} else {
			yyb141 = r.CheckBreak()
		}
		if yyb141 {
			break
		}
		z.DecStructFieldNotFound(yyj141-1, "")
	}
	r.ReadEnd()
}

func (x *HorizontalPodAutoscalerStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym147 := z.EncBinary()
		_ = yym147
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep148 := !z.EncBinary()
			yy2arr148 := z.EncBasicHandle().StructToArray
			var yyq148 [5]bool
			_, _, _ = yysep148, yyq148, yy2arr148
			const yyr148 bool = false
			yyq148[0] = x.ObservedGeneration != nil
			yyq148[1] = x.LastScaleTime != nil
			yyq148[4] = x.CurrentCPUUtilizationPercentage != nil
			if yyr148 || yy2arr148 {
				r.EncodeArrayStart(5)
			} else {
				var yynn148 int = 2
				for _, b := range yyq148 {
					if b {
						yynn148++
					}
				}
				r.EncodeMapStart(yynn148)
			}
			if yyr148 || yy2arr148 {
				if yyq148[0] {
					if x.ObservedGeneration == nil {
						r.EncodeNil()
					} else {
						yy150 := *x.ObservedGeneration
						yym151 := z.EncBinary()
						_ = yym151
						if false {
						} else {
							r.EncodeInt(int64(yy150))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq148[0] {
					r.EncodeString(codecSelferC_UTF81234, string("observedGeneration"))
					if x.ObservedGeneration == nil {
						r.EncodeNil()
					} else {
						yy152 := *x.ObservedGeneration
						yym153 := z.EncBinary()
						_ = yym153
						if false {
						} else {
							r.EncodeInt(int64(yy152))
						}
					}
				}
			}
			if yyr148 || yy2arr148 {
				if yyq148[1] {
					if x.LastScaleTime == nil {
						r.EncodeNil()
					} else {
						yym155 := z.EncBinary()
						_ = yym155
						if false {
						} else if z.HasExtensions() && z.EncExt(x.LastScaleTime) {
						} else if yym155 {
							z.EncBinaryMarshal(x.LastScaleTime)
						} else if !yym155 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.LastScaleTime)
						} else {
							z.EncFallback(x.LastScaleTime)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq148[1] {
					r.EncodeString(codecSelferC_UTF81234, string("lastScaleTime"))
					if x.LastScaleTime == nil {
						r.EncodeNil()
					} else {
						yym156 := z.EncBinary()
						_ = yym156
						if false {
						} else if z.HasExtensions() && z.EncExt(x.LastScaleTime) {
						} else if yym156 {
							z.EncBinaryMarshal(x.LastScaleTime)
						} else if !yym156 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.LastScaleTime)
						} else {
							z.EncFallback(x.LastScaleTime)
						}
					}
				}
			}
			if yyr148 || yy2arr148 {
				yym158 := z.EncBinary()
				_ = yym158
				if false {
				} else {
					r.EncodeInt(int64(x.CurrentReplicas))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("currentReplicas"))
				yym159 := z.EncBinary()
				_ = yym159
				if false {
				} else {
					r.EncodeInt(int64(x.CurrentReplicas))
				}
			}
			if yyr148 || yy2arr148 {
				yym161 := z.EncBinary()
				_ = yym161
				if false {
				} else {
					r.EncodeInt(int64(x.DesiredReplicas))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("desiredReplicas"))
				yym162 := z.EncBinary()
				_ = yym162
				if false {
				} else {
					r.EncodeInt(int64(x.DesiredReplicas))
				}
			}
			if yyr148 || yy2arr148 {
				if yyq148[4] {
					if x.CurrentCPUUtilizationPercentage == nil {
						r.EncodeNil()
					} else {
						yy164 := *x.CurrentCPUUtilizationPercentage
						yym165 := z.EncBinary()
						_ = yym165
						if false {
						} else {
							r.EncodeInt(int64(yy164))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq148[4] {
					r.EncodeString(codecSelferC_UTF81234, string("currentCPUUtilizationPercentage"))
					if x.CurrentCPUUtilizationPercentage == nil {
						r.EncodeNil()
					} else {
						yy166 := *x.CurrentCPUUtilizationPercentage
						yym167 := z.EncBinary()
						_ = yym167
						if false {
						} else {
							r.EncodeInt(int64(yy166))
						}
					}
				}
			}
			if yysep148 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *HorizontalPodAutoscalerStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym168 := z.DecBinary()
	_ = yym168
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl169 := r.ReadMapStart()
			if yyl169 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl169, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl169 := r.ReadArrayStart()
			if yyl169 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl169, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HorizontalPodAutoscalerStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys170Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys170Slc
	var yyhl170 bool = l >= 0
	for yyj170 := 0; ; yyj170++ {
		if yyhl170 {
			if yyj170 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys170Slc = r.DecodeBytes(yys170Slc, true, true)
		yys170 := string(yys170Slc)
		switch yys170 {
		case "observedGeneration":
			if r.TryDecodeAsNil() {
				if x.ObservedGeneration != nil {
					x.ObservedGeneration = nil
				}
			} else {
				if x.ObservedGeneration == nil {
					x.ObservedGeneration = new(int64)
				}
				yym172 := z.DecBinary()
				_ = yym172
				if false {
				} else {
					*((*int64)(x.ObservedGeneration)) = int64(r.DecodeInt(64))
				}
			}
		case "lastScaleTime":
			if r.TryDecodeAsNil() {
				if x.LastScaleTime != nil {
					x.LastScaleTime = nil
				}
			} else {
				if x.LastScaleTime == nil {
					x.LastScaleTime = new(pkg1_unversioned.Time)
				}
				yym174 := z.DecBinary()
				_ = yym174
				if false {
				} else if z.HasExtensions() && z.DecExt(x.LastScaleTime) {
				} else if yym174 {
					z.DecBinaryUnmarshal(x.LastScaleTime)
				} else if !yym174 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.LastScaleTime)
				} else {
					z.DecFallback(x.LastScaleTime, false)
				}
			}
		case "currentReplicas":
			if r.TryDecodeAsNil() {
				x.CurrentReplicas = 0
			} else {
				x.CurrentReplicas = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "desiredReplicas":
			if r.TryDecodeAsNil() {
				x.DesiredReplicas = 0
			} else {
				x.DesiredReplicas = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "currentCPUUtilizationPercentage":
			if r.TryDecodeAsNil() {
				if x.CurrentCPUUtilizationPercentage != nil {
					x.CurrentCPUUtilizationPercentage = nil
				}
			} else {
				if x.CurrentCPUUtilizationPercentage == nil {
					x.CurrentCPUUtilizationPercentage = new(int)
				}
				yym178 := z.DecBinary()
				_ = yym178
				if false {
				} else {
					*((*int)(x.CurrentCPUUtilizationPercentage)) = int(r.DecodeInt(codecSelferBitsize1234))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys170)
		} // end switch yys170
	} // end for yyj170
	if !yyhl170 {
		r.ReadEnd()
	}
}

func (x *HorizontalPodAutoscalerStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj179 int
	var yyb179 bool
	var yyhl179 bool = l >= 0
	yyj179++
	if yyhl179 {
		yyb179 = yyj179 > l
	} else {
		yyb179 = r.CheckBreak()
	}
	if yyb179 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.ObservedGeneration != nil {
			x.ObservedGeneration = nil
		}
	} else {
		if x.ObservedGeneration == nil {
			x.ObservedGeneration = new(int64)
		}
		yym181 := z.DecBinary()
		_ = yym181
		if false {
		} else {
			*((*int64)(x.ObservedGeneration)) = int64(r.DecodeInt(64))
		}
	}
	yyj179++
	if yyhl179 {
		yyb179 = yyj179 > l
	} else {
		yyb179 = r.CheckBreak()
	}
	if yyb179 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.LastScaleTime != nil {
			x.LastScaleTime = nil
		}
	} else {
		if x.LastScaleTime == nil {
			x.LastScaleTime = new(pkg1_unversioned.Time)
		}
		yym183 := z.DecBinary()
		_ = yym183
		if false {
		} else if z.HasExtensions() && z.DecExt(x.LastScaleTime) {
		} else if yym183 {
			z.DecBinaryUnmarshal(x.LastScaleTime)
		} else if !yym183 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.LastScaleTime)
		} else {
			z.DecFallback(x.LastScaleTime, false)
		}
	}
	yyj179++
	if yyhl179 {
		yyb179 = yyj179 > l
	} else {
		yyb179 = r.CheckBreak()
	}
	if yyb179 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.CurrentReplicas = 0
	} else {
		x.CurrentReplicas = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj179++
	if yyhl179 {
		yyb179 = yyj179 > l
	} else {
		yyb179 = r.CheckBreak()
	}
	if yyb179 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.DesiredReplicas = 0
	} else {
		x.DesiredReplicas = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj179++
	if yyhl179 {
		yyb179 = yyj179 > l
	} else {
		yyb179 = r.CheckBreak()
	}
	if yyb179 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.CurrentCPUUtilizationPercentage != nil {
			x.CurrentCPUUtilizationPercentage = nil
		}
	} else {
		if x.CurrentCPUUtilizationPercentage == nil {
			x.CurrentCPUUtilizationPercentage = new(int)
		}
		yym187 := z.DecBinary()
		_ = yym187
		if false {
		} else {
			*((*int)(x.CurrentCPUUtilizationPercentage)) = int(r.DecodeInt(codecSelferBitsize1234))
		}
	}
	for {
		yyj179++
		if yyhl179 {
			yyb179 = yyj179 > l
		} else {
			yyb179 = r.CheckBreak()
		}
		if yyb179 {
			break
		}
		z.DecStructFieldNotFound(yyj179-1, "")
	}
	r.ReadEnd()
}

func (x *HorizontalPodAutoscaler) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym188 := z.EncBinary()
		_ = yym188
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep189 := !z.EncBinary()
			yy2arr189 := z.EncBasicHandle().StructToArray
			var yyq189 [5]bool
			_, _, _ = yysep189, yyq189, yy2arr189
			const yyr189 bool = false
			yyq189[0] = x.Kind != ""
			yyq189[1] = x.APIVersion != ""
			yyq189[2] = true
			yyq189[3] = true
			yyq189[4] = true
			if yyr189 || yy2arr189 {
				r.EncodeArrayStart(5)
			} else {
				var yynn189 int = 0
				for _, b := range yyq189 {
					if b {
						yynn189++
					}
				}
				r.EncodeMapStart(yynn189)
			}
			if yyr189 || yy2arr189 {
				if yyq189[0] {
					yym191 := z.EncBinary()
					_ = yym191
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq189[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym192 := z.EncBinary()
					_ = yym192
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr189 || yy2arr189 {
				if yyq189[1] {
					yym194 := z.EncBinary()
					_ = yym194
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq189[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym195 := z.EncBinary()
					_ = yym195
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr189 || yy2arr189 {
				if yyq189[2] {
					yy197 := &x.ObjectMeta
					yy197.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq189[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy198 := &x.ObjectMeta
					yy198.CodecEncodeSelf(e)
				}
			}
			if yyr189 || yy2arr189 {
				if yyq189[3] {
					yy200 := &x.Spec
					yy200.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq189[3] {
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					yy201 := &x.Spec
					yy201.CodecEncodeSelf(e)
				}
			}
			if yyr189 || yy2arr189 {
				if yyq189[4] {
					yy203 := &x.Status
					yy203.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq189[4] {
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					yy204 := &x.Status
					yy204.CodecEncodeSelf(e)
				}
			}
			if yysep189 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *HorizontalPodAutoscaler) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym205 := z.DecBinary()
	_ = yym205
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl206 := r.ReadMapStart()
			if yyl206 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl206, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl206 := r.ReadArrayStart()
			if yyl206 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl206, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HorizontalPodAutoscaler) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys207Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys207Slc
	var yyhl207 bool = l >= 0
	for yyj207 := 0; ; yyj207++ {
		if yyhl207 {
			if yyj207 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys207Slc = r.DecodeBytes(yys207Slc, true, true)
		yys207 := string(yys207Slc)
		switch yys207 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_api.ObjectMeta{}
			} else {
				yyv210 := &x.ObjectMeta
				yyv210.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = HorizontalPodAutoscalerSpec{}
			} else {
				yyv211 := &x.Spec
				yyv211.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = HorizontalPodAutoscalerStatus{}
			} else {
				yyv212 := &x.Status
				yyv212.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys207)
		} // end switch yys207
	} // end for yyj207
	if !yyhl207 {
		r.ReadEnd()
	}
}

func (x *HorizontalPodAutoscaler) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj213 int
	var yyb213 bool
	var yyhl213 bool = l >= 0
	yyj213++
	if yyhl213 {
		yyb213 = yyj213 > l
	} else {
		yyb213 = r.CheckBreak()
	}
	if yyb213 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj213++
	if yyhl213 {
		yyb213 = yyj213 > l
	} else {
		yyb213 = r.CheckBreak()
	}
	if yyb213 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj213++
	if yyhl213 {
		yyb213 = yyj213 > l
	} else {
		yyb213 = r.CheckBreak()
	}
	if yyb213 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_api.ObjectMeta{}
	} else {
		yyv216 := &x.ObjectMeta
		yyv216.CodecDecodeSelf(d)
	}
	yyj213++
	if yyhl213 {
		yyb213 = yyj213 > l
	} else {
		yyb213 = r.CheckBreak()
	}
	if yyb213 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Spec = HorizontalPodAutoscalerSpec{}
	} else {
		yyv217 := &x.Spec
		yyv217.CodecDecodeSelf(d)
	}
	yyj213++
	if yyhl213 {
		yyb213 = yyj213 > l
	} else {
		yyb213 = r.CheckBreak()
	}
	if yyb213 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = HorizontalPodAutoscalerStatus{}
	} else {
		yyv218 := &x.Status
		yyv218.CodecDecodeSelf(d)
	}
	for {
		yyj213++
		if yyhl213 {
			yyb213 = yyj213 > l
		} else {
			yyb213 = r.CheckBreak()
		}
		if yyb213 {
			break
		}
		z.DecStructFieldNotFound(yyj213-1, "")
	}
	r.ReadEnd()
}

func (x *HorizontalPodAutoscalerList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym219 := z.EncBinary()
		_ = yym219
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep220 := !z.EncBinary()
			yy2arr220 := z.EncBasicHandle().StructToArray
			var yyq220 [4]bool
			_, _, _ = yysep220, yyq220, yy2arr220
			const yyr220 bool = false
			yyq220[0] = x.Kind != ""
			yyq220[1] = x.APIVersion != ""
			yyq220[2] = true
			if yyr220 || yy2arr220 {
				r.EncodeArrayStart(4)
			} else {
				var yynn220 int = 1
				for _, b := range yyq220 {
					if b {
						yynn220++
					}
				}
				r.EncodeMapStart(yynn220)
			}
			if yyr220 || yy2arr220 {
				if yyq220[0] {
					yym222 := z.EncBinary()
					_ = yym222
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq220[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym223 := z.EncBinary()
					_ = yym223
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr220 || yy2arr220 {
				if yyq220[1] {
					yym225 := z.EncBinary()
					_ = yym225
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq220[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym226 := z.EncBinary()
					_ = yym226
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr220 || yy2arr220 {
				if yyq220[2] {
					yy228 := &x.ListMeta
					yym229 := z.EncBinary()
					_ = yym229
					if false {
					} else if z.HasExtensions() && z.EncExt(yy228) {
					} else {
						z.EncFallback(yy228)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq220[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy230 := &x.ListMeta
					yym231 := z.EncBinary()
					_ = yym231
					if false {
					} else if z.HasExtensions() && z.EncExt(yy230) {
					} else {
						z.EncFallback(yy230)
					}
				}
			}
			if yyr220 || yy2arr220 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym233 := z.EncBinary()
					_ = yym233
					if false {
					} else {
						h.encSliceHorizontalPodAutoscaler(([]HorizontalPodAutoscaler)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym234 := z.EncBinary()
					_ = yym234
					if false {
					} else {
						h.encSliceHorizontalPodAutoscaler(([]HorizontalPodAutoscaler)(x.Items), e)
					}
				}
			}
			if yysep220 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *HorizontalPodAutoscalerList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym235 := z.DecBinary()
	_ = yym235
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl236 := r.ReadMapStart()
			if yyl236 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl236, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl236 := r.ReadArrayStart()
			if yyl236 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl236, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HorizontalPodAutoscalerList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys237Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys237Slc
	var yyhl237 bool = l >= 0
	for yyj237 := 0; ; yyj237++ {
		if yyhl237 {
			if yyj237 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys237Slc = r.DecodeBytes(yys237Slc, true, true)
		yys237 := string(yys237Slc)
		switch yys237 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_unversioned.ListMeta{}
			} else {
				yyv240 := &x.ListMeta
				yym241 := z.DecBinary()
				_ = yym241
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv240) {
				} else {
					z.DecFallback(yyv240, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv242 := &x.Items
				yym243 := z.DecBinary()
				_ = yym243
				if false {
				} else {
					h.decSliceHorizontalPodAutoscaler((*[]HorizontalPodAutoscaler)(yyv242), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys237)
		} // end switch yys237
	} // end for yyj237
	if !yyhl237 {
		r.ReadEnd()
	}
}

func (x *HorizontalPodAutoscalerList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj244 int
	var yyb244 bool
	var yyhl244 bool = l >= 0
	yyj244++
	if yyhl244 {
		yyb244 = yyj244 > l
	} else {
		yyb244 = r.CheckBreak()
	}
	if yyb244 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj244++
	if yyhl244 {
		yyb244 = yyj244 > l
	} else {
		yyb244 = r.CheckBreak()
	}
	if yyb244 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj244++
	if yyhl244 {
		yyb244 = yyj244 > l
	} else {
		yyb244 = r.CheckBreak()
	}
	if yyb244 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_unversioned.ListMeta{}
	} else {
		yyv247 := &x.ListMeta
		yym248 := z.DecBinary()
		_ = yym248
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv247) {
		} else {
			z.DecFallback(yyv247, false)
		}
	}
	yyj244++
	if yyhl244 {
		yyb244 = yyj244 > l
	} else {
		yyb244 = r.CheckBreak()
	}
	if yyb244 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv249 := &x.Items
		yym250 := z.DecBinary()
		_ = yym250
		if false {
		} else {
			h.decSliceHorizontalPodAutoscaler((*[]HorizontalPodAutoscaler)(yyv249), d)
		}
	}
	for {
		yyj244++
		if yyhl244 {
			yyb244 = yyj244 > l
		} else {
			yyb244 = r.CheckBreak()
		}
		if yyb244 {
			break
		}
		z.DecStructFieldNotFound(yyj244-1, "")
	}
	r.ReadEnd()
}

func (x *ThirdPartyResource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym251 := z.EncBinary()
		_ = yym251
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep252 := !z.EncBinary()
			yy2arr252 := z.EncBasicHandle().StructToArray
			var yyq252 [5]bool
			_, _, _ = yysep252, yyq252, yy2arr252
			const yyr252 bool = false
			yyq252[0] = x.Kind != ""
			yyq252[1] = x.APIVersion != ""
			yyq252[2] = true
			yyq252[3] = x.Description != ""
			yyq252[4] = len(x.Versions) != 0
			if yyr252 || yy2arr252 {
				r.EncodeArrayStart(5)
			} else {
				var yynn252 int = 0
				for _, b := range yyq252 {
					if b {
						yynn252++
					}
				}
				r.EncodeMapStart(yynn252)
			}
			if yyr252 || yy2arr252 {
				if yyq252[0] {
					yym254 := z.EncBinary()
					_ = yym254
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq252[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym255 := z.EncBinary()
					_ = yym255
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr252 || yy2arr252 {
				if yyq252[1] {
					yym257 := z.EncBinary()
					_ = yym257
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq252[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym258 := z.EncBinary()
					_ = yym258
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr252 || yy2arr252 {
				if yyq252[2] {
					yy260 := &x.ObjectMeta
					yy260.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq252[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy261 := &x.ObjectMeta
					yy261.CodecEncodeSelf(e)
				}
			}
			if yyr252 || yy2arr252 {
				if yyq252[3] {
					yym263 := z.EncBinary()
					_ = yym263
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Description))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq252[3] {
					r.EncodeString(codecSelferC_UTF81234, string("description"))
					yym264 := z.EncBinary()
					_ = yym264
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Description))
					}
				}
			}
			if yyr252 || yy2arr252 {
				if yyq252[4] {
					if x.Versions == nil {
						r.EncodeNil()
					} else {
						yym266 := z.EncBinary()
						_ = yym266
						if false {
						} else {
							h.encSliceAPIVersion(([]APIVersion)(x.Versions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq252[4] {
					r.EncodeString(codecSelferC_UTF81234, string("versions"))
					if x.Versions == nil {
						r.EncodeNil()
					} else {
						yym267 := z.EncBinary()
						_ = yym267
						if false {
						} else {
							h.encSliceAPIVersion(([]APIVersion)(x.Versions), e)
						}
					}
				}
			}
			if yysep252 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ThirdPartyResource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym268 := z.DecBinary()
	_ = yym268
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl269 := r.ReadMapStart()
			if yyl269 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl269, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl269 := r.ReadArrayStart()
			if yyl269 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl269, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ThirdPartyResource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys270Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys270Slc
	var yyhl270 bool = l >= 0
	for yyj270 := 0; ; yyj270++ {
		if yyhl270 {
			if yyj270 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys270Slc = r.DecodeBytes(yys270Slc, true, true)
		yys270 := string(yys270Slc)
		switch yys270 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_api.ObjectMeta{}
			} else {
				yyv273 := &x.ObjectMeta
				yyv273.CodecDecodeSelf(d)
			}
		case "description":
			if r.TryDecodeAsNil() {
				x.Description = ""
			} else {
				x.Description = string(r.DecodeString())
			}
		case "versions":
			if r.TryDecodeAsNil() {
				x.Versions = nil
			} else {
				yyv275 := &x.Versions
				yym276 := z.DecBinary()
				_ = yym276
				if false {
				} else {
					h.decSliceAPIVersion((*[]APIVersion)(yyv275), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys270)
		} // end switch yys270
	} // end for yyj270
	if !yyhl270 {
		r.ReadEnd()
	}
}

func (x *ThirdPartyResource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj277 int
	var yyb277 bool
	var yyhl277 bool = l >= 0
	yyj277++
	if yyhl277 {
		yyb277 = yyj277 > l
	} else {
		yyb277 = r.CheckBreak()
	}
	if yyb277 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj277++
	if yyhl277 {
		yyb277 = yyj277 > l
	} else {
		yyb277 = r.CheckBreak()
	}
	if yyb277 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj277++
	if yyhl277 {
		yyb277 = yyj277 > l
	} else {
		yyb277 = r.CheckBreak()
	}
	if yyb277 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_api.ObjectMeta{}
	} else {
		yyv280 := &x.ObjectMeta
		yyv280.CodecDecodeSelf(d)
	}
	yyj277++
	if yyhl277 {
		yyb277 = yyj277 > l
	} else {
		yyb277 = r.CheckBreak()
	}
	if yyb277 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Description = ""
	} else {
		x.Description = string(r.DecodeString())
	}
	yyj277++
	if yyhl277 {
		yyb277 = yyj277 > l
	} else {
		yyb277 = r.CheckBreak()
	}
	if yyb277 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Versions = nil
	} else {
		yyv282 := &x.Versions
		yym283 := z.DecBinary()
		_ = yym283
		if false {
		} else {
			h.decSliceAPIVersion((*[]APIVersion)(yyv282), d)
		}
	}
	for {
		yyj277++
		if yyhl277 {
			yyb277 = yyj277 > l
		} else {
			yyb277 = r.CheckBreak()
		}
		if yyb277 {
			break
		}
		z.DecStructFieldNotFound(yyj277-1, "")
	}
	r.ReadEnd()
}

func (x *ThirdPartyResourceList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym284 := z.EncBinary()
		_ = yym284
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep285 := !z.EncBinary()
			yy2arr285 := z.EncBasicHandle().StructToArray
			var yyq285 [4]bool
			_, _, _ = yysep285, yyq285, yy2arr285
			const yyr285 bool = false
			yyq285[0] = x.Kind != ""
			yyq285[1] = x.APIVersion != ""
			yyq285[2] = true
			if yyr285 || yy2arr285 {
				r.EncodeArrayStart(4)
			} else {
				var yynn285 int = 1
				for _, b := range yyq285 {
					if b {
						yynn285++
					}
				}
				r.EncodeMapStart(yynn285)
			}
			if yyr285 || yy2arr285 {
				if yyq285[0] {
					yym287 := z.EncBinary()
					_ = yym287
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq285[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym288 := z.EncBinary()
					_ = yym288
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr285 || yy2arr285 {
				if yyq285[1] {
					yym290 := z.EncBinary()
					_ = yym290
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq285[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym291 := z.EncBinary()
					_ = yym291
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr285 || yy2arr285 {
				if yyq285[2] {
					yy293 := &x.ListMeta
					yym294 := z.EncBinary()
					_ = yym294
					if false {
					} else if z.HasExtensions() && z.EncExt(yy293) {
					} else {
						z.EncFallback(yy293)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq285[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy295 := &x.ListMeta
					yym296 := z.EncBinary()
					_ = yym296
					if false {
					} else if z.HasExtensions() && z.EncExt(yy295) {
					} else {
						z.EncFallback(yy295)
					}
				}
			}
			if yyr285 || yy2arr285 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym298 := z.EncBinary()
					_ = yym298
					if false {
					} else {
						h.encSliceThirdPartyResource(([]ThirdPartyResource)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym299 := z.EncBinary()
					_ = yym299
					if false {
					} else {
						h.encSliceThirdPartyResource(([]ThirdPartyResource)(x.Items), e)
					}
				}
			}
			if yysep285 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ThirdPartyResourceList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym300 := z.DecBinary()
	_ = yym300
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl301 := r.ReadMapStart()
			if yyl301 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl301, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl301 := r.ReadArrayStart()
			if yyl301 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl301, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ThirdPartyResourceList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys302Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys302Slc
	var yyhl302 bool = l >= 0
	for yyj302 := 0; ; yyj302++ {
		if yyhl302 {
			if yyj302 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys302Slc = r.DecodeBytes(yys302Slc, true, true)
		yys302 := string(yys302Slc)
		switch yys302 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_unversioned.ListMeta{}
			} else {
				yyv305 := &x.ListMeta
				yym306 := z.DecBinary()
				_ = yym306
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv305) {
				} else {
					z.DecFallback(yyv305, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv307 := &x.Items
				yym308 := z.DecBinary()
				_ = yym308
				if false {
				} else {
					h.decSliceThirdPartyResource((*[]ThirdPartyResource)(yyv307), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys302)
		} // end switch yys302
	} // end for yyj302
	if !yyhl302 {
		r.ReadEnd()
	}
}

func (x *ThirdPartyResourceList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj309 int
	var yyb309 bool
	var yyhl309 bool = l >= 0
	yyj309++
	if yyhl309 {
		yyb309 = yyj309 > l
	} else {
		yyb309 = r.CheckBreak()
	}
	if yyb309 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj309++
	if yyhl309 {
		yyb309 = yyj309 > l
	} else {
		yyb309 = r.CheckBreak()
	}
	if yyb309 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj309++
	if yyhl309 {
		yyb309 = yyj309 > l
	} else {
		yyb309 = r.CheckBreak()
	}
	if yyb309 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_unversioned.ListMeta{}
	} else {
		yyv312 := &x.ListMeta
		yym313 := z.DecBinary()
		_ = yym313
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv312) {
		} else {
			z.DecFallback(yyv312, false)
		}
	}
	yyj309++
	if yyhl309 {
		yyb309 = yyj309 > l
	} else {
		yyb309 = r.CheckBreak()
	}
	if yyb309 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv314 := &x.Items
		yym315 := z.DecBinary()
		_ = yym315
		if false {
		} else {
			h.decSliceThirdPartyResource((*[]ThirdPartyResource)(yyv314), d)
		}
	}
	for {
		yyj309++
		if yyhl309 {
			yyb309 = yyj309 > l
		} else {
			yyb309 = r.CheckBreak()
		}
		if yyb309 {
			break
		}
		z.DecStructFieldNotFound(yyj309-1, "")
	}
	r.ReadEnd()
}

func (x *APIVersion) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym316 := z.EncBinary()
		_ = yym316
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep317 := !z.EncBinary()
			yy2arr317 := z.EncBasicHandle().StructToArray
			var yyq317 [2]bool
			_, _, _ = yysep317, yyq317, yy2arr317
			const yyr317 bool = false
			yyq317[0] = x.Name != ""
			yyq317[1] = x.APIGroup != ""
			if yyr317 || yy2arr317 {
				r.EncodeArrayStart(2)
			} else {
				var yynn317 int = 0
				for _, b := range yyq317 {
					if b {
						yynn317++
					}
				}
				r.EncodeMapStart(yynn317)
			}
			if yyr317 || yy2arr317 {
				if yyq317[0] {
					yym319 := z.EncBinary()
					_ = yym319
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq317[0] {
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					yym320 := z.EncBinary()
					_ = yym320
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr317 || yy2arr317 {
				if yyq317[1] {
					yym322 := z.EncBinary()
					_ = yym322
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIGroup))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq317[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiGroup"))
					yym323 := z.EncBinary()
					_ = yym323
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIGroup))
					}
				}
			}
			if yysep317 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *APIVersion) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym324 := z.DecBinary()
	_ = yym324
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl325 := r.ReadMapStart()
			if yyl325 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl325, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl325 := r.ReadArrayStart()
			if yyl325 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl325, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *APIVersion) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys326Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys326Slc
	var yyhl326 bool = l >= 0
	for yyj326 := 0; ; yyj326++ {
		if yyhl326 {
			if yyj326 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys326Slc = r.DecodeBytes(yys326Slc, true, true)
		yys326 := string(yys326Slc)
		switch yys326 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "apiGroup":
			if r.TryDecodeAsNil() {
				x.APIGroup = ""
			} else {
				x.APIGroup = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys326)
		} // end switch yys326
	} // end for yyj326
	if !yyhl326 {
		r.ReadEnd()
	}
}

func (x *APIVersion) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj329 int
	var yyb329 bool
	var yyhl329 bool = l >= 0
	yyj329++
	if yyhl329 {
		yyb329 = yyj329 > l
	} else {
		yyb329 = r.CheckBreak()
	}
	if yyb329 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj329++
	if yyhl329 {
		yyb329 = yyj329 > l
	} else {
		yyb329 = r.CheckBreak()
	}
	if yyb329 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIGroup = ""
	} else {
		x.APIGroup = string(r.DecodeString())
	}
	for {
		yyj329++
		if yyhl329 {
			yyb329 = yyj329 > l
		} else {
			yyb329 = r.CheckBreak()
		}
		if yyb329 {
			break
		}
		z.DecStructFieldNotFound(yyj329-1, "")
	}
	r.ReadEnd()
}

func (x *ThirdPartyResourceData) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym332 := z.EncBinary()
		_ = yym332
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep333 := !z.EncBinary()
			yy2arr333 := z.EncBasicHandle().StructToArray
			var yyq333 [4]bool
			_, _, _ = yysep333, yyq333, yy2arr333
			const yyr333 bool = false
			yyq333[0] = x.Kind != ""
			yyq333[1] = x.APIVersion != ""
			yyq333[2] = true
			yyq333[3] = len(x.Data) != 0
			if yyr333 || yy2arr333 {
				r.EncodeArrayStart(4)
			} else {
				var yynn333 int = 0
				for _, b := range yyq333 {
					if b {
						yynn333++
					}
				}
				r.EncodeMapStart(yynn333)
			}
			if yyr333 || yy2arr333 {
				if yyq333[0] {
					yym335 := z.EncBinary()
					_ = yym335
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq333[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym336 := z.EncBinary()
					_ = yym336
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr333 || yy2arr333 {
				if yyq333[1] {
					yym338 := z.EncBinary()
					_ = yym338
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq333[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym339 := z.EncBinary()
					_ = yym339
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr333 || yy2arr333 {
				if yyq333[2] {
					yy341 := &x.ObjectMeta
					yy341.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq333[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy342 := &x.ObjectMeta
					yy342.CodecEncodeSelf(e)
				}
			}
			if yyr333 || yy2arr333 {
				if yyq333[3] {
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym344 := z.EncBinary()
						_ = yym344
						if false {
						} else {
							r.EncodeStringBytes(codecSelferC_RAW1234, []byte(x.Data))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq333[3] {
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym345 := z.EncBinary()
						_ = yym345
						if false {
						} else {
							r.EncodeStringBytes(codecSelferC_RAW1234, []byte(x.Data))
						}
					}
				}
			}
			if yysep333 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ThirdPartyResourceData) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym346 := z.DecBinary()
	_ = yym346
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl347 := r.ReadMapStart()
			if yyl347 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl347, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl347 := r.ReadArrayStart()
			if yyl347 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl347, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ThirdPartyResourceData) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys348Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys348Slc
	var yyhl348 bool = l >= 0
	for yyj348 := 0; ; yyj348++ {
		if yyhl348 {
			if yyj348 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys348Slc = r.DecodeBytes(yys348Slc, true, true)
		yys348 := string(yys348Slc)
		switch yys348 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_api.ObjectMeta{}
			} else {
				yyv351 := &x.ObjectMeta
				yyv351.CodecDecodeSelf(d)
			}
		case "name":
			if r.TryDecodeAsNil() {
				x.Data = nil
			} else {
				yyv352 := &x.Data
				yym353 := z.DecBinary()
				_ = yym353
				if false {
				} else {
					*yyv352 = r.DecodeBytes(*(*[]byte)(yyv352), false, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys348)
		} // end switch yys348
	} // end for yyj348
	if !yyhl348 {
		r.ReadEnd()
	}
}

func (x *ThirdPartyResourceData) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj354 int
	var yyb354 bool
	var yyhl354 bool = l >= 0
	yyj354++
	if yyhl354 {
		yyb354 = yyj354 > l
	} else {
		yyb354 = r.CheckBreak()
	}
	if yyb354 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj354++
	if yyhl354 {
		yyb354 = yyj354 > l
	} else {
		yyb354 = r.CheckBreak()
	}
	if yyb354 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj354++
	if yyhl354 {
		yyb354 = yyj354 > l
	} else {
		yyb354 = r.CheckBreak()
	}
	if yyb354 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_api.ObjectMeta{}
	} else {
		yyv357 := &x.ObjectMeta
		yyv357.CodecDecodeSelf(d)
	}
	yyj354++
	if yyhl354 {
		yyb354 = yyj354 > l
	} else {
		yyb354 = r.CheckBreak()
	}
	if yyb354 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Data = nil
	} else {
		yyv358 := &x.Data
		yym359 := z.DecBinary()
		_ = yym359
		if false {
		} else {
			*yyv358 = r.DecodeBytes(*(*[]byte)(yyv358), false, false)
		}
	}
	for {
		yyj354++
		if yyhl354 {
			yyb354 = yyj354 > l
		} else {
			yyb354 = r.CheckBreak()
		}
		if yyb354 {
			break
		}
		z.DecStructFieldNotFound(yyj354-1, "")
	}
	r.ReadEnd()
}

func (x *Deployment) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym360 := z.EncBinary()
		_ = yym360
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep361 := !z.EncBinary()
			yy2arr361 := z.EncBasicHandle().StructToArray
			var yyq361 [5]bool
			_, _, _ = yysep361, yyq361, yy2arr361
			const yyr361 bool = false
			yyq361[0] = x.Kind != ""
			yyq361[1] = x.APIVersion != ""
			yyq361[2] = true
			yyq361[3] = true
			yyq361[4] = true
			if yyr361 || yy2arr361 {
				r.EncodeArrayStart(5)
			} else {
				var yynn361 int = 0
				for _, b := range yyq361 {
					if b {
						yynn361++
					}
				}
				r.EncodeMapStart(yynn361)
			}
			if yyr361 || yy2arr361 {
				if yyq361[0] {
					yym363 := z.EncBinary()
					_ = yym363
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq361[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym364 := z.EncBinary()
					_ = yym364
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr361 || yy2arr361 {
				if yyq361[1] {
					yym366 := z.EncBinary()
					_ = yym366
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq361[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym367 := z.EncBinary()
					_ = yym367
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr361 || yy2arr361 {
				if yyq361[2] {
					yy369 := &x.ObjectMeta
					yy369.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq361[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy370 := &x.ObjectMeta
					yy370.CodecEncodeSelf(e)
				}
			}
			if yyr361 || yy2arr361 {
				if yyq361[3] {
					yy372 := &x.Spec
					yy372.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq361[3] {
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					yy373 := &x.Spec
					yy373.CodecEncodeSelf(e)
				}
			}
			if yyr361 || yy2arr361 {
				if yyq361[4] {
					yy375 := &x.Status
					yy375.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq361[4] {
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					yy376 := &x.Status
					yy376.CodecEncodeSelf(e)
				}
			}
			if yysep361 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Deployment) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym377 := z.DecBinary()
	_ = yym377
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl378 := r.ReadMapStart()
			if yyl378 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl378, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl378 := r.ReadArrayStart()
			if yyl378 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl378, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Deployment) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys379Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys379Slc
	var yyhl379 bool = l >= 0
	for yyj379 := 0; ; yyj379++ {
		if yyhl379 {
			if yyj379 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys379Slc = r.DecodeBytes(yys379Slc, true, true)
		yys379 := string(yys379Slc)
		switch yys379 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_api.ObjectMeta{}
			} else {
				yyv382 := &x.ObjectMeta
				yyv382.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = DeploymentSpec{}
			} else {
				yyv383 := &x.Spec
				yyv383.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = DeploymentStatus{}
			} else {
				yyv384 := &x.Status
				yyv384.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys379)
		} // end switch yys379
	} // end for yyj379
	if !yyhl379 {
		r.ReadEnd()
	}
}

func (x *Deployment) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj385 int
	var yyb385 bool
	var yyhl385 bool = l >= 0
	yyj385++
	if yyhl385 {
		yyb385 = yyj385 > l
	} else {
		yyb385 = r.CheckBreak()
	}
	if yyb385 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj385++
	if yyhl385 {
		yyb385 = yyj385 > l
	} else {
		yyb385 = r.CheckBreak()
	}
	if yyb385 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj385++
	if yyhl385 {
		yyb385 = yyj385 > l
	} else {
		yyb385 = r.CheckBreak()
	}
	if yyb385 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_api.ObjectMeta{}
	} else {
		yyv388 := &x.ObjectMeta
		yyv388.CodecDecodeSelf(d)
	}
	yyj385++
	if yyhl385 {
		yyb385 = yyj385 > l
	} else {
		yyb385 = r.CheckBreak()
	}
	if yyb385 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Spec = DeploymentSpec{}
	} else {
		yyv389 := &x.Spec
		yyv389.CodecDecodeSelf(d)
	}
	yyj385++
	if yyhl385 {
		yyb385 = yyj385 > l
	} else {
		yyb385 = r.CheckBreak()
	}
	if yyb385 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = DeploymentStatus{}
	} else {
		yyv390 := &x.Status
		yyv390.CodecDecodeSelf(d)
	}
	for {
		yyj385++
		if yyhl385 {
			yyb385 = yyj385 > l
		} else {
			yyb385 = r.CheckBreak()
		}
		if yyb385 {
			break
		}
		z.DecStructFieldNotFound(yyj385-1, "")
	}
	r.ReadEnd()
}

func (x *DeploymentSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym391 := z.EncBinary()
		_ = yym391
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep392 := !z.EncBinary()
			yy2arr392 := z.EncBasicHandle().StructToArray
			var yyq392 [5]bool
			_, _, _ = yysep392, yyq392, yy2arr392
			const yyr392 bool = false
			yyq392[0] = x.Replicas != 0
			yyq392[1] = x.Selector != nil
			yyq392[2] = x.Template != nil
			yyq392[3] = true
			yyq392[4] = x.UniqueLabelKey != ""
			if yyr392 || yy2arr392 {
				r.EncodeArrayStart(5)
			} else {
				var yynn392 int = 0
				for _, b := range yyq392 {
					if b {
						yynn392++
					}
				}
				r.EncodeMapStart(yynn392)
			}
			if yyr392 || yy2arr392 {
				if yyq392[0] {
					yym394 := z.EncBinary()
					_ = yym394
					if false {
					} else {
						r.EncodeInt(int64(x.Replicas))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq392[0] {
					r.EncodeString(codecSelferC_UTF81234, string("replicas"))
					yym395 := z.EncBinary()
					_ = yym395
					if false {
					} else {
						r.EncodeInt(int64(x.Replicas))
					}
				}
			}
			if yyr392 || yy2arr392 {
				if yyq392[1] {
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						x.Selector.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq392[1] {
					r.EncodeString(codecSelferC_UTF81234, string("selector"))
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						x.Selector.CodecEncodeSelf(e)
					}
				}
			}
			if yyr392 || yy2arr392 {
				if yyq392[2] {
					if x.Template == nil {
						r.EncodeNil()
					} else {
						x.Template.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq392[2] {
					r.EncodeString(codecSelferC_UTF81234, string("template"))
					if x.Template == nil {
						r.EncodeNil()
					} else {
						x.Template.CodecEncodeSelf(e)
					}
				}
			}
			if yyr392 || yy2arr392 {
				if yyq392[3] {
					yy399 := &x.Strategy
					yy399.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq392[3] {
					r.EncodeString(codecSelferC_UTF81234, string("strategy"))
					yy400 := &x.Strategy
					yy400.CodecEncodeSelf(e)
				}
			}
			if yyr392 || yy2arr392 {
				if yyq392[4] {
					yym402 := z.EncBinary()
					_ = yym402
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UniqueLabelKey))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq392[4] {
					r.EncodeString(codecSelferC_UTF81234, string("uniqueLabelKey"))
					yym403 := z.EncBinary()
					_ = yym403
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UniqueLabelKey))
					}
				}
			}
			if yysep392 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *DeploymentSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym404 := z.DecBinary()
	_ = yym404
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl405 := r.ReadMapStart()
			if yyl405 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl405, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl405 := r.ReadArrayStart()
			if yyl405 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl405, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DeploymentSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys406Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys406Slc
	var yyhl406 bool = l >= 0
	for yyj406 := 0; ; yyj406++ {
		if yyhl406 {
			if yyj406 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys406Slc = r.DecodeBytes(yys406Slc, true, true)
		yys406 := string(yys406Slc)
		switch yys406 {
		case "replicas":
			if r.TryDecodeAsNil() {
				x.Replicas = 0
			} else {
				x.Replicas = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "selector":
			if r.TryDecodeAsNil() {
				if x.Selector != nil {
					x.Selector = nil
				}
			} else {
				if x.Selector == nil {
					x.Selector = new(PodSelector)
				}
				x.Selector.CodecDecodeSelf(d)
			}
		case "template":
			if r.TryDecodeAsNil() {
				if x.Template != nil {
					x.Template = nil
				}
			} else {
				if x.Template == nil {
					x.Template = new(pkg2_api.PodTemplateSpec)
				}
				x.Template.CodecDecodeSelf(d)
			}
		case "strategy":
			if r.TryDecodeAsNil() {
				x.Strategy = DeploymentStrategy{}
			} else {
				yyv410 := &x.Strategy
				yyv410.CodecDecodeSelf(d)
			}
		case "uniqueLabelKey":
			if r.TryDecodeAsNil() {
				x.UniqueLabelKey = ""
			} else {
				x.UniqueLabelKey = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys406)
		} // end switch yys406
	} // end for yyj406
	if !yyhl406 {
		r.ReadEnd()
	}
}

func (x *DeploymentSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj412 int
	var yyb412 bool
	var yyhl412 bool = l >= 0
	yyj412++
	if yyhl412 {
		yyb412 = yyj412 > l
	} else {
		yyb412 = r.CheckBreak()
	}
	if yyb412 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Replicas = 0
	} else {
		x.Replicas = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj412++
	if yyhl412 {
		yyb412 = yyj412 > l
	} else {
		yyb412 = r.CheckBreak()
	}
	if yyb412 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Selector != nil {
			x.Selector = nil
		}
	} else {
		if x.Selector == nil {
			x.Selector = new(PodSelector)
		}
		x.Selector.CodecDecodeSelf(d)
	}
	yyj412++
	if yyhl412 {
		yyb412 = yyj412 > l
	} else {
		yyb412 = r.CheckBreak()
	}
	if yyb412 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Template != nil {
			x.Template = nil
		}
	} else {
		if x.Template == nil {
			x.Template = new(pkg2_api.PodTemplateSpec)
		}
		x.Template.CodecDecodeSelf(d)
	}
	yyj412++
	if yyhl412 {
		yyb412 = yyj412 > l
	} else {
		yyb412 = r.CheckBreak()
	}
	if yyb412 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Strategy = DeploymentStrategy{}
	} else {
		yyv416 := &x.Strategy
		yyv416.CodecDecodeSelf(d)
	}
	yyj412++
	if yyhl412 {
		yyb412 = yyj412 > l
	} else {
		yyb412 = r.CheckBreak()
	}
	if yyb412 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.UniqueLabelKey = ""
	} else {
		x.UniqueLabelKey = string(r.DecodeString())
	}
	for {
		yyj412++
		if yyhl412 {
			yyb412 = yyj412 > l
		} else {
			yyb412 = r.CheckBreak()
		}
		if yyb412 {
			break
		}
		z.DecStructFieldNotFound(yyj412-1, "")
	}
	r.ReadEnd()
}

func (x *DeploymentStrategy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym418 := z.EncBinary()
		_ = yym418
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep419 := !z.EncBinary()
			yy2arr419 := z.EncBasicHandle().StructToArray
			var yyq419 [2]bool
			_, _, _ = yysep419, yyq419, yy2arr419
			const yyr419 bool = false
			yyq419[0] = x.Type != ""
			yyq419[1] = x.RollingUpdate != nil
			if yyr419 || yy2arr419 {
				r.EncodeArrayStart(2)
			} else {
				var yynn419 int = 0
				for _, b := range yyq419 {
					if b {
						yynn419++
					}
				}
				r.EncodeMapStart(yynn419)
			}
			if yyr419 || yy2arr419 {
				if yyq419[0] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq419[0] {
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yyr419 || yy2arr419 {
				if yyq419[1] {
					if x.RollingUpdate == nil {
						r.EncodeNil()
					} else {
						x.RollingUpdate.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq419[1] {
					r.EncodeString(codecSelferC_UTF81234, string("rollingUpdate"))
					if x.RollingUpdate == nil {
						r.EncodeNil()
					} else {
						x.RollingUpdate.CodecEncodeSelf(e)
					}
				}
			}
			if yysep419 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *DeploymentStrategy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym422 := z.DecBinary()
	_ = yym422
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl423 := r.ReadMapStart()
			if yyl423 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl423, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl423 := r.ReadArrayStart()
			if yyl423 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl423, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DeploymentStrategy) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys424Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys424Slc
	var yyhl424 bool = l >= 0
	for yyj424 := 0; ; yyj424++ {
		if yyhl424 {
			if yyj424 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys424Slc = r.DecodeBytes(yys424Slc, true, true)
		yys424 := string(yys424Slc)
		switch yys424 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = DeploymentStrategyType(r.DecodeString())
			}
		case "rollingUpdate":
			if r.TryDecodeAsNil() {
				if x.RollingUpdate != nil {
					x.RollingUpdate = nil
				}
			} else {
				if x.RollingUpdate == nil {
					x.RollingUpdate = new(RollingUpdateDeployment)
				}
				x.RollingUpdate.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys424)
		} // end switch yys424
	} // end for yyj424
	if !yyhl424 {
		r.ReadEnd()
	}
}

func (x *DeploymentStrategy) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj427 int
	var yyb427 bool
	var yyhl427 bool = l >= 0
	yyj427++
	if yyhl427 {
		yyb427 = yyj427 > l
	} else {
		yyb427 = r.CheckBreak()
	}
	if yyb427 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = DeploymentStrategyType(r.DecodeString())
	}
	yyj427++
	if yyhl427 {
		yyb427 = yyj427 > l
	} else {
		yyb427 = r.CheckBreak()
	}
	if yyb427 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.RollingUpdate != nil {
			x.RollingUpdate = nil
		}
	} else {
		if x.RollingUpdate == nil {
			x.RollingUpdate = new(RollingUpdateDeployment)
		}
		x.RollingUpdate.CodecDecodeSelf(d)
	}
	for {
		yyj427++
		if yyhl427 {
			yyb427 = yyj427 > l
		} else {
			yyb427 = r.CheckBreak()
		}
		if yyb427 {
			break
		}
		z.DecStructFieldNotFound(yyj427-1, "")
	}
	r.ReadEnd()
}

func (x DeploymentStrategyType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym430 := z.EncBinary()
	_ = yym430
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *DeploymentStrategyType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym431 := z.DecBinary()
	_ = yym431
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *RollingUpdateDeployment) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym432 := z.EncBinary()
		_ = yym432
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep433 := !z.EncBinary()
			yy2arr433 := z.EncBasicHandle().StructToArray
			var yyq433 [3]bool
			_, _, _ = yysep433, yyq433, yy2arr433
			const yyr433 bool = false
			yyq433[0] = true
			yyq433[1] = true
			yyq433[2] = x.MinReadySeconds != 0
			if yyr433 || yy2arr433 {
				r.EncodeArrayStart(3)
			} else {
				var yynn433 int = 0
				for _, b := range yyq433 {
					if b {
						yynn433++
					}
				}
				r.EncodeMapStart(yynn433)
			}
			if yyr433 || yy2arr433 {
				if yyq433[0] {
					yy435 := &x.MaxUnavailable
					yym436 := z.EncBinary()
					_ = yym436
					if false {
					} else if z.HasExtensions() && z.EncExt(yy435) {
					} else if !yym436 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy435)
					} else {
						z.EncFallback(yy435)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq433[0] {
					r.EncodeString(codecSelferC_UTF81234, string("maxUnavailable"))
					yy437 := &x.MaxUnavailable
					yym438 := z.EncBinary()
					_ = yym438
					if false {
					} else if z.HasExtensions() && z.EncExt(yy437) {
					} else if !yym438 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy437)
					} else {
						z.EncFallback(yy437)
					}
				}
			}
			if yyr433 || yy2arr433 {
				if yyq433[1] {
					yy440 := &x.MaxSurge
					yym441 := z.EncBinary()
					_ = yym441
					if false {
					} else if z.HasExtensions() && z.EncExt(yy440) {
					} else if !yym441 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy440)
					} else {
						z.EncFallback(yy440)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq433[1] {
					r.EncodeString(codecSelferC_UTF81234, string("maxSurge"))
					yy442 := &x.MaxSurge
					yym443 := z.EncBinary()
					_ = yym443
					if false {
					} else if z.HasExtensions() && z.EncExt(yy442) {
					} else if !yym443 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy442)
					} else {
						z.EncFallback(yy442)
					}
				}
			}
			if yyr433 || yy2arr433 {
				if yyq433[2] {
					yym445 := z.EncBinary()
					_ = yym445
					if false {
					} else {
						r.EncodeInt(int64(x.MinReadySeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq433[2] {
					r.EncodeString(codecSelferC_UTF81234, string("minReadySeconds"))
					yym446 := z.EncBinary()
					_ = yym446
					if false {
					} else {
						r.EncodeInt(int64(x.MinReadySeconds))
					}
				}
			}
			if yysep433 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *RollingUpdateDeployment) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym447 := z.DecBinary()
	_ = yym447
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl448 := r.ReadMapStart()
			if yyl448 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl448, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl448 := r.ReadArrayStart()
			if yyl448 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl448, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *RollingUpdateDeployment) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys449Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys449Slc
	var yyhl449 bool = l >= 0
	for yyj449 := 0; ; yyj449++ {
		if yyhl449 {
			if yyj449 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys449Slc = r.DecodeBytes(yys449Slc, true, true)
		yys449 := string(yys449Slc)
		switch yys449 {
		case "maxUnavailable":
			if r.TryDecodeAsNil() {
				x.MaxUnavailable = pkg6_util.IntOrString{}
			} else {
				yyv450 := &x.MaxUnavailable
				yym451 := z.DecBinary()
				_ = yym451
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv450) {
				} else if !yym451 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv450)
				} else {
					z.DecFallback(yyv450, false)
				}
			}
		case "maxSurge":
			if r.TryDecodeAsNil() {
				x.MaxSurge = pkg6_util.IntOrString{}
			} else {
				yyv452 := &x.MaxSurge
				yym453 := z.DecBinary()
				_ = yym453
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv452) {
				} else if !yym453 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv452)
				} else {
					z.DecFallback(yyv452, false)
				}
			}
		case "minReadySeconds":
			if r.TryDecodeAsNil() {
				x.MinReadySeconds = 0
			} else {
				x.MinReadySeconds = int(r.DecodeInt(codecSelferBitsize1234))
			}
		default:
			z.DecStructFieldNotFound(-1, yys449)
		} // end switch yys449
	} // end for yyj449
	if !yyhl449 {
		r.ReadEnd()
	}
}

func (x *RollingUpdateDeployment) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj455 int
	var yyb455 bool
	var yyhl455 bool = l >= 0
	yyj455++
	if yyhl455 {
		yyb455 = yyj455 > l
	} else {
		yyb455 = r.CheckBreak()
	}
	if yyb455 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.MaxUnavailable = pkg6_util.IntOrString{}
	} else {
		yyv456 := &x.MaxUnavailable
		yym457 := z.DecBinary()
		_ = yym457
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv456) {
		} else if !yym457 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv456)
		} else {
			z.DecFallback(yyv456, false)
		}
	}
	yyj455++
	if yyhl455 {
		yyb455 = yyj455 > l
	} else {
		yyb455 = r.CheckBreak()
	}
	if yyb455 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.MaxSurge = pkg6_util.IntOrString{}
	} else {
		yyv458 := &x.MaxSurge
		yym459 := z.DecBinary()
		_ = yym459
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv458) {
		} else if !yym459 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv458)
		} else {
			z.DecFallback(yyv458, false)
		}
	}
	yyj455++
	if yyhl455 {
		yyb455 = yyj455 > l
	} else {
		yyb455 = r.CheckBreak()
	}
	if yyb455 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.MinReadySeconds = 0
	} else {
		x.MinReadySeconds = int(r.DecodeInt(codecSelferBitsize1234))
	}
	for {
		yyj455++
		if yyhl455 {
			yyb455 = yyj455 > l
		} else {
			yyb455 = r.CheckBreak()
		}
		if yyb455 {
			break
		}
		z.DecStructFieldNotFound(yyj455-1, "")
	}
	r.ReadEnd()
}

func (x *DeploymentStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym461 := z.EncBinary()
		_ = yym461
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep462 := !z.EncBinary()
			yy2arr462 := z.EncBasicHandle().StructToArray
			var yyq462 [2]bool
			_, _, _ = yysep462, yyq462, yy2arr462
			const yyr462 bool = false
			yyq462[0] = x.Replicas != 0
			yyq462[1] = x.UpdatedReplicas != 0
			if yyr462 || yy2arr462 {
				r.EncodeArrayStart(2)
			} else {
				var yynn462 int = 0
				for _, b := range yyq462 {
					if b {
						yynn462++
					}
				}
				r.EncodeMapStart(yynn462)
			}
			if yyr462 || yy2arr462 {
				if yyq462[0] {
					yym464 := z.EncBinary()
					_ = yym464
					if false {
					} else {
						r.EncodeInt(int64(x.Replicas))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq462[0] {
					r.EncodeString(codecSelferC_UTF81234, string("replicas"))
					yym465 := z.EncBinary()
					_ = yym465
					if false {
					} else {
						r.EncodeInt(int64(x.Replicas))
					}
				}
			}
			if yyr462 || yy2arr462 {
				if yyq462[1] {
					yym467 := z.EncBinary()
					_ = yym467
					if false {
					} else {
						r.EncodeInt(int64(x.UpdatedReplicas))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq462[1] {
					r.EncodeString(codecSelferC_UTF81234, string("updatedReplicas"))
					yym468 := z.EncBinary()
					_ = yym468
					if false {
					} else {
						r.EncodeInt(int64(x.UpdatedReplicas))
					}
				}
			}
			if yysep462 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *DeploymentStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym469 := z.DecBinary()
	_ = yym469
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl470 := r.ReadMapStart()
			if yyl470 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl470, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl470 := r.ReadArrayStart()
			if yyl470 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl470, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DeploymentStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys471Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys471Slc
	var yyhl471 bool = l >= 0
	for yyj471 := 0; ; yyj471++ {
		if yyhl471 {
			if yyj471 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys471Slc = r.DecodeBytes(yys471Slc, true, true)
		yys471 := string(yys471Slc)
		switch yys471 {
		case "replicas":
			if r.TryDecodeAsNil() {
				x.Replicas = 0
			} else {
				x.Replicas = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "updatedReplicas":
			if r.TryDecodeAsNil() {
				x.UpdatedReplicas = 0
			} else {
				x.UpdatedReplicas = int(r.DecodeInt(codecSelferBitsize1234))
			}
		default:
			z.DecStructFieldNotFound(-1, yys471)
		} // end switch yys471
	} // end for yyj471
	if !yyhl471 {
		r.ReadEnd()
	}
}

func (x *DeploymentStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj474 int
	var yyb474 bool
	var yyhl474 bool = l >= 0
	yyj474++
	if yyhl474 {
		yyb474 = yyj474 > l
	} else {
		yyb474 = r.CheckBreak()
	}
	if yyb474 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Replicas = 0
	} else {
		x.Replicas = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj474++
	if yyhl474 {
		yyb474 = yyj474 > l
	} else {
		yyb474 = r.CheckBreak()
	}
	if yyb474 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.UpdatedReplicas = 0
	} else {
		x.UpdatedReplicas = int(r.DecodeInt(codecSelferBitsize1234))
	}
	for {
		yyj474++
		if yyhl474 {
			yyb474 = yyj474 > l
		} else {
			yyb474 = r.CheckBreak()
		}
		if yyb474 {
			break
		}
		z.DecStructFieldNotFound(yyj474-1, "")
	}
	r.ReadEnd()
}

func (x *DeploymentList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym477 := z.EncBinary()
		_ = yym477
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep478 := !z.EncBinary()
			yy2arr478 := z.EncBasicHandle().StructToArray
			var yyq478 [4]bool
			_, _, _ = yysep478, yyq478, yy2arr478
			const yyr478 bool = false
			yyq478[0] = x.Kind != ""
			yyq478[1] = x.APIVersion != ""
			yyq478[2] = true
			if yyr478 || yy2arr478 {
				r.EncodeArrayStart(4)
			} else {
				var yynn478 int = 1
				for _, b := range yyq478 {
					if b {
						yynn478++
					}
				}
				r.EncodeMapStart(yynn478)
			}
			if yyr478 || yy2arr478 {
				if yyq478[0] {
					yym480 := z.EncBinary()
					_ = yym480
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq478[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym481 := z.EncBinary()
					_ = yym481
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr478 || yy2arr478 {
				if yyq478[1] {
					yym483 := z.EncBinary()
					_ = yym483
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq478[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym484 := z.EncBinary()
					_ = yym484
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr478 || yy2arr478 {
				if yyq478[2] {
					yy486 := &x.ListMeta
					yym487 := z.EncBinary()
					_ = yym487
					if false {
					} else if z.HasExtensions() && z.EncExt(yy486) {
					} else {
						z.EncFallback(yy486)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq478[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy488 := &x.ListMeta
					yym489 := z.EncBinary()
					_ = yym489
					if false {
					} else if z.HasExtensions() && z.EncExt(yy488) {
					} else {
						z.EncFallback(yy488)
					}
				}
			}
			if yyr478 || yy2arr478 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym491 := z.EncBinary()
					_ = yym491
					if false {
					} else {
						h.encSliceDeployment(([]Deployment)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym492 := z.EncBinary()
					_ = yym492
					if false {
					} else {
						h.encSliceDeployment(([]Deployment)(x.Items), e)
					}
				}
			}
			if yysep478 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *DeploymentList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym493 := z.DecBinary()
	_ = yym493
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl494 := r.ReadMapStart()
			if yyl494 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl494, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl494 := r.ReadArrayStart()
			if yyl494 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl494, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DeploymentList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys495Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys495Slc
	var yyhl495 bool = l >= 0
	for yyj495 := 0; ; yyj495++ {
		if yyhl495 {
			if yyj495 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys495Slc = r.DecodeBytes(yys495Slc, true, true)
		yys495 := string(yys495Slc)
		switch yys495 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_unversioned.ListMeta{}
			} else {
				yyv498 := &x.ListMeta
				yym499 := z.DecBinary()
				_ = yym499
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv498) {
				} else {
					z.DecFallback(yyv498, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv500 := &x.Items
				yym501 := z.DecBinary()
				_ = yym501
				if false {
				} else {
					h.decSliceDeployment((*[]Deployment)(yyv500), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys495)
		} // end switch yys495
	} // end for yyj495
	if !yyhl495 {
		r.ReadEnd()
	}
}

func (x *DeploymentList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj502 int
	var yyb502 bool
	var yyhl502 bool = l >= 0
	yyj502++
	if yyhl502 {
		yyb502 = yyj502 > l
	} else {
		yyb502 = r.CheckBreak()
	}
	if yyb502 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj502++
	if yyhl502 {
		yyb502 = yyj502 > l
	} else {
		yyb502 = r.CheckBreak()
	}
	if yyb502 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj502++
	if yyhl502 {
		yyb502 = yyj502 > l
	} else {
		yyb502 = r.CheckBreak()
	}
	if yyb502 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_unversioned.ListMeta{}
	} else {
		yyv505 := &x.ListMeta
		yym506 := z.DecBinary()
		_ = yym506
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv505) {
		} else {
			z.DecFallback(yyv505, false)
		}
	}
	yyj502++
	if yyhl502 {
		yyb502 = yyj502 > l
	} else {
		yyb502 = r.CheckBreak()
	}
	if yyb502 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv507 := &x.Items
		yym508 := z.DecBinary()
		_ = yym508
		if false {
		} else {
			h.decSliceDeployment((*[]Deployment)(yyv507), d)
		}
	}
	for {
		yyj502++
		if yyhl502 {
			yyb502 = yyj502 > l
		} else {
			yyb502 = r.CheckBreak()
		}
		if yyb502 {
			break
		}
		z.DecStructFieldNotFound(yyj502-1, "")
	}
	r.ReadEnd()
}

func (x *DaemonSetSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym509 := z.EncBinary()
		_ = yym509
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep510 := !z.EncBinary()
			yy2arr510 := z.EncBasicHandle().StructToArray
			var yyq510 [2]bool
			_, _, _ = yysep510, yyq510, yy2arr510
			const yyr510 bool = false
			yyq510[0] = len(x.Selector) != 0
			yyq510[1] = x.Template != nil
			if yyr510 || yy2arr510 {
				r.EncodeArrayStart(2)
			} else {
				var yynn510 int = 0
				for _, b := range yyq510 {
					if b {
						yynn510++
					}
				}
				r.EncodeMapStart(yynn510)
			}
			if yyr510 || yy2arr510 {
				if yyq510[0] {
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym512 := z.EncBinary()
						_ = yym512
						if false {
						} else {
							z.F.EncMapStringStringV(x.Selector, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq510[0] {
					r.EncodeString(codecSelferC_UTF81234, string("selector"))
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym513 := z.EncBinary()
						_ = yym513
						if false {
						} else {
							z.F.EncMapStringStringV(x.Selector, false, e)
						}
					}
				}
			}
			if yyr510 || yy2arr510 {
				if yyq510[1] {
					if x.Template == nil {
						r.EncodeNil()
					} else {
						x.Template.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq510[1] {
					r.EncodeString(codecSelferC_UTF81234, string("template"))
					if x.Template == nil {
						r.EncodeNil()
					} else {
						x.Template.CodecEncodeSelf(e)
					}
				}
			}
			if yysep510 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *DaemonSetSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym515 := z.DecBinary()
	_ = yym515
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl516 := r.ReadMapStart()
			if yyl516 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl516, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl516 := r.ReadArrayStart()
			if yyl516 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl516, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DaemonSetSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys517Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys517Slc
	var yyhl517 bool = l >= 0
	for yyj517 := 0; ; yyj517++ {
		if yyhl517 {
			if yyj517 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys517Slc = r.DecodeBytes(yys517Slc, true, true)
		yys517 := string(yys517Slc)
		switch yys517 {
		case "selector":
			if r.TryDecodeAsNil() {
				x.Selector = nil
			} else {
				yyv518 := &x.Selector
				yym519 := z.DecBinary()
				_ = yym519
				if false {
				} else {
					z.F.DecMapStringStringX(yyv518, false, d)
				}
			}
		case "template":
			if r.TryDecodeAsNil() {
				if x.Template != nil {
					x.Template = nil
				}
			} else {
				if x.Template == nil {
					x.Template = new(pkg2_api.PodTemplateSpec)
				}
				x.Template.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys517)
		} // end switch yys517
	} // end for yyj517
	if !yyhl517 {
		r.ReadEnd()
	}
}

func (x *DaemonSetSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj521 int
	var yyb521 bool
	var yyhl521 bool = l >= 0
	yyj521++
	if yyhl521 {
		yyb521 = yyj521 > l
	} else {
		yyb521 = r.CheckBreak()
	}
	if yyb521 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Selector = nil
	} else {
		yyv522 := &x.Selector
		yym523 := z.DecBinary()
		_ = yym523
		if false {
		} else {
			z.F.DecMapStringStringX(yyv522, false, d)
		}
	}
	yyj521++
	if yyhl521 {
		yyb521 = yyj521 > l
	} else {
		yyb521 = r.CheckBreak()
	}
	if yyb521 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Template != nil {
			x.Template = nil
		}
	} else {
		if x.Template == nil {
			x.Template = new(pkg2_api.PodTemplateSpec)
		}
		x.Template.CodecDecodeSelf(d)
	}
	for {
		yyj521++
		if yyhl521 {
			yyb521 = yyj521 > l
		} else {
			yyb521 = r.CheckBreak()
		}
		if yyb521 {
			break
		}
		z.DecStructFieldNotFound(yyj521-1, "")
	}
	r.ReadEnd()
}

func (x *DaemonSetStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym525 := z.EncBinary()
		_ = yym525
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep526 := !z.EncBinary()
			yy2arr526 := z.EncBasicHandle().StructToArray
			var yyq526 [3]bool
			_, _, _ = yysep526, yyq526, yy2arr526
			const yyr526 bool = false
			if yyr526 || yy2arr526 {
				r.EncodeArrayStart(3)
			} else {
				var yynn526 int = 3
				for _, b := range yyq526 {
					if b {
						yynn526++
					}
				}
				r.EncodeMapStart(yynn526)
			}
			if yyr526 || yy2arr526 {
				yym528 := z.EncBinary()
				_ = yym528
				if false {
				} else {
					r.EncodeInt(int64(x.CurrentNumberScheduled))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("currentNumberScheduled"))
				yym529 := z.EncBinary()
				_ = yym529
				if false {
				} else {
					r.EncodeInt(int64(x.CurrentNumberScheduled))
				}
			}
			if yyr526 || yy2arr526 {
				yym531 := z.EncBinary()
				_ = yym531
				if false {
				} else {
					r.EncodeInt(int64(x.NumberMisscheduled))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("numberMisscheduled"))
				yym532 := z.EncBinary()
				_ = yym532
				if false {
				} else {
					r.EncodeInt(int64(x.NumberMisscheduled))
				}
			}
			if yyr526 || yy2arr526 {
				yym534 := z.EncBinary()
				_ = yym534
				if false {
				} else {
					r.EncodeInt(int64(x.DesiredNumberScheduled))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("desiredNumberScheduled"))
				yym535 := z.EncBinary()
				_ = yym535
				if false {
				} else {
					r.EncodeInt(int64(x.DesiredNumberScheduled))
				}
			}
			if yysep526 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *DaemonSetStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym536 := z.DecBinary()
	_ = yym536
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl537 := r.ReadMapStart()
			if yyl537 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl537, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl537 := r.ReadArrayStart()
			if yyl537 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl537, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DaemonSetStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys538Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys538Slc
	var yyhl538 bool = l >= 0
	for yyj538 := 0; ; yyj538++ {
		if yyhl538 {
			if yyj538 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys538Slc = r.DecodeBytes(yys538Slc, true, true)
		yys538 := string(yys538Slc)
		switch yys538 {
		case "currentNumberScheduled":
			if r.TryDecodeAsNil() {
				x.CurrentNumberScheduled = 0
			} else {
				x.CurrentNumberScheduled = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "numberMisscheduled":
			if r.TryDecodeAsNil() {
				x.NumberMisscheduled = 0
			} else {
				x.NumberMisscheduled = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "desiredNumberScheduled":
			if r.TryDecodeAsNil() {
				x.DesiredNumberScheduled = 0
			} else {
				x.DesiredNumberScheduled = int(r.DecodeInt(codecSelferBitsize1234))
			}
		default:
			z.DecStructFieldNotFound(-1, yys538)
		} // end switch yys538
	} // end for yyj538
	if !yyhl538 {
		r.ReadEnd()
	}
}

func (x *DaemonSetStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj542 int
	var yyb542 bool
	var yyhl542 bool = l >= 0
	yyj542++
	if yyhl542 {
		yyb542 = yyj542 > l
	} else {
		yyb542 = r.CheckBreak()
	}
	if yyb542 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.CurrentNumberScheduled = 0
	} else {
		x.CurrentNumberScheduled = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj542++
	if yyhl542 {
		yyb542 = yyj542 > l
	} else {
		yyb542 = r.CheckBreak()
	}
	if yyb542 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.NumberMisscheduled = 0
	} else {
		x.NumberMisscheduled = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj542++
	if yyhl542 {
		yyb542 = yyj542 > l
	} else {
		yyb542 = r.CheckBreak()
	}
	if yyb542 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.DesiredNumberScheduled = 0
	} else {
		x.DesiredNumberScheduled = int(r.DecodeInt(codecSelferBitsize1234))
	}
	for {
		yyj542++
		if yyhl542 {
			yyb542 = yyj542 > l
		} else {
			yyb542 = r.CheckBreak()
		}
		if yyb542 {
			break
		}
		z.DecStructFieldNotFound(yyj542-1, "")
	}
	r.ReadEnd()
}

func (x *DaemonSet) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym546 := z.EncBinary()
		_ = yym546
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep547 := !z.EncBinary()
			yy2arr547 := z.EncBasicHandle().StructToArray
			var yyq547 [5]bool
			_, _, _ = yysep547, yyq547, yy2arr547
			const yyr547 bool = false
			yyq547[0] = x.Kind != ""
			yyq547[1] = x.APIVersion != ""
			yyq547[2] = true
			yyq547[3] = true
			yyq547[4] = true
			if yyr547 || yy2arr547 {
				r.EncodeArrayStart(5)
			} else {
				var yynn547 int = 0
				for _, b := range yyq547 {
					if b {
						yynn547++
					}
				}
				r.EncodeMapStart(yynn547)
			}
			if yyr547 || yy2arr547 {
				if yyq547[0] {
					yym549 := z.EncBinary()
					_ = yym549
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq547[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym550 := z.EncBinary()
					_ = yym550
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr547 || yy2arr547 {
				if yyq547[1] {
					yym552 := z.EncBinary()
					_ = yym552
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq547[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym553 := z.EncBinary()
					_ = yym553
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr547 || yy2arr547 {
				if yyq547[2] {
					yy555 := &x.ObjectMeta
					yy555.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq547[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy556 := &x.ObjectMeta
					yy556.CodecEncodeSelf(e)
				}
			}
			if yyr547 || yy2arr547 {
				if yyq547[3] {
					yy558 := &x.Spec
					yy558.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq547[3] {
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					yy559 := &x.Spec
					yy559.CodecEncodeSelf(e)
				}
			}
			if yyr547 || yy2arr547 {
				if yyq547[4] {
					yy561 := &x.Status
					yy561.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq547[4] {
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					yy562 := &x.Status
					yy562.CodecEncodeSelf(e)
				}
			}
			if yysep547 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *DaemonSet) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym563 := z.DecBinary()
	_ = yym563
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl564 := r.ReadMapStart()
			if yyl564 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl564, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl564 := r.ReadArrayStart()
			if yyl564 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl564, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DaemonSet) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys565Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys565Slc
	var yyhl565 bool = l >= 0
	for yyj565 := 0; ; yyj565++ {
		if yyhl565 {
			if yyj565 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys565Slc = r.DecodeBytes(yys565Slc, true, true)
		yys565 := string(yys565Slc)
		switch yys565 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_api.ObjectMeta{}
			} else {
				yyv568 := &x.ObjectMeta
				yyv568.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = DaemonSetSpec{}
			} else {
				yyv569 := &x.Spec
				yyv569.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = DaemonSetStatus{}
			} else {
				yyv570 := &x.Status
				yyv570.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys565)
		} // end switch yys565
	} // end for yyj565
	if !yyhl565 {
		r.ReadEnd()
	}
}

func (x *DaemonSet) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj571 int
	var yyb571 bool
	var yyhl571 bool = l >= 0
	yyj571++
	if yyhl571 {
		yyb571 = yyj571 > l
	} else {
		yyb571 = r.CheckBreak()
	}
	if yyb571 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj571++
	if yyhl571 {
		yyb571 = yyj571 > l
	} else {
		yyb571 = r.CheckBreak()
	}
	if yyb571 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj571++
	if yyhl571 {
		yyb571 = yyj571 > l
	} else {
		yyb571 = r.CheckBreak()
	}
	if yyb571 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_api.ObjectMeta{}
	} else {
		yyv574 := &x.ObjectMeta
		yyv574.CodecDecodeSelf(d)
	}
	yyj571++
	if yyhl571 {
		yyb571 = yyj571 > l
	} else {
		yyb571 = r.CheckBreak()
	}
	if yyb571 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Spec = DaemonSetSpec{}
	} else {
		yyv575 := &x.Spec
		yyv575.CodecDecodeSelf(d)
	}
	yyj571++
	if yyhl571 {
		yyb571 = yyj571 > l
	} else {
		yyb571 = r.CheckBreak()
	}
	if yyb571 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = DaemonSetStatus{}
	} else {
		yyv576 := &x.Status
		yyv576.CodecDecodeSelf(d)
	}
	for {
		yyj571++
		if yyhl571 {
			yyb571 = yyj571 > l
		} else {
			yyb571 = r.CheckBreak()
		}
		if yyb571 {
			break
		}
		z.DecStructFieldNotFound(yyj571-1, "")
	}
	r.ReadEnd()
}

func (x *DaemonSetList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym577 := z.EncBinary()
		_ = yym577
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep578 := !z.EncBinary()
			yy2arr578 := z.EncBasicHandle().StructToArray
			var yyq578 [4]bool
			_, _, _ = yysep578, yyq578, yy2arr578
			const yyr578 bool = false
			yyq578[0] = x.Kind != ""
			yyq578[1] = x.APIVersion != ""
			yyq578[2] = true
			if yyr578 || yy2arr578 {
				r.EncodeArrayStart(4)
			} else {
				var yynn578 int = 1
				for _, b := range yyq578 {
					if b {
						yynn578++
					}
				}
				r.EncodeMapStart(yynn578)
			}
			if yyr578 || yy2arr578 {
				if yyq578[0] {
					yym580 := z.EncBinary()
					_ = yym580
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq578[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym581 := z.EncBinary()
					_ = yym581
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr578 || yy2arr578 {
				if yyq578[1] {
					yym583 := z.EncBinary()
					_ = yym583
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq578[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym584 := z.EncBinary()
					_ = yym584
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr578 || yy2arr578 {
				if yyq578[2] {
					yy586 := &x.ListMeta
					yym587 := z.EncBinary()
					_ = yym587
					if false {
					} else if z.HasExtensions() && z.EncExt(yy586) {
					} else {
						z.EncFallback(yy586)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq578[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy588 := &x.ListMeta
					yym589 := z.EncBinary()
					_ = yym589
					if false {
					} else if z.HasExtensions() && z.EncExt(yy588) {
					} else {
						z.EncFallback(yy588)
					}
				}
			}
			if yyr578 || yy2arr578 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym591 := z.EncBinary()
					_ = yym591
					if false {
					} else {
						h.encSliceDaemonSet(([]DaemonSet)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym592 := z.EncBinary()
					_ = yym592
					if false {
					} else {
						h.encSliceDaemonSet(([]DaemonSet)(x.Items), e)
					}
				}
			}
			if yysep578 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *DaemonSetList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym593 := z.DecBinary()
	_ = yym593
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl594 := r.ReadMapStart()
			if yyl594 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl594, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl594 := r.ReadArrayStart()
			if yyl594 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl594, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DaemonSetList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys595Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys595Slc
	var yyhl595 bool = l >= 0
	for yyj595 := 0; ; yyj595++ {
		if yyhl595 {
			if yyj595 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys595Slc = r.DecodeBytes(yys595Slc, true, true)
		yys595 := string(yys595Slc)
		switch yys595 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_unversioned.ListMeta{}
			} else {
				yyv598 := &x.ListMeta
				yym599 := z.DecBinary()
				_ = yym599
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv598) {
				} else {
					z.DecFallback(yyv598, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv600 := &x.Items
				yym601 := z.DecBinary()
				_ = yym601
				if false {
				} else {
					h.decSliceDaemonSet((*[]DaemonSet)(yyv600), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys595)
		} // end switch yys595
	} // end for yyj595
	if !yyhl595 {
		r.ReadEnd()
	}
}

func (x *DaemonSetList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj602 int
	var yyb602 bool
	var yyhl602 bool = l >= 0
	yyj602++
	if yyhl602 {
		yyb602 = yyj602 > l
	} else {
		yyb602 = r.CheckBreak()
	}
	if yyb602 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj602++
	if yyhl602 {
		yyb602 = yyj602 > l
	} else {
		yyb602 = r.CheckBreak()
	}
	if yyb602 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj602++
	if yyhl602 {
		yyb602 = yyj602 > l
	} else {
		yyb602 = r.CheckBreak()
	}
	if yyb602 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_unversioned.ListMeta{}
	} else {
		yyv605 := &x.ListMeta
		yym606 := z.DecBinary()
		_ = yym606
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv605) {
		} else {
			z.DecFallback(yyv605, false)
		}
	}
	yyj602++
	if yyhl602 {
		yyb602 = yyj602 > l
	} else {
		yyb602 = r.CheckBreak()
	}
	if yyb602 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv607 := &x.Items
		yym608 := z.DecBinary()
		_ = yym608
		if false {
		} else {
			h.decSliceDaemonSet((*[]DaemonSet)(yyv607), d)
		}
	}
	for {
		yyj602++
		if yyhl602 {
			yyb602 = yyj602 > l
		} else {
			yyb602 = r.CheckBreak()
		}
		if yyb602 {
			break
		}
		z.DecStructFieldNotFound(yyj602-1, "")
	}
	r.ReadEnd()
}

func (x *ThirdPartyResourceDataList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym609 := z.EncBinary()
		_ = yym609
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep610 := !z.EncBinary()
			yy2arr610 := z.EncBasicHandle().StructToArray
			var yyq610 [4]bool
			_, _, _ = yysep610, yyq610, yy2arr610
			const yyr610 bool = false
			yyq610[0] = x.Kind != ""
			yyq610[1] = x.APIVersion != ""
			yyq610[2] = true
			if yyr610 || yy2arr610 {
				r.EncodeArrayStart(4)
			} else {
				var yynn610 int = 1
				for _, b := range yyq610 {
					if b {
						yynn610++
					}
				}
				r.EncodeMapStart(yynn610)
			}
			if yyr610 || yy2arr610 {
				if yyq610[0] {
					yym612 := z.EncBinary()
					_ = yym612
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq610[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym613 := z.EncBinary()
					_ = yym613
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr610 || yy2arr610 {
				if yyq610[1] {
					yym615 := z.EncBinary()
					_ = yym615
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq610[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym616 := z.EncBinary()
					_ = yym616
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr610 || yy2arr610 {
				if yyq610[2] {
					yy618 := &x.ListMeta
					yym619 := z.EncBinary()
					_ = yym619
					if false {
					} else if z.HasExtensions() && z.EncExt(yy618) {
					} else {
						z.EncFallback(yy618)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq610[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy620 := &x.ListMeta
					yym621 := z.EncBinary()
					_ = yym621
					if false {
					} else if z.HasExtensions() && z.EncExt(yy620) {
					} else {
						z.EncFallback(yy620)
					}
				}
			}
			if yyr610 || yy2arr610 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym623 := z.EncBinary()
					_ = yym623
					if false {
					} else {
						h.encSliceThirdPartyResourceData(([]ThirdPartyResourceData)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym624 := z.EncBinary()
					_ = yym624
					if false {
					} else {
						h.encSliceThirdPartyResourceData(([]ThirdPartyResourceData)(x.Items), e)
					}
				}
			}
			if yysep610 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ThirdPartyResourceDataList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym625 := z.DecBinary()
	_ = yym625
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl626 := r.ReadMapStart()
			if yyl626 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl626, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl626 := r.ReadArrayStart()
			if yyl626 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl626, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ThirdPartyResourceDataList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys627Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys627Slc
	var yyhl627 bool = l >= 0
	for yyj627 := 0; ; yyj627++ {
		if yyhl627 {
			if yyj627 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys627Slc = r.DecodeBytes(yys627Slc, true, true)
		yys627 := string(yys627Slc)
		switch yys627 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_unversioned.ListMeta{}
			} else {
				yyv630 := &x.ListMeta
				yym631 := z.DecBinary()
				_ = yym631
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv630) {
				} else {
					z.DecFallback(yyv630, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv632 := &x.Items
				yym633 := z.DecBinary()
				_ = yym633
				if false {
				} else {
					h.decSliceThirdPartyResourceData((*[]ThirdPartyResourceData)(yyv632), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys627)
		} // end switch yys627
	} // end for yyj627
	if !yyhl627 {
		r.ReadEnd()
	}
}

func (x *ThirdPartyResourceDataList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj634 int
	var yyb634 bool
	var yyhl634 bool = l >= 0
	yyj634++
	if yyhl634 {
		yyb634 = yyj634 > l
	} else {
		yyb634 = r.CheckBreak()
	}
	if yyb634 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj634++
	if yyhl634 {
		yyb634 = yyj634 > l
	} else {
		yyb634 = r.CheckBreak()
	}
	if yyb634 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj634++
	if yyhl634 {
		yyb634 = yyj634 > l
	} else {
		yyb634 = r.CheckBreak()
	}
	if yyb634 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_unversioned.ListMeta{}
	} else {
		yyv637 := &x.ListMeta
		yym638 := z.DecBinary()
		_ = yym638
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv637) {
		} else {
			z.DecFallback(yyv637, false)
		}
	}
	yyj634++
	if yyhl634 {
		yyb634 = yyj634 > l
	} else {
		yyb634 = r.CheckBreak()
	}
	if yyb634 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv639 := &x.Items
		yym640 := z.DecBinary()
		_ = yym640
		if false {
		} else {
			h.decSliceThirdPartyResourceData((*[]ThirdPartyResourceData)(yyv639), d)
		}
	}
	for {
		yyj634++
		if yyhl634 {
			yyb634 = yyj634 > l
		} else {
			yyb634 = r.CheckBreak()
		}
		if yyb634 {
			break
		}
		z.DecStructFieldNotFound(yyj634-1, "")
	}
	r.ReadEnd()
}

func (x *Job) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym641 := z.EncBinary()
		_ = yym641
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep642 := !z.EncBinary()
			yy2arr642 := z.EncBasicHandle().StructToArray
			var yyq642 [5]bool
			_, _, _ = yysep642, yyq642, yy2arr642
			const yyr642 bool = false
			yyq642[0] = x.Kind != ""
			yyq642[1] = x.APIVersion != ""
			yyq642[2] = true
			yyq642[3] = true
			yyq642[4] = true
			if yyr642 || yy2arr642 {
				r.EncodeArrayStart(5)
			} else {
				var yynn642 int = 0
				for _, b := range yyq642 {
					if b {
						yynn642++
					}
				}
				r.EncodeMapStart(yynn642)
			}
			if yyr642 || yy2arr642 {
				if yyq642[0] {
					yym644 := z.EncBinary()
					_ = yym644
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq642[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym645 := z.EncBinary()
					_ = yym645
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr642 || yy2arr642 {
				if yyq642[1] {
					yym647 := z.EncBinary()
					_ = yym647
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq642[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym648 := z.EncBinary()
					_ = yym648
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr642 || yy2arr642 {
				if yyq642[2] {
					yy650 := &x.ObjectMeta
					yy650.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq642[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy651 := &x.ObjectMeta
					yy651.CodecEncodeSelf(e)
				}
			}
			if yyr642 || yy2arr642 {
				if yyq642[3] {
					yy653 := &x.Spec
					yy653.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq642[3] {
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					yy654 := &x.Spec
					yy654.CodecEncodeSelf(e)
				}
			}
			if yyr642 || yy2arr642 {
				if yyq642[4] {
					yy656 := &x.Status
					yy656.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq642[4] {
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					yy657 := &x.Status
					yy657.CodecEncodeSelf(e)
				}
			}
			if yysep642 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Job) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym658 := z.DecBinary()
	_ = yym658
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl659 := r.ReadMapStart()
			if yyl659 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl659, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl659 := r.ReadArrayStart()
			if yyl659 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl659, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Job) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys660Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys660Slc
	var yyhl660 bool = l >= 0
	for yyj660 := 0; ; yyj660++ {
		if yyhl660 {
			if yyj660 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys660Slc = r.DecodeBytes(yys660Slc, true, true)
		yys660 := string(yys660Slc)
		switch yys660 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_api.ObjectMeta{}
			} else {
				yyv663 := &x.ObjectMeta
				yyv663.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = JobSpec{}
			} else {
				yyv664 := &x.Spec
				yyv664.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = JobStatus{}
			} else {
				yyv665 := &x.Status
				yyv665.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys660)
		} // end switch yys660
	} // end for yyj660
	if !yyhl660 {
		r.ReadEnd()
	}
}

func (x *Job) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj666 int
	var yyb666 bool
	var yyhl666 bool = l >= 0
	yyj666++
	if yyhl666 {
		yyb666 = yyj666 > l
	} else {
		yyb666 = r.CheckBreak()
	}
	if yyb666 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj666++
	if yyhl666 {
		yyb666 = yyj666 > l
	} else {
		yyb666 = r.CheckBreak()
	}
	if yyb666 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj666++
	if yyhl666 {
		yyb666 = yyj666 > l
	} else {
		yyb666 = r.CheckBreak()
	}
	if yyb666 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_api.ObjectMeta{}
	} else {
		yyv669 := &x.ObjectMeta
		yyv669.CodecDecodeSelf(d)
	}
	yyj666++
	if yyhl666 {
		yyb666 = yyj666 > l
	} else {
		yyb666 = r.CheckBreak()
	}
	if yyb666 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Spec = JobSpec{}
	} else {
		yyv670 := &x.Spec
		yyv670.CodecDecodeSelf(d)
	}
	yyj666++
	if yyhl666 {
		yyb666 = yyj666 > l
	} else {
		yyb666 = r.CheckBreak()
	}
	if yyb666 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = JobStatus{}
	} else {
		yyv671 := &x.Status
		yyv671.CodecDecodeSelf(d)
	}
	for {
		yyj666++
		if yyhl666 {
			yyb666 = yyj666 > l
		} else {
			yyb666 = r.CheckBreak()
		}
		if yyb666 {
			break
		}
		z.DecStructFieldNotFound(yyj666-1, "")
	}
	r.ReadEnd()
}

func (x *JobList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym672 := z.EncBinary()
		_ = yym672
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep673 := !z.EncBinary()
			yy2arr673 := z.EncBasicHandle().StructToArray
			var yyq673 [4]bool
			_, _, _ = yysep673, yyq673, yy2arr673
			const yyr673 bool = false
			yyq673[0] = x.Kind != ""
			yyq673[1] = x.APIVersion != ""
			yyq673[2] = true
			if yyr673 || yy2arr673 {
				r.EncodeArrayStart(4)
			} else {
				var yynn673 int = 1
				for _, b := range yyq673 {
					if b {
						yynn673++
					}
				}
				r.EncodeMapStart(yynn673)
			}
			if yyr673 || yy2arr673 {
				if yyq673[0] {
					yym675 := z.EncBinary()
					_ = yym675
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq673[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym676 := z.EncBinary()
					_ = yym676
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr673 || yy2arr673 {
				if yyq673[1] {
					yym678 := z.EncBinary()
					_ = yym678
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq673[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym679 := z.EncBinary()
					_ = yym679
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr673 || yy2arr673 {
				if yyq673[2] {
					yy681 := &x.ListMeta
					yym682 := z.EncBinary()
					_ = yym682
					if false {
					} else if z.HasExtensions() && z.EncExt(yy681) {
					} else {
						z.EncFallback(yy681)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq673[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy683 := &x.ListMeta
					yym684 := z.EncBinary()
					_ = yym684
					if false {
					} else if z.HasExtensions() && z.EncExt(yy683) {
					} else {
						z.EncFallback(yy683)
					}
				}
			}
			if yyr673 || yy2arr673 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym686 := z.EncBinary()
					_ = yym686
					if false {
					} else {
						h.encSliceJob(([]Job)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym687 := z.EncBinary()
					_ = yym687
					if false {
					} else {
						h.encSliceJob(([]Job)(x.Items), e)
					}
				}
			}
			if yysep673 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *JobList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym688 := z.DecBinary()
	_ = yym688
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl689 := r.ReadMapStart()
			if yyl689 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl689, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl689 := r.ReadArrayStart()
			if yyl689 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl689, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *JobList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys690Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys690Slc
	var yyhl690 bool = l >= 0
	for yyj690 := 0; ; yyj690++ {
		if yyhl690 {
			if yyj690 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys690Slc = r.DecodeBytes(yys690Slc, true, true)
		yys690 := string(yys690Slc)
		switch yys690 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_unversioned.ListMeta{}
			} else {
				yyv693 := &x.ListMeta
				yym694 := z.DecBinary()
				_ = yym694
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv693) {
				} else {
					z.DecFallback(yyv693, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv695 := &x.Items
				yym696 := z.DecBinary()
				_ = yym696
				if false {
				} else {
					h.decSliceJob((*[]Job)(yyv695), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys690)
		} // end switch yys690
	} // end for yyj690
	if !yyhl690 {
		r.ReadEnd()
	}
}

func (x *JobList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj697 int
	var yyb697 bool
	var yyhl697 bool = l >= 0
	yyj697++
	if yyhl697 {
		yyb697 = yyj697 > l
	} else {
		yyb697 = r.CheckBreak()
	}
	if yyb697 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj697++
	if yyhl697 {
		yyb697 = yyj697 > l
	} else {
		yyb697 = r.CheckBreak()
	}
	if yyb697 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj697++
	if yyhl697 {
		yyb697 = yyj697 > l
	} else {
		yyb697 = r.CheckBreak()
	}
	if yyb697 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_unversioned.ListMeta{}
	} else {
		yyv700 := &x.ListMeta
		yym701 := z.DecBinary()
		_ = yym701
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv700) {
		} else {
			z.DecFallback(yyv700, false)
		}
	}
	yyj697++
	if yyhl697 {
		yyb697 = yyj697 > l
	} else {
		yyb697 = r.CheckBreak()
	}
	if yyb697 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv702 := &x.Items
		yym703 := z.DecBinary()
		_ = yym703
		if false {
		} else {
			h.decSliceJob((*[]Job)(yyv702), d)
		}
	}
	for {
		yyj697++
		if yyhl697 {
			yyb697 = yyj697 > l
		} else {
			yyb697 = r.CheckBreak()
		}
		if yyb697 {
			break
		}
		z.DecStructFieldNotFound(yyj697-1, "")
	}
	r.ReadEnd()
}

func (x *JobSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym704 := z.EncBinary()
		_ = yym704
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep705 := !z.EncBinary()
			yy2arr705 := z.EncBasicHandle().StructToArray
			var yyq705 [4]bool
			_, _, _ = yysep705, yyq705, yy2arr705
			const yyr705 bool = false
			yyq705[0] = x.Parallelism != nil
			yyq705[1] = x.Completions != nil
			yyq705[2] = x.Selector != nil
			if yyr705 || yy2arr705 {
				r.EncodeArrayStart(4)
			} else {
				var yynn705 int = 1
				for _, b := range yyq705 {
					if b {
						yynn705++
					}
				}
				r.EncodeMapStart(yynn705)
			}
			if yyr705 || yy2arr705 {
				if yyq705[0] {
					if x.Parallelism == nil {
						r.EncodeNil()
					} else {
						yy707 := *x.Parallelism
						yym708 := z.EncBinary()
						_ = yym708
						if false {
						} else {
							r.EncodeInt(int64(yy707))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq705[0] {
					r.EncodeString(codecSelferC_UTF81234, string("parallelism"))
					if x.Parallelism == nil {
						r.EncodeNil()
					} else {
						yy709 := *x.Parallelism
						yym710 := z.EncBinary()
						_ = yym710
						if false {
						} else {
							r.EncodeInt(int64(yy709))
						}
					}
				}
			}
			if yyr705 || yy2arr705 {
				if yyq705[1] {
					if x.Completions == nil {
						r.EncodeNil()
					} else {
						yy712 := *x.Completions
						yym713 := z.EncBinary()
						_ = yym713
						if false {
						} else {
							r.EncodeInt(int64(yy712))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq705[1] {
					r.EncodeString(codecSelferC_UTF81234, string("completions"))
					if x.Completions == nil {
						r.EncodeNil()
					} else {
						yy714 := *x.Completions
						yym715 := z.EncBinary()
						_ = yym715
						if false {
						} else {
							r.EncodeInt(int64(yy714))
						}
					}
				}
			}
			if yyr705 || yy2arr705 {
				if yyq705[2] {
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						x.Selector.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq705[2] {
					r.EncodeString(codecSelferC_UTF81234, string("selector"))
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						x.Selector.CodecEncodeSelf(e)
					}
				}
			}
			if yyr705 || yy2arr705 {
				yy718 := &x.Template
				yy718.CodecEncodeSelf(e)
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("template"))
				yy719 := &x.Template
				yy719.CodecEncodeSelf(e)
			}
			if yysep705 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *JobSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym720 := z.DecBinary()
	_ = yym720
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl721 := r.ReadMapStart()
			if yyl721 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl721, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl721 := r.ReadArrayStart()
			if yyl721 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl721, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *JobSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys722Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys722Slc
	var yyhl722 bool = l >= 0
	for yyj722 := 0; ; yyj722++ {
		if yyhl722 {
			if yyj722 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys722Slc = r.DecodeBytes(yys722Slc, true, true)
		yys722 := string(yys722Slc)
		switch yys722 {
		case "parallelism":
			if r.TryDecodeAsNil() {
				if x.Parallelism != nil {
					x.Parallelism = nil
				}
			} else {
				if x.Parallelism == nil {
					x.Parallelism = new(int)
				}
				yym724 := z.DecBinary()
				_ = yym724
				if false {
				} else {
					*((*int)(x.Parallelism)) = int(r.DecodeInt(codecSelferBitsize1234))
				}
			}
		case "completions":
			if r.TryDecodeAsNil() {
				if x.Completions != nil {
					x.Completions = nil
				}
			} else {
				if x.Completions == nil {
					x.Completions = new(int)
				}
				yym726 := z.DecBinary()
				_ = yym726
				if false {
				} else {
					*((*int)(x.Completions)) = int(r.DecodeInt(codecSelferBitsize1234))
				}
			}
		case "selector":
			if r.TryDecodeAsNil() {
				if x.Selector != nil {
					x.Selector = nil
				}
			} else {
				if x.Selector == nil {
					x.Selector = new(PodSelector)
				}
				x.Selector.CodecDecodeSelf(d)
			}
		case "template":
			if r.TryDecodeAsNil() {
				x.Template = pkg2_api.PodTemplateSpec{}
			} else {
				yyv728 := &x.Template
				yyv728.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys722)
		} // end switch yys722
	} // end for yyj722
	if !yyhl722 {
		r.ReadEnd()
	}
}

func (x *JobSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj729 int
	var yyb729 bool
	var yyhl729 bool = l >= 0
	yyj729++
	if yyhl729 {
		yyb729 = yyj729 > l
	} else {
		yyb729 = r.CheckBreak()
	}
	if yyb729 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Parallelism != nil {
			x.Parallelism = nil
		}
	} else {
		if x.Parallelism == nil {
			x.Parallelism = new(int)
		}
		yym731 := z.DecBinary()
		_ = yym731
		if false {
		} else {
			*((*int)(x.Parallelism)) = int(r.DecodeInt(codecSelferBitsize1234))
		}
	}
	yyj729++
	if yyhl729 {
		yyb729 = yyj729 > l
	} else {
		yyb729 = r.CheckBreak()
	}
	if yyb729 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Completions != nil {
			x.Completions = nil
		}
	} else {
		if x.Completions == nil {
			x.Completions = new(int)
		}
		yym733 := z.DecBinary()
		_ = yym733
		if false {
		} else {
			*((*int)(x.Completions)) = int(r.DecodeInt(codecSelferBitsize1234))
		}
	}
	yyj729++
	if yyhl729 {
		yyb729 = yyj729 > l
	} else {
		yyb729 = r.CheckBreak()
	}
	if yyb729 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Selector != nil {
			x.Selector = nil
		}
	} else {
		if x.Selector == nil {
			x.Selector = new(PodSelector)
		}
		x.Selector.CodecDecodeSelf(d)
	}
	yyj729++
	if yyhl729 {
		yyb729 = yyj729 > l
	} else {
		yyb729 = r.CheckBreak()
	}
	if yyb729 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Template = pkg2_api.PodTemplateSpec{}
	} else {
		yyv735 := &x.Template
		yyv735.CodecDecodeSelf(d)
	}
	for {
		yyj729++
		if yyhl729 {
			yyb729 = yyj729 > l
		} else {
			yyb729 = r.CheckBreak()
		}
		if yyb729 {
			break
		}
		z.DecStructFieldNotFound(yyj729-1, "")
	}
	r.ReadEnd()
}

func (x *JobStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym736 := z.EncBinary()
		_ = yym736
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep737 := !z.EncBinary()
			yy2arr737 := z.EncBasicHandle().StructToArray
			var yyq737 [6]bool
			_, _, _ = yysep737, yyq737, yy2arr737
			const yyr737 bool = false
			yyq737[0] = len(x.Conditions) != 0
			yyq737[1] = x.StartTime != nil
			yyq737[2] = x.CompletionTime != nil
			yyq737[3] = x.Active != 0
			yyq737[4] = x.Succeeded != 0
			yyq737[5] = x.Failed != 0
			if yyr737 || yy2arr737 {
				r.EncodeArrayStart(6)
			} else {
				var yynn737 int = 0
				for _, b := range yyq737 {
					if b {
						yynn737++
					}
				}
				r.EncodeMapStart(yynn737)
			}
			if yyr737 || yy2arr737 {
				if yyq737[0] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym739 := z.EncBinary()
						_ = yym739
						if false {
						} else {
							h.encSliceJobCondition(([]JobCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq737[0] {
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym740 := z.EncBinary()
						_ = yym740
						if false {
						} else {
							h.encSliceJobCondition(([]JobCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yyr737 || yy2arr737 {
				if yyq737[1] {
					if x.StartTime == nil {
						r.EncodeNil()
					} else {
						yym742 := z.EncBinary()
						_ = yym742
						if false {
						} else if z.HasExtensions() && z.EncExt(x.StartTime) {
						} else if yym742 {
							z.EncBinaryMarshal(x.StartTime)
						} else if !yym742 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.StartTime)
						} else {
							z.EncFallback(x.StartTime)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq737[1] {
					r.EncodeString(codecSelferC_UTF81234, string("startTime"))
					if x.StartTime == nil {
						r.EncodeNil()
					} else {
						yym743 := z.EncBinary()
						_ = yym743
						if false {
						} else if z.HasExtensions() && z.EncExt(x.StartTime) {
						} else if yym743 {
							z.EncBinaryMarshal(x.StartTime)
						} else if !yym743 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.StartTime)
						} else {
							z.EncFallback(x.StartTime)
						}
					}
				}
			}
			if yyr737 || yy2arr737 {
				if yyq737[2] {
					if x.CompletionTime == nil {
						r.EncodeNil()
					} else {
						yym745 := z.EncBinary()
						_ = yym745
						if false {
						} else if z.HasExtensions() && z.EncExt(x.CompletionTime) {
						} else if yym745 {
							z.EncBinaryMarshal(x.CompletionTime)
						} else if !yym745 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.CompletionTime)
						} else {
							z.EncFallback(x.CompletionTime)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq737[2] {
					r.EncodeString(codecSelferC_UTF81234, string("completionTime"))
					if x.CompletionTime == nil {
						r.EncodeNil()
					} else {
						yym746 := z.EncBinary()
						_ = yym746
						if false {
						} else if z.HasExtensions() && z.EncExt(x.CompletionTime) {
						} else if yym746 {
							z.EncBinaryMarshal(x.CompletionTime)
						} else if !yym746 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.CompletionTime)
						} else {
							z.EncFallback(x.CompletionTime)
						}
					}
				}
			}
			if yyr737 || yy2arr737 {
				if yyq737[3] {
					yym748 := z.EncBinary()
					_ = yym748
					if false {
					} else {
						r.EncodeInt(int64(x.Active))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq737[3] {
					r.EncodeString(codecSelferC_UTF81234, string("active"))
					yym749 := z.EncBinary()
					_ = yym749
					if false {
					} else {
						r.EncodeInt(int64(x.Active))
					}
				}
			}
			if yyr737 || yy2arr737 {
				if yyq737[4] {
					yym751 := z.EncBinary()
					_ = yym751
					if false {
					} else {
						r.EncodeInt(int64(x.Succeeded))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq737[4] {
					r.EncodeString(codecSelferC_UTF81234, string("succeeded"))
					yym752 := z.EncBinary()
					_ = yym752
					if false {
					} else {
						r.EncodeInt(int64(x.Succeeded))
					}
				}
			}
			if yyr737 || yy2arr737 {
				if yyq737[5] {
					yym754 := z.EncBinary()
					_ = yym754
					if false {
					} else {
						r.EncodeInt(int64(x.Failed))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq737[5] {
					r.EncodeString(codecSelferC_UTF81234, string("failed"))
					yym755 := z.EncBinary()
					_ = yym755
					if false {
					} else {
						r.EncodeInt(int64(x.Failed))
					}
				}
			}
			if yysep737 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *JobStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym756 := z.DecBinary()
	_ = yym756
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl757 := r.ReadMapStart()
			if yyl757 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl757, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl757 := r.ReadArrayStart()
			if yyl757 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl757, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *JobStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys758Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys758Slc
	var yyhl758 bool = l >= 0
	for yyj758 := 0; ; yyj758++ {
		if yyhl758 {
			if yyj758 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys758Slc = r.DecodeBytes(yys758Slc, true, true)
		yys758 := string(yys758Slc)
		switch yys758 {
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv759 := &x.Conditions
				yym760 := z.DecBinary()
				_ = yym760
				if false {
				} else {
					h.decSliceJobCondition((*[]JobCondition)(yyv759), d)
				}
			}
		case "startTime":
			if r.TryDecodeAsNil() {
				if x.StartTime != nil {
					x.StartTime = nil
				}
			} else {
				if x.StartTime == nil {
					x.StartTime = new(pkg1_unversioned.Time)
				}
				yym762 := z.DecBinary()
				_ = yym762
				if false {
				} else if z.HasExtensions() && z.DecExt(x.StartTime) {
				} else if yym762 {
					z.DecBinaryUnmarshal(x.StartTime)
				} else if !yym762 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.StartTime)
				} else {
					z.DecFallback(x.StartTime, false)
				}
			}
		case "completionTime":
			if r.TryDecodeAsNil() {
				if x.CompletionTime != nil {
					x.CompletionTime = nil
				}
			} else {
				if x.CompletionTime == nil {
					x.CompletionTime = new(pkg1_unversioned.Time)
				}
				yym764 := z.DecBinary()
				_ = yym764
				if false {
				} else if z.HasExtensions() && z.DecExt(x.CompletionTime) {
				} else if yym764 {
					z.DecBinaryUnmarshal(x.CompletionTime)
				} else if !yym764 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.CompletionTime)
				} else {
					z.DecFallback(x.CompletionTime, false)
				}
			}
		case "active":
			if r.TryDecodeAsNil() {
				x.Active = 0
			} else {
				x.Active = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "succeeded":
			if r.TryDecodeAsNil() {
				x.Succeeded = 0
			} else {
				x.Succeeded = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "failed":
			if r.TryDecodeAsNil() {
				x.Failed = 0
			} else {
				x.Failed = int(r.DecodeInt(codecSelferBitsize1234))
			}
		default:
			z.DecStructFieldNotFound(-1, yys758)
		} // end switch yys758
	} // end for yyj758
	if !yyhl758 {
		r.ReadEnd()
	}
}

func (x *JobStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj768 int
	var yyb768 bool
	var yyhl768 bool = l >= 0
	yyj768++
	if yyhl768 {
		yyb768 = yyj768 > l
	} else {
		yyb768 = r.CheckBreak()
	}
	if yyb768 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv769 := &x.Conditions
		yym770 := z.DecBinary()
		_ = yym770
		if false {
		} else {
			h.decSliceJobCondition((*[]JobCondition)(yyv769), d)
		}
	}
	yyj768++
	if yyhl768 {
		yyb768 = yyj768 > l
	} else {
		yyb768 = r.CheckBreak()
	}
	if yyb768 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.StartTime != nil {
			x.StartTime = nil
		}
	} else {
		if x.StartTime == nil {
			x.StartTime = new(pkg1_unversioned.Time)
		}
		yym772 := z.DecBinary()
		_ = yym772
		if false {
		} else if z.HasExtensions() && z.DecExt(x.StartTime) {
		} else if yym772 {
			z.DecBinaryUnmarshal(x.StartTime)
		} else if !yym772 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.StartTime)
		} else {
			z.DecFallback(x.StartTime, false)
		}
	}
	yyj768++
	if yyhl768 {
		yyb768 = yyj768 > l
	} else {
		yyb768 = r.CheckBreak()
	}
	if yyb768 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.CompletionTime != nil {
			x.CompletionTime = nil
		}
	} else {
		if x.CompletionTime == nil {
			x.CompletionTime = new(pkg1_unversioned.Time)
		}
		yym774 := z.DecBinary()
		_ = yym774
		if false {
		} else if z.HasExtensions() && z.DecExt(x.CompletionTime) {
		} else if yym774 {
			z.DecBinaryUnmarshal(x.CompletionTime)
		} else if !yym774 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.CompletionTime)
		} else {
			z.DecFallback(x.CompletionTime, false)
		}
	}
	yyj768++
	if yyhl768 {
		yyb768 = yyj768 > l
	} else {
		yyb768 = r.CheckBreak()
	}
	if yyb768 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Active = 0
	} else {
		x.Active = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj768++
	if yyhl768 {
		yyb768 = yyj768 > l
	} else {
		yyb768 = r.CheckBreak()
	}
	if yyb768 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Succeeded = 0
	} else {
		x.Succeeded = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj768++
	if yyhl768 {
		yyb768 = yyj768 > l
	} else {
		yyb768 = r.CheckBreak()
	}
	if yyb768 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Failed = 0
	} else {
		x.Failed = int(r.DecodeInt(codecSelferBitsize1234))
	}
	for {
		yyj768++
		if yyhl768 {
			yyb768 = yyj768 > l
		} else {
			yyb768 = r.CheckBreak()
		}
		if yyb768 {
			break
		}
		z.DecStructFieldNotFound(yyj768-1, "")
	}
	r.ReadEnd()
}

func (x JobConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym778 := z.EncBinary()
	_ = yym778
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *JobConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym779 := z.DecBinary()
	_ = yym779
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *JobCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym780 := z.EncBinary()
		_ = yym780
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep781 := !z.EncBinary()
			yy2arr781 := z.EncBasicHandle().StructToArray
			var yyq781 [6]bool
			_, _, _ = yysep781, yyq781, yy2arr781
			const yyr781 bool = false
			yyq781[2] = true
			yyq781[3] = true
			yyq781[4] = x.Reason != ""
			yyq781[5] = x.Message != ""
			if yyr781 || yy2arr781 {
				r.EncodeArrayStart(6)
			} else {
				var yynn781 int = 2
				for _, b := range yyq781 {
					if b {
						yynn781++
					}
				}
				r.EncodeMapStart(yynn781)
			}
			if yyr781 || yy2arr781 {
				x.Type.CodecEncodeSelf(e)
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				x.Type.CodecEncodeSelf(e)
			}
			if yyr781 || yy2arr781 {
				yym784 := z.EncBinary()
				_ = yym784
				if false {
				} else if z.HasExtensions() && z.EncExt(x.Status) {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Status))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				yym785 := z.EncBinary()
				_ = yym785
				if false {
				} else if z.HasExtensions() && z.EncExt(x.Status) {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Status))
				}
			}
			if yyr781 || yy2arr781 {
				if yyq781[2] {
					yy787 := &x.LastProbeTime
					yym788 := z.EncBinary()
					_ = yym788
					if false {
					} else if z.HasExtensions() && z.EncExt(yy787) {
					} else if yym788 {
						z.EncBinaryMarshal(yy787)
					} else if !yym788 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy787)
					} else {
						z.EncFallback(yy787)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq781[2] {
					r.EncodeString(codecSelferC_UTF81234, string("lastProbeTime"))
					yy789 := &x.LastProbeTime
					yym790 := z.EncBinary()
					_ = yym790
					if false {
					} else if z.HasExtensions() && z.EncExt(yy789) {
					} else if yym790 {
						z.EncBinaryMarshal(yy789)
					} else if !yym790 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy789)
					} else {
						z.EncFallback(yy789)
					}
				}
			}
			if yyr781 || yy2arr781 {
				if yyq781[3] {
					yy792 := &x.LastTransitionTime
					yym793 := z.EncBinary()
					_ = yym793
					if false {
					} else if z.HasExtensions() && z.EncExt(yy792) {
					} else if yym793 {
						z.EncBinaryMarshal(yy792)
					} else if !yym793 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy792)
					} else {
						z.EncFallback(yy792)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq781[3] {
					r.EncodeString(codecSelferC_UTF81234, string("lastTransitionTime"))
					yy794 := &x.LastTransitionTime
					yym795 := z.EncBinary()
					_ = yym795
					if false {
					} else if z.HasExtensions() && z.EncExt(yy794) {
					} else if yym795 {
						z.EncBinaryMarshal(yy794)
					} else if !yym795 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy794)
					} else {
						z.EncFallback(yy794)
					}
				}
			}
			if yyr781 || yy2arr781 {
				if yyq781[4] {
					yym797 := z.EncBinary()
					_ = yym797
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq781[4] {
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					yym798 := z.EncBinary()
					_ = yym798
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr781 || yy2arr781 {
				if yyq781[5] {
					yym800 := z.EncBinary()
					_ = yym800
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq781[5] {
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					yym801 := z.EncBinary()
					_ = yym801
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yysep781 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *JobCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym802 := z.DecBinary()
	_ = yym802
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl803 := r.ReadMapStart()
			if yyl803 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl803, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl803 := r.ReadArrayStart()
			if yyl803 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl803, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *JobCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys804Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys804Slc
	var yyhl804 bool = l >= 0
	for yyj804 := 0; ; yyj804++ {
		if yyhl804 {
			if yyj804 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys804Slc = r.DecodeBytes(yys804Slc, true, true)
		yys804 := string(yys804Slc)
		switch yys804 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = JobConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = pkg2_api.ConditionStatus(r.DecodeString())
			}
		case "lastProbeTime":
			if r.TryDecodeAsNil() {
				x.LastProbeTime = pkg1_unversioned.Time{}
			} else {
				yyv807 := &x.LastProbeTime
				yym808 := z.DecBinary()
				_ = yym808
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv807) {
				} else if yym808 {
					z.DecBinaryUnmarshal(yyv807)
				} else if !yym808 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv807)
				} else {
					z.DecFallback(yyv807, false)
				}
			}
		case "lastTransitionTime":
			if r.TryDecodeAsNil() {
				x.LastTransitionTime = pkg1_unversioned.Time{}
			} else {
				yyv809 := &x.LastTransitionTime
				yym810 := z.DecBinary()
				_ = yym810
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv809) {
				} else if yym810 {
					z.DecBinaryUnmarshal(yyv809)
				} else if !yym810 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv809)
				} else {
					z.DecFallback(yyv809, false)
				}
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys804)
		} // end switch yys804
	} // end for yyj804
	if !yyhl804 {
		r.ReadEnd()
	}
}

func (x *JobCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj813 int
	var yyb813 bool
	var yyhl813 bool = l >= 0
	yyj813++
	if yyhl813 {
		yyb813 = yyj813 > l
	} else {
		yyb813 = r.CheckBreak()
	}
	if yyb813 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = JobConditionType(r.DecodeString())
	}
	yyj813++
	if yyhl813 {
		yyb813 = yyj813 > l
	} else {
		yyb813 = r.CheckBreak()
	}
	if yyb813 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = pkg2_api.ConditionStatus(r.DecodeString())
	}
	yyj813++
	if yyhl813 {
		yyb813 = yyj813 > l
	} else {
		yyb813 = r.CheckBreak()
	}
	if yyb813 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.LastProbeTime = pkg1_unversioned.Time{}
	} else {
		yyv816 := &x.LastProbeTime
		yym817 := z.DecBinary()
		_ = yym817
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv816) {
		} else if yym817 {
			z.DecBinaryUnmarshal(yyv816)
		} else if !yym817 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv816)
		} else {
			z.DecFallback(yyv816, false)
		}
	}
	yyj813++
	if yyhl813 {
		yyb813 = yyj813 > l
	} else {
		yyb813 = r.CheckBreak()
	}
	if yyb813 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.LastTransitionTime = pkg1_unversioned.Time{}
	} else {
		yyv818 := &x.LastTransitionTime
		yym819 := z.DecBinary()
		_ = yym819
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv818) {
		} else if yym819 {
			z.DecBinaryUnmarshal(yyv818)
		} else if !yym819 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv818)
		} else {
			z.DecFallback(yyv818, false)
		}
	}
	yyj813++
	if yyhl813 {
		yyb813 = yyj813 > l
	} else {
		yyb813 = r.CheckBreak()
	}
	if yyb813 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj813++
	if yyhl813 {
		yyb813 = yyj813 > l
	} else {
		yyb813 = r.CheckBreak()
	}
	if yyb813 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj813++
		if yyhl813 {
			yyb813 = yyj813 > l
		} else {
			yyb813 = r.CheckBreak()
		}
		if yyb813 {
			break
		}
		z.DecStructFieldNotFound(yyj813-1, "")
	}
	r.ReadEnd()
}

func (x *Ingress) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym822 := z.EncBinary()
		_ = yym822
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep823 := !z.EncBinary()
			yy2arr823 := z.EncBasicHandle().StructToArray
			var yyq823 [5]bool
			_, _, _ = yysep823, yyq823, yy2arr823
			const yyr823 bool = false
			yyq823[0] = x.Kind != ""
			yyq823[1] = x.APIVersion != ""
			yyq823[2] = true
			yyq823[3] = true
			yyq823[4] = true
			if yyr823 || yy2arr823 {
				r.EncodeArrayStart(5)
			} else {
				var yynn823 int = 0
				for _, b := range yyq823 {
					if b {
						yynn823++
					}
				}
				r.EncodeMapStart(yynn823)
			}
			if yyr823 || yy2arr823 {
				if yyq823[0] {
					yym825 := z.EncBinary()
					_ = yym825
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq823[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym826 := z.EncBinary()
					_ = yym826
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr823 || yy2arr823 {
				if yyq823[1] {
					yym828 := z.EncBinary()
					_ = yym828
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq823[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym829 := z.EncBinary()
					_ = yym829
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr823 || yy2arr823 {
				if yyq823[2] {
					yy831 := &x.ObjectMeta
					yy831.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq823[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy832 := &x.ObjectMeta
					yy832.CodecEncodeSelf(e)
				}
			}
			if yyr823 || yy2arr823 {
				if yyq823[3] {
					yy834 := &x.Spec
					yy834.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq823[3] {
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					yy835 := &x.Spec
					yy835.CodecEncodeSelf(e)
				}
			}
			if yyr823 || yy2arr823 {
				if yyq823[4] {
					yy837 := &x.Status
					yy837.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq823[4] {
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					yy838 := &x.Status
					yy838.CodecEncodeSelf(e)
				}
			}
			if yysep823 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Ingress) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym839 := z.DecBinary()
	_ = yym839
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl840 := r.ReadMapStart()
			if yyl840 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl840, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl840 := r.ReadArrayStart()
			if yyl840 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl840, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Ingress) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys841Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys841Slc
	var yyhl841 bool = l >= 0
	for yyj841 := 0; ; yyj841++ {
		if yyhl841 {
			if yyj841 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys841Slc = r.DecodeBytes(yys841Slc, true, true)
		yys841 := string(yys841Slc)
		switch yys841 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_api.ObjectMeta{}
			} else {
				yyv844 := &x.ObjectMeta
				yyv844.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = IngressSpec{}
			} else {
				yyv845 := &x.Spec
				yyv845.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = IngressStatus{}
			} else {
				yyv846 := &x.Status
				yyv846.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys841)
		} // end switch yys841
	} // end for yyj841
	if !yyhl841 {
		r.ReadEnd()
	}
}

func (x *Ingress) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj847 int
	var yyb847 bool
	var yyhl847 bool = l >= 0
	yyj847++
	if yyhl847 {
		yyb847 = yyj847 > l
	} else {
		yyb847 = r.CheckBreak()
	}
	if yyb847 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj847++
	if yyhl847 {
		yyb847 = yyj847 > l
	} else {
		yyb847 = r.CheckBreak()
	}
	if yyb847 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj847++
	if yyhl847 {
		yyb847 = yyj847 > l
	} else {
		yyb847 = r.CheckBreak()
	}
	if yyb847 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_api.ObjectMeta{}
	} else {
		yyv850 := &x.ObjectMeta
		yyv850.CodecDecodeSelf(d)
	}
	yyj847++
	if yyhl847 {
		yyb847 = yyj847 > l
	} else {
		yyb847 = r.CheckBreak()
	}
	if yyb847 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Spec = IngressSpec{}
	} else {
		yyv851 := &x.Spec
		yyv851.CodecDecodeSelf(d)
	}
	yyj847++
	if yyhl847 {
		yyb847 = yyj847 > l
	} else {
		yyb847 = r.CheckBreak()
	}
	if yyb847 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = IngressStatus{}
	} else {
		yyv852 := &x.Status
		yyv852.CodecDecodeSelf(d)
	}
	for {
		yyj847++
		if yyhl847 {
			yyb847 = yyj847 > l
		} else {
			yyb847 = r.CheckBreak()
		}
		if yyb847 {
			break
		}
		z.DecStructFieldNotFound(yyj847-1, "")
	}
	r.ReadEnd()
}

func (x *IngressList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym853 := z.EncBinary()
		_ = yym853
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep854 := !z.EncBinary()
			yy2arr854 := z.EncBasicHandle().StructToArray
			var yyq854 [4]bool
			_, _, _ = yysep854, yyq854, yy2arr854
			const yyr854 bool = false
			yyq854[0] = x.Kind != ""
			yyq854[1] = x.APIVersion != ""
			yyq854[2] = true
			if yyr854 || yy2arr854 {
				r.EncodeArrayStart(4)
			} else {
				var yynn854 int = 1
				for _, b := range yyq854 {
					if b {
						yynn854++
					}
				}
				r.EncodeMapStart(yynn854)
			}
			if yyr854 || yy2arr854 {
				if yyq854[0] {
					yym856 := z.EncBinary()
					_ = yym856
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq854[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym857 := z.EncBinary()
					_ = yym857
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr854 || yy2arr854 {
				if yyq854[1] {
					yym859 := z.EncBinary()
					_ = yym859
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq854[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym860 := z.EncBinary()
					_ = yym860
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr854 || yy2arr854 {
				if yyq854[2] {
					yy862 := &x.ListMeta
					yym863 := z.EncBinary()
					_ = yym863
					if false {
					} else if z.HasExtensions() && z.EncExt(yy862) {
					} else {
						z.EncFallback(yy862)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq854[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy864 := &x.ListMeta
					yym865 := z.EncBinary()
					_ = yym865
					if false {
					} else if z.HasExtensions() && z.EncExt(yy864) {
					} else {
						z.EncFallback(yy864)
					}
				}
			}
			if yyr854 || yy2arr854 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym867 := z.EncBinary()
					_ = yym867
					if false {
					} else {
						h.encSliceIngress(([]Ingress)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym868 := z.EncBinary()
					_ = yym868
					if false {
					} else {
						h.encSliceIngress(([]Ingress)(x.Items), e)
					}
				}
			}
			if yysep854 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *IngressList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym869 := z.DecBinary()
	_ = yym869
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl870 := r.ReadMapStart()
			if yyl870 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl870, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl870 := r.ReadArrayStart()
			if yyl870 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl870, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *IngressList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys871Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys871Slc
	var yyhl871 bool = l >= 0
	for yyj871 := 0; ; yyj871++ {
		if yyhl871 {
			if yyj871 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys871Slc = r.DecodeBytes(yys871Slc, true, true)
		yys871 := string(yys871Slc)
		switch yys871 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_unversioned.ListMeta{}
			} else {
				yyv874 := &x.ListMeta
				yym875 := z.DecBinary()
				_ = yym875
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv874) {
				} else {
					z.DecFallback(yyv874, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv876 := &x.Items
				yym877 := z.DecBinary()
				_ = yym877
				if false {
				} else {
					h.decSliceIngress((*[]Ingress)(yyv876), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys871)
		} // end switch yys871
	} // end for yyj871
	if !yyhl871 {
		r.ReadEnd()
	}
}

func (x *IngressList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj878 int
	var yyb878 bool
	var yyhl878 bool = l >= 0
	yyj878++
	if yyhl878 {
		yyb878 = yyj878 > l
	} else {
		yyb878 = r.CheckBreak()
	}
	if yyb878 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj878++
	if yyhl878 {
		yyb878 = yyj878 > l
	} else {
		yyb878 = r.CheckBreak()
	}
	if yyb878 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj878++
	if yyhl878 {
		yyb878 = yyj878 > l
	} else {
		yyb878 = r.CheckBreak()
	}
	if yyb878 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_unversioned.ListMeta{}
	} else {
		yyv881 := &x.ListMeta
		yym882 := z.DecBinary()
		_ = yym882
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv881) {
		} else {
			z.DecFallback(yyv881, false)
		}
	}
	yyj878++
	if yyhl878 {
		yyb878 = yyj878 > l
	} else {
		yyb878 = r.CheckBreak()
	}
	if yyb878 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv883 := &x.Items
		yym884 := z.DecBinary()
		_ = yym884
		if false {
		} else {
			h.decSliceIngress((*[]Ingress)(yyv883), d)
		}
	}
	for {
		yyj878++
		if yyhl878 {
			yyb878 = yyj878 > l
		} else {
			yyb878 = r.CheckBreak()
		}
		if yyb878 {
			break
		}
		z.DecStructFieldNotFound(yyj878-1, "")
	}
	r.ReadEnd()
}

func (x *IngressSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym885 := z.EncBinary()
		_ = yym885
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep886 := !z.EncBinary()
			yy2arr886 := z.EncBasicHandle().StructToArray
			var yyq886 [2]bool
			_, _, _ = yysep886, yyq886, yy2arr886
			const yyr886 bool = false
			yyq886[0] = x.Backend != nil
			yyq886[1] = len(x.Rules) != 0
			if yyr886 || yy2arr886 {
				r.EncodeArrayStart(2)
			} else {
				var yynn886 int = 0
				for _, b := range yyq886 {
					if b {
						yynn886++
					}
				}
				r.EncodeMapStart(yynn886)
			}
			if yyr886 || yy2arr886 {
				if yyq886[0] {
					if x.Backend == nil {
						r.EncodeNil()
					} else {
						x.Backend.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq886[0] {
					r.EncodeString(codecSelferC_UTF81234, string("backend"))
					if x.Backend == nil {
						r.EncodeNil()
					} else {
						x.Backend.CodecEncodeSelf(e)
					}
				}
			}
			if yyr886 || yy2arr886 {
				if yyq886[1] {
					if x.Rules == nil {
						r.EncodeNil()
					} else {
						yym889 := z.EncBinary()
						_ = yym889
						if false {
						} else {
							h.encSliceIngressRule(([]IngressRule)(x.Rules), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq886[1] {
					r.EncodeString(codecSelferC_UTF81234, string("rules"))
					if x.Rules == nil {
						r.EncodeNil()
					} else {
						yym890 := z.EncBinary()
						_ = yym890
						if false {
						} else {
							h.encSliceIngressRule(([]IngressRule)(x.Rules), e)
						}
					}
				}
			}
			if yysep886 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *IngressSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym891 := z.DecBinary()
	_ = yym891
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl892 := r.ReadMapStart()
			if yyl892 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl892, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl892 := r.ReadArrayStart()
			if yyl892 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl892, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *IngressSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys893Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys893Slc
	var yyhl893 bool = l >= 0
	for yyj893 := 0; ; yyj893++ {
		if yyhl893 {
			if yyj893 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys893Slc = r.DecodeBytes(yys893Slc, true, true)
		yys893 := string(yys893Slc)
		switch yys893 {
		case "backend":
			if r.TryDecodeAsNil() {
				if x.Backend != nil {
					x.Backend = nil
				}
			} else {
				if x.Backend == nil {
					x.Backend = new(IngressBackend)
				}
				x.Backend.CodecDecodeSelf(d)
			}
		case "rules":
			if r.TryDecodeAsNil() {
				x.Rules = nil
			} else {
				yyv895 := &x.Rules
				yym896 := z.DecBinary()
				_ = yym896
				if false {
				} else {
					h.decSliceIngressRule((*[]IngressRule)(yyv895), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys893)
		} // end switch yys893
	} // end for yyj893
	if !yyhl893 {
		r.ReadEnd()
	}
}

func (x *IngressSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj897 int
	var yyb897 bool
	var yyhl897 bool = l >= 0
	yyj897++
	if yyhl897 {
		yyb897 = yyj897 > l
	} else {
		yyb897 = r.CheckBreak()
	}
	if yyb897 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Backend != nil {
			x.Backend = nil
		}
	} else {
		if x.Backend == nil {
			x.Backend = new(IngressBackend)
		}
		x.Backend.CodecDecodeSelf(d)
	}
	yyj897++
	if yyhl897 {
		yyb897 = yyj897 > l
	} else {
		yyb897 = r.CheckBreak()
	}
	if yyb897 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Rules = nil
	} else {
		yyv899 := &x.Rules
		yym900 := z.DecBinary()
		_ = yym900
		if false {
		} else {
			h.decSliceIngressRule((*[]IngressRule)(yyv899), d)
		}
	}
	for {
		yyj897++
		if yyhl897 {
			yyb897 = yyj897 > l
		} else {
			yyb897 = r.CheckBreak()
		}
		if yyb897 {
			break
		}
		z.DecStructFieldNotFound(yyj897-1, "")
	}
	r.ReadEnd()
}

func (x *IngressStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym901 := z.EncBinary()
		_ = yym901
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep902 := !z.EncBinary()
			yy2arr902 := z.EncBasicHandle().StructToArray
			var yyq902 [1]bool
			_, _, _ = yysep902, yyq902, yy2arr902
			const yyr902 bool = false
			yyq902[0] = true
			if yyr902 || yy2arr902 {
				r.EncodeArrayStart(1)
			} else {
				var yynn902 int = 0
				for _, b := range yyq902 {
					if b {
						yynn902++
					}
				}
				r.EncodeMapStart(yynn902)
			}
			if yyr902 || yy2arr902 {
				if yyq902[0] {
					yy904 := &x.LoadBalancer
					yy904.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq902[0] {
					r.EncodeString(codecSelferC_UTF81234, string("loadBalancer"))
					yy905 := &x.LoadBalancer
					yy905.CodecEncodeSelf(e)
				}
			}
			if yysep902 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *IngressStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym906 := z.DecBinary()
	_ = yym906
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl907 := r.ReadMapStart()
			if yyl907 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl907, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl907 := r.ReadArrayStart()
			if yyl907 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl907, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *IngressStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys908Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys908Slc
	var yyhl908 bool = l >= 0
	for yyj908 := 0; ; yyj908++ {
		if yyhl908 {
			if yyj908 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys908Slc = r.DecodeBytes(yys908Slc, true, true)
		yys908 := string(yys908Slc)
		switch yys908 {
		case "loadBalancer":
			if r.TryDecodeAsNil() {
				x.LoadBalancer = pkg2_api.LoadBalancerStatus{}
			} else {
				yyv909 := &x.LoadBalancer
				yyv909.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys908)
		} // end switch yys908
	} // end for yyj908
	if !yyhl908 {
		r.ReadEnd()
	}
}

func (x *IngressStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj910 int
	var yyb910 bool
	var yyhl910 bool = l >= 0
	yyj910++
	if yyhl910 {
		yyb910 = yyj910 > l
	} else {
		yyb910 = r.CheckBreak()
	}
	if yyb910 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.LoadBalancer = pkg2_api.LoadBalancerStatus{}
	} else {
		yyv911 := &x.LoadBalancer
		yyv911.CodecDecodeSelf(d)
	}
	for {
		yyj910++
		if yyhl910 {
			yyb910 = yyj910 > l
		} else {
			yyb910 = r.CheckBreak()
		}
		if yyb910 {
			break
		}
		z.DecStructFieldNotFound(yyj910-1, "")
	}
	r.ReadEnd()
}

func (x *IngressRule) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym912 := z.EncBinary()
		_ = yym912
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep913 := !z.EncBinary()
			yy2arr913 := z.EncBasicHandle().StructToArray
			var yyq913 [2]bool
			_, _, _ = yysep913, yyq913, yy2arr913
			const yyr913 bool = false
			yyq913[0] = x.Host != ""
			yyq913[1] = x.IngressRuleValue.HTTP != nil && x.HTTP != nil
			if yyr913 || yy2arr913 {
				r.EncodeArrayStart(2)
			} else {
				var yynn913 int = 0
				for _, b := range yyq913 {
					if b {
						yynn913++
					}
				}
				r.EncodeMapStart(yynn913)
			}
			if yyr913 || yy2arr913 {
				if yyq913[0] {
					yym915 := z.EncBinary()
					_ = yym915
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq913[0] {
					r.EncodeString(codecSelferC_UTF81234, string("host"))
					yym916 := z.EncBinary()
					_ = yym916
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				}
			}
			var yyn917 bool
			if x.IngressRuleValue.HTTP == nil {
				yyn917 = true
				goto LABEL917
			}
		LABEL917:
			if yyr913 || yy2arr913 {
				if yyn917 {
					r.EncodeNil()
				} else {
					if yyq913[1] {
						if x.HTTP == nil {
							r.EncodeNil()
						} else {
							x.HTTP.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq913[1] {
					r.EncodeString(codecSelferC_UTF81234, string("http"))
					if yyn917 {
						r.EncodeNil()
					} else {
						if x.HTTP == nil {
							r.EncodeNil()
						} else {
							x.HTTP.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yysep913 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *IngressRule) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym918 := z.DecBinary()
	_ = yym918
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl919 := r.ReadMapStart()
			if yyl919 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl919, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl919 := r.ReadArrayStart()
			if yyl919 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl919, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *IngressRule) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys920Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys920Slc
	var yyhl920 bool = l >= 0
	for yyj920 := 0; ; yyj920++ {
		if yyhl920 {
			if yyj920 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys920Slc = r.DecodeBytes(yys920Slc, true, true)
		yys920 := string(yys920Slc)
		switch yys920 {
		case "host":
			if r.TryDecodeAsNil() {
				x.Host = ""
			} else {
				x.Host = string(r.DecodeString())
			}
		case "http":
			if x.IngressRuleValue.HTTP == nil {
				x.IngressRuleValue.HTTP = new(HTTPIngressRuleValue)
			}
			if r.TryDecodeAsNil() {
				if x.HTTP != nil {
					x.HTTP = nil
				}
			} else {
				if x.HTTP == nil {
					x.HTTP = new(HTTPIngressRuleValue)
				}
				x.HTTP.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys920)
		} // end switch yys920
	} // end for yyj920
	if !yyhl920 {
		r.ReadEnd()
	}
}

func (x *IngressRule) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj923 int
	var yyb923 bool
	var yyhl923 bool = l >= 0
	yyj923++
	if yyhl923 {
		yyb923 = yyj923 > l
	} else {
		yyb923 = r.CheckBreak()
	}
	if yyb923 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Host = ""
	} else {
		x.Host = string(r.DecodeString())
	}
	yyj923++
	if yyhl923 {
		yyb923 = yyj923 > l
	} else {
		yyb923 = r.CheckBreak()
	}
	if yyb923 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.HTTP != nil {
			x.HTTP = nil
		}
	} else {
		if x.HTTP == nil {
			x.HTTP = new(HTTPIngressRuleValue)
		}
		x.HTTP.CodecDecodeSelf(d)
	}
	for {
		yyj923++
		if yyhl923 {
			yyb923 = yyj923 > l
		} else {
			yyb923 = r.CheckBreak()
		}
		if yyb923 {
			break
		}
		z.DecStructFieldNotFound(yyj923-1, "")
	}
	r.ReadEnd()
}

func (x *IngressRuleValue) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym926 := z.EncBinary()
		_ = yym926
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep927 := !z.EncBinary()
			yy2arr927 := z.EncBasicHandle().StructToArray
			var yyq927 [1]bool
			_, _, _ = yysep927, yyq927, yy2arr927
			const yyr927 bool = false
			yyq927[0] = x.HTTP != nil
			if yyr927 || yy2arr927 {
				r.EncodeArrayStart(1)
			} else {
				var yynn927 int = 0
				for _, b := range yyq927 {
					if b {
						yynn927++
					}
				}
				r.EncodeMapStart(yynn927)
			}
			if yyr927 || yy2arr927 {
				if yyq927[0] {
					if x.HTTP == nil {
						r.EncodeNil()
					} else {
						x.HTTP.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq927[0] {
					r.EncodeString(codecSelferC_UTF81234, string("http"))
					if x.HTTP == nil {
						r.EncodeNil()
					} else {
						x.HTTP.CodecEncodeSelf(e)
					}
				}
			}
			if yysep927 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *IngressRuleValue) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym929 := z.DecBinary()
	_ = yym929
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl930 := r.ReadMapStart()
			if yyl930 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl930, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl930 := r.ReadArrayStart()
			if yyl930 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl930, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *IngressRuleValue) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys931Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys931Slc
	var yyhl931 bool = l >= 0
	for yyj931 := 0; ; yyj931++ {
		if yyhl931 {
			if yyj931 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys931Slc = r.DecodeBytes(yys931Slc, true, true)
		yys931 := string(yys931Slc)
		switch yys931 {
		case "http":
			if r.TryDecodeAsNil() {
				if x.HTTP != nil {
					x.HTTP = nil
				}
			} else {
				if x.HTTP == nil {
					x.HTTP = new(HTTPIngressRuleValue)
				}
				x.HTTP.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys931)
		} // end switch yys931
	} // end for yyj931
	if !yyhl931 {
		r.ReadEnd()
	}
}

func (x *IngressRuleValue) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj933 int
	var yyb933 bool
	var yyhl933 bool = l >= 0
	yyj933++
	if yyhl933 {
		yyb933 = yyj933 > l
	} else {
		yyb933 = r.CheckBreak()
	}
	if yyb933 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.HTTP != nil {
			x.HTTP = nil
		}
	} else {
		if x.HTTP == nil {
			x.HTTP = new(HTTPIngressRuleValue)
		}
		x.HTTP.CodecDecodeSelf(d)
	}
	for {
		yyj933++
		if yyhl933 {
			yyb933 = yyj933 > l
		} else {
			yyb933 = r.CheckBreak()
		}
		if yyb933 {
			break
		}
		z.DecStructFieldNotFound(yyj933-1, "")
	}
	r.ReadEnd()
}

func (x *HTTPIngressRuleValue) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym935 := z.EncBinary()
		_ = yym935
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep936 := !z.EncBinary()
			yy2arr936 := z.EncBasicHandle().StructToArray
			var yyq936 [1]bool
			_, _, _ = yysep936, yyq936, yy2arr936
			const yyr936 bool = false
			if yyr936 || yy2arr936 {
				r.EncodeArrayStart(1)
			} else {
				var yynn936 int = 1
				for _, b := range yyq936 {
					if b {
						yynn936++
					}
				}
				r.EncodeMapStart(yynn936)
			}
			if yyr936 || yy2arr936 {
				if x.Paths == nil {
					r.EncodeNil()
				} else {
					yym938 := z.EncBinary()
					_ = yym938
					if false {
					} else {
						h.encSliceHTTPIngressPath(([]HTTPIngressPath)(x.Paths), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("paths"))
				if x.Paths == nil {
					r.EncodeNil()
				} else {
					yym939 := z.EncBinary()
					_ = yym939
					if false {
					} else {
						h.encSliceHTTPIngressPath(([]HTTPIngressPath)(x.Paths), e)
					}
				}
			}
			if yysep936 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *HTTPIngressRuleValue) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym940 := z.DecBinary()
	_ = yym940
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl941 := r.ReadMapStart()
			if yyl941 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl941, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl941 := r.ReadArrayStart()
			if yyl941 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl941, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HTTPIngressRuleValue) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys942Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys942Slc
	var yyhl942 bool = l >= 0
	for yyj942 := 0; ; yyj942++ {
		if yyhl942 {
			if yyj942 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys942Slc = r.DecodeBytes(yys942Slc, true, true)
		yys942 := string(yys942Slc)
		switch yys942 {
		case "paths":
			if r.TryDecodeAsNil() {
				x.Paths = nil
			} else {
				yyv943 := &x.Paths
				yym944 := z.DecBinary()
				_ = yym944
				if false {
				} else {
					h.decSliceHTTPIngressPath((*[]HTTPIngressPath)(yyv943), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys942)
		} // end switch yys942
	} // end for yyj942
	if !yyhl942 {
		r.ReadEnd()
	}
}

func (x *HTTPIngressRuleValue) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj945 int
	var yyb945 bool
	var yyhl945 bool = l >= 0
	yyj945++
	if yyhl945 {
		yyb945 = yyj945 > l
	} else {
		yyb945 = r.CheckBreak()
	}
	if yyb945 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Paths = nil
	} else {
		yyv946 := &x.Paths
		yym947 := z.DecBinary()
		_ = yym947
		if false {
		} else {
			h.decSliceHTTPIngressPath((*[]HTTPIngressPath)(yyv946), d)
		}
	}
	for {
		yyj945++
		if yyhl945 {
			yyb945 = yyj945 > l
		} else {
			yyb945 = r.CheckBreak()
		}
		if yyb945 {
			break
		}
		z.DecStructFieldNotFound(yyj945-1, "")
	}
	r.ReadEnd()
}

func (x *HTTPIngressPath) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym948 := z.EncBinary()
		_ = yym948
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep949 := !z.EncBinary()
			yy2arr949 := z.EncBasicHandle().StructToArray
			var yyq949 [2]bool
			_, _, _ = yysep949, yyq949, yy2arr949
			const yyr949 bool = false
			yyq949[0] = x.Path != ""
			if yyr949 || yy2arr949 {
				r.EncodeArrayStart(2)
			} else {
				var yynn949 int = 1
				for _, b := range yyq949 {
					if b {
						yynn949++
					}
				}
				r.EncodeMapStart(yynn949)
			}
			if yyr949 || yy2arr949 {
				if yyq949[0] {
					yym951 := z.EncBinary()
					_ = yym951
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq949[0] {
					r.EncodeString(codecSelferC_UTF81234, string("path"))
					yym952 := z.EncBinary()
					_ = yym952
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				}
			}
			if yyr949 || yy2arr949 {
				yy954 := &x.Backend
				yy954.CodecEncodeSelf(e)
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("backend"))
				yy955 := &x.Backend
				yy955.CodecEncodeSelf(e)
			}
			if yysep949 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *HTTPIngressPath) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym956 := z.DecBinary()
	_ = yym956
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl957 := r.ReadMapStart()
			if yyl957 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl957, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl957 := r.ReadArrayStart()
			if yyl957 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl957, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HTTPIngressPath) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys958Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys958Slc
	var yyhl958 bool = l >= 0
	for yyj958 := 0; ; yyj958++ {
		if yyhl958 {
			if yyj958 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys958Slc = r.DecodeBytes(yys958Slc, true, true)
		yys958 := string(yys958Slc)
		switch yys958 {
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "backend":
			if r.TryDecodeAsNil() {
				x.Backend = IngressBackend{}
			} else {
				yyv960 := &x.Backend
				yyv960.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys958)
		} // end switch yys958
	} // end for yyj958
	if !yyhl958 {
		r.ReadEnd()
	}
}

func (x *HTTPIngressPath) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj961 int
	var yyb961 bool
	var yyhl961 bool = l >= 0
	yyj961++
	if yyhl961 {
		yyb961 = yyj961 > l
	} else {
		yyb961 = r.CheckBreak()
	}
	if yyb961 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj961++
	if yyhl961 {
		yyb961 = yyj961 > l
	} else {
		yyb961 = r.CheckBreak()
	}
	if yyb961 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Backend = IngressBackend{}
	} else {
		yyv963 := &x.Backend
		yyv963.CodecDecodeSelf(d)
	}
	for {
		yyj961++
		if yyhl961 {
			yyb961 = yyj961 > l
		} else {
			yyb961 = r.CheckBreak()
		}
		if yyb961 {
			break
		}
		z.DecStructFieldNotFound(yyj961-1, "")
	}
	r.ReadEnd()
}

func (x *IngressBackend) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym964 := z.EncBinary()
		_ = yym964
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep965 := !z.EncBinary()
			yy2arr965 := z.EncBasicHandle().StructToArray
			var yyq965 [2]bool
			_, _, _ = yysep965, yyq965, yy2arr965
			const yyr965 bool = false
			if yyr965 || yy2arr965 {
				r.EncodeArrayStart(2)
			} else {
				var yynn965 int = 2
				for _, b := range yyq965 {
					if b {
						yynn965++
					}
				}
				r.EncodeMapStart(yynn965)
			}
			if yyr965 || yy2arr965 {
				yym967 := z.EncBinary()
				_ = yym967
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ServiceName))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("serviceName"))
				yym968 := z.EncBinary()
				_ = yym968
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ServiceName))
				}
			}
			if yyr965 || yy2arr965 {
				yy970 := &x.ServicePort
				yym971 := z.EncBinary()
				_ = yym971
				if false {
				} else if z.HasExtensions() && z.EncExt(yy970) {
				} else if !yym971 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy970)
				} else {
					z.EncFallback(yy970)
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("servicePort"))
				yy972 := &x.ServicePort
				yym973 := z.EncBinary()
				_ = yym973
				if false {
				} else if z.HasExtensions() && z.EncExt(yy972) {
				} else if !yym973 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy972)
				} else {
					z.EncFallback(yy972)
				}
			}
			if yysep965 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *IngressBackend) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym974 := z.DecBinary()
	_ = yym974
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl975 := r.ReadMapStart()
			if yyl975 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl975, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl975 := r.ReadArrayStart()
			if yyl975 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl975, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *IngressBackend) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys976Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys976Slc
	var yyhl976 bool = l >= 0
	for yyj976 := 0; ; yyj976++ {
		if yyhl976 {
			if yyj976 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys976Slc = r.DecodeBytes(yys976Slc, true, true)
		yys976 := string(yys976Slc)
		switch yys976 {
		case "serviceName":
			if r.TryDecodeAsNil() {
				x.ServiceName = ""
			} else {
				x.ServiceName = string(r.DecodeString())
			}
		case "servicePort":
			if r.TryDecodeAsNil() {
				x.ServicePort = pkg6_util.IntOrString{}
			} else {
				yyv978 := &x.ServicePort
				yym979 := z.DecBinary()
				_ = yym979
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv978) {
				} else if !yym979 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv978)
				} else {
					z.DecFallback(yyv978, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys976)
		} // end switch yys976
	} // end for yyj976
	if !yyhl976 {
		r.ReadEnd()
	}
}

func (x *IngressBackend) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj980 int
	var yyb980 bool
	var yyhl980 bool = l >= 0
	yyj980++
	if yyhl980 {
		yyb980 = yyj980 > l
	} else {
		yyb980 = r.CheckBreak()
	}
	if yyb980 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ServiceName = ""
	} else {
		x.ServiceName = string(r.DecodeString())
	}
	yyj980++
	if yyhl980 {
		yyb980 = yyj980 > l
	} else {
		yyb980 = r.CheckBreak()
	}
	if yyb980 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ServicePort = pkg6_util.IntOrString{}
	} else {
		yyv982 := &x.ServicePort
		yym983 := z.DecBinary()
		_ = yym983
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv982) {
		} else if !yym983 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv982)
		} else {
			z.DecFallback(yyv982, false)
		}
	}
	for {
		yyj980++
		if yyhl980 {
			yyb980 = yyj980 > l
		} else {
			yyb980 = r.CheckBreak()
		}
		if yyb980 {
			break
		}
		z.DecStructFieldNotFound(yyj980-1, "")
	}
	r.ReadEnd()
}

func (x NodeResource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym984 := z.EncBinary()
	_ = yym984
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodeResource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym985 := z.DecBinary()
	_ = yym985
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NodeUtilization) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym986 := z.EncBinary()
		_ = yym986
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep987 := !z.EncBinary()
			yy2arr987 := z.EncBasicHandle().StructToArray
			var yyq987 [2]bool
			_, _, _ = yysep987, yyq987, yy2arr987
			const yyr987 bool = false
			if yyr987 || yy2arr987 {
				r.EncodeArrayStart(2)
			} else {
				var yynn987 int = 2
				for _, b := range yyq987 {
					if b {
						yynn987++
					}
				}
				r.EncodeMapStart(yynn987)
			}
			if yyr987 || yy2arr987 {
				x.Resource.CodecEncodeSelf(e)
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("resource"))
				x.Resource.CodecEncodeSelf(e)
			}
			if yyr987 || yy2arr987 {
				yym990 := z.EncBinary()
				_ = yym990
				if false {
				} else {
					r.EncodeFloat64(float64(x.Value))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("value"))
				yym991 := z.EncBinary()
				_ = yym991
				if false {
				} else {
					r.EncodeFloat64(float64(x.Value))
				}
			}
			if yysep987 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *NodeUtilization) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym992 := z.DecBinary()
	_ = yym992
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl993 := r.ReadMapStart()
			if yyl993 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl993, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl993 := r.ReadArrayStart()
			if yyl993 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl993, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeUtilization) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys994Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys994Slc
	var yyhl994 bool = l >= 0
	for yyj994 := 0; ; yyj994++ {
		if yyhl994 {
			if yyj994 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys994Slc = r.DecodeBytes(yys994Slc, true, true)
		yys994 := string(yys994Slc)
		switch yys994 {
		case "resource":
			if r.TryDecodeAsNil() {
				x.Resource = ""
			} else {
				x.Resource = NodeResource(r.DecodeString())
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.Value = 0
			} else {
				x.Value = float64(r.DecodeFloat(false))
			}
		default:
			z.DecStructFieldNotFound(-1, yys994)
		} // end switch yys994
	} // end for yyj994
	if !yyhl994 {
		r.ReadEnd()
	}
}

func (x *NodeUtilization) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj997 int
	var yyb997 bool
	var yyhl997 bool = l >= 0
	yyj997++
	if yyhl997 {
		yyb997 = yyj997 > l
	} else {
		yyb997 = r.CheckBreak()
	}
	if yyb997 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Resource = ""
	} else {
		x.Resource = NodeResource(r.DecodeString())
	}
	yyj997++
	if yyhl997 {
		yyb997 = yyj997 > l
	} else {
		yyb997 = r.CheckBreak()
	}
	if yyb997 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Value = 0
	} else {
		x.Value = float64(r.DecodeFloat(false))
	}
	for {
		yyj997++
		if yyhl997 {
			yyb997 = yyj997 > l
		} else {
			yyb997 = r.CheckBreak()
		}
		if yyb997 {
			break
		}
		z.DecStructFieldNotFound(yyj997-1, "")
	}
	r.ReadEnd()
}

func (x *ClusterAutoscalerSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1000 := z.EncBinary()
		_ = yym1000
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1001 := !z.EncBinary()
			yy2arr1001 := z.EncBasicHandle().StructToArray
			var yyq1001 [3]bool
			_, _, _ = yysep1001, yyq1001, yy2arr1001
			const yyr1001 bool = false
			if yyr1001 || yy2arr1001 {
				r.EncodeArrayStart(3)
			} else {
				var yynn1001 int = 3
				for _, b := range yyq1001 {
					if b {
						yynn1001++
					}
				}
				r.EncodeMapStart(yynn1001)
			}
			if yyr1001 || yy2arr1001 {
				yym1003 := z.EncBinary()
				_ = yym1003
				if false {
				} else {
					r.EncodeInt(int64(x.MinNodes))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("minNodes"))
				yym1004 := z.EncBinary()
				_ = yym1004
				if false {
				} else {
					r.EncodeInt(int64(x.MinNodes))
				}
			}
			if yyr1001 || yy2arr1001 {
				yym1006 := z.EncBinary()
				_ = yym1006
				if false {
				} else {
					r.EncodeInt(int64(x.MaxNodes))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("maxNodes"))
				yym1007 := z.EncBinary()
				_ = yym1007
				if false {
				} else {
					r.EncodeInt(int64(x.MaxNodes))
				}
			}
			if yyr1001 || yy2arr1001 {
				if x.TargetUtilization == nil {
					r.EncodeNil()
				} else {
					yym1009 := z.EncBinary()
					_ = yym1009
					if false {
					} else {
						h.encSliceNodeUtilization(([]NodeUtilization)(x.TargetUtilization), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("target"))
				if x.TargetUtilization == nil {
					r.EncodeNil()
				} else {
					yym1010 := z.EncBinary()
					_ = yym1010
					if false {
					} else {
						h.encSliceNodeUtilization(([]NodeUtilization)(x.TargetUtilization), e)
					}
				}
			}
			if yysep1001 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ClusterAutoscalerSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1011 := z.DecBinary()
	_ = yym1011
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1012 := r.ReadMapStart()
			if yyl1012 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1012, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1012 := r.ReadArrayStart()
			if yyl1012 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1012, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ClusterAutoscalerSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1013Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1013Slc
	var yyhl1013 bool = l >= 0
	for yyj1013 := 0; ; yyj1013++ {
		if yyhl1013 {
			if yyj1013 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1013Slc = r.DecodeBytes(yys1013Slc, true, true)
		yys1013 := string(yys1013Slc)
		switch yys1013 {
		case "minNodes":
			if r.TryDecodeAsNil() {
				x.MinNodes = 0
			} else {
				x.MinNodes = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "maxNodes":
			if r.TryDecodeAsNil() {
				x.MaxNodes = 0
			} else {
				x.MaxNodes = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "target":
			if r.TryDecodeAsNil() {
				x.TargetUtilization = nil
			} else {
				yyv1016 := &x.TargetUtilization
				yym1017 := z.DecBinary()
				_ = yym1017
				if false {
				} else {
					h.decSliceNodeUtilization((*[]NodeUtilization)(yyv1016), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1013)
		} // end switch yys1013
	} // end for yyj1013
	if !yyhl1013 {
		r.ReadEnd()
	}
}

func (x *ClusterAutoscalerSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1018 int
	var yyb1018 bool
	var yyhl1018 bool = l >= 0
	yyj1018++
	if yyhl1018 {
		yyb1018 = yyj1018 > l
	} else {
		yyb1018 = r.CheckBreak()
	}
	if yyb1018 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.MinNodes = 0
	} else {
		x.MinNodes = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1018++
	if yyhl1018 {
		yyb1018 = yyj1018 > l
	} else {
		yyb1018 = r.CheckBreak()
	}
	if yyb1018 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.MaxNodes = 0
	} else {
		x.MaxNodes = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1018++
	if yyhl1018 {
		yyb1018 = yyj1018 > l
	} else {
		yyb1018 = r.CheckBreak()
	}
	if yyb1018 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.TargetUtilization = nil
	} else {
		yyv1021 := &x.TargetUtilization
		yym1022 := z.DecBinary()
		_ = yym1022
		if false {
		} else {
			h.decSliceNodeUtilization((*[]NodeUtilization)(yyv1021), d)
		}
	}
	for {
		yyj1018++
		if yyhl1018 {
			yyb1018 = yyj1018 > l
		} else {
			yyb1018 = r.CheckBreak()
		}
		if yyb1018 {
			break
		}
		z.DecStructFieldNotFound(yyj1018-1, "")
	}
	r.ReadEnd()
}

func (x *ClusterAutoscaler) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1023 := z.EncBinary()
		_ = yym1023
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1024 := !z.EncBinary()
			yy2arr1024 := z.EncBasicHandle().StructToArray
			var yyq1024 [4]bool
			_, _, _ = yysep1024, yyq1024, yy2arr1024
			const yyr1024 bool = false
			yyq1024[0] = x.Kind != ""
			yyq1024[1] = x.APIVersion != ""
			yyq1024[2] = true
			yyq1024[3] = true
			if yyr1024 || yy2arr1024 {
				r.EncodeArrayStart(4)
			} else {
				var yynn1024 int = 0
				for _, b := range yyq1024 {
					if b {
						yynn1024++
					}
				}
				r.EncodeMapStart(yynn1024)
			}
			if yyr1024 || yy2arr1024 {
				if yyq1024[0] {
					yym1026 := z.EncBinary()
					_ = yym1026
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1024[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym1027 := z.EncBinary()
					_ = yym1027
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1024 || yy2arr1024 {
				if yyq1024[1] {
					yym1029 := z.EncBinary()
					_ = yym1029
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1024[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym1030 := z.EncBinary()
					_ = yym1030
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1024 || yy2arr1024 {
				if yyq1024[2] {
					yy1032 := &x.ObjectMeta
					yy1032.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1024[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy1033 := &x.ObjectMeta
					yy1033.CodecEncodeSelf(e)
				}
			}
			if yyr1024 || yy2arr1024 {
				if yyq1024[3] {
					yy1035 := &x.Spec
					yy1035.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1024[3] {
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					yy1036 := &x.Spec
					yy1036.CodecEncodeSelf(e)
				}
			}
			if yysep1024 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ClusterAutoscaler) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1037 := z.DecBinary()
	_ = yym1037
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1038 := r.ReadMapStart()
			if yyl1038 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1038, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1038 := r.ReadArrayStart()
			if yyl1038 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1038, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ClusterAutoscaler) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1039Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1039Slc
	var yyhl1039 bool = l >= 0
	for yyj1039 := 0; ; yyj1039++ {
		if yyhl1039 {
			if yyj1039 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1039Slc = r.DecodeBytes(yys1039Slc, true, true)
		yys1039 := string(yys1039Slc)
		switch yys1039 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_api.ObjectMeta{}
			} else {
				yyv1042 := &x.ObjectMeta
				yyv1042.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ClusterAutoscalerSpec{}
			} else {
				yyv1043 := &x.Spec
				yyv1043.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1039)
		} // end switch yys1039
	} // end for yyj1039
	if !yyhl1039 {
		r.ReadEnd()
	}
}

func (x *ClusterAutoscaler) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1044 int
	var yyb1044 bool
	var yyhl1044 bool = l >= 0
	yyj1044++
	if yyhl1044 {
		yyb1044 = yyj1044 > l
	} else {
		yyb1044 = r.CheckBreak()
	}
	if yyb1044 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1044++
	if yyhl1044 {
		yyb1044 = yyj1044 > l
	} else {
		yyb1044 = r.CheckBreak()
	}
	if yyb1044 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1044++
	if yyhl1044 {
		yyb1044 = yyj1044 > l
	} else {
		yyb1044 = r.CheckBreak()
	}
	if yyb1044 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_api.ObjectMeta{}
	} else {
		yyv1047 := &x.ObjectMeta
		yyv1047.CodecDecodeSelf(d)
	}
	yyj1044++
	if yyhl1044 {
		yyb1044 = yyj1044 > l
	} else {
		yyb1044 = r.CheckBreak()
	}
	if yyb1044 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Spec = ClusterAutoscalerSpec{}
	} else {
		yyv1048 := &x.Spec
		yyv1048.CodecDecodeSelf(d)
	}
	for {
		yyj1044++
		if yyhl1044 {
			yyb1044 = yyj1044 > l
		} else {
			yyb1044 = r.CheckBreak()
		}
		if yyb1044 {
			break
		}
		z.DecStructFieldNotFound(yyj1044-1, "")
	}
	r.ReadEnd()
}

func (x *ClusterAutoscalerList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1049 := z.EncBinary()
		_ = yym1049
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1050 := !z.EncBinary()
			yy2arr1050 := z.EncBasicHandle().StructToArray
			var yyq1050 [4]bool
			_, _, _ = yysep1050, yyq1050, yy2arr1050
			const yyr1050 bool = false
			yyq1050[0] = x.Kind != ""
			yyq1050[1] = x.APIVersion != ""
			yyq1050[2] = true
			if yyr1050 || yy2arr1050 {
				r.EncodeArrayStart(4)
			} else {
				var yynn1050 int = 1
				for _, b := range yyq1050 {
					if b {
						yynn1050++
					}
				}
				r.EncodeMapStart(yynn1050)
			}
			if yyr1050 || yy2arr1050 {
				if yyq1050[0] {
					yym1052 := z.EncBinary()
					_ = yym1052
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1050[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym1053 := z.EncBinary()
					_ = yym1053
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1050 || yy2arr1050 {
				if yyq1050[1] {
					yym1055 := z.EncBinary()
					_ = yym1055
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1050[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym1056 := z.EncBinary()
					_ = yym1056
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1050 || yy2arr1050 {
				if yyq1050[2] {
					yy1058 := &x.ListMeta
					yym1059 := z.EncBinary()
					_ = yym1059
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1058) {
					} else {
						z.EncFallback(yy1058)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1050[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy1060 := &x.ListMeta
					yym1061 := z.EncBinary()
					_ = yym1061
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1060) {
					} else {
						z.EncFallback(yy1060)
					}
				}
			}
			if yyr1050 || yy2arr1050 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1063 := z.EncBinary()
					_ = yym1063
					if false {
					} else {
						h.encSliceClusterAutoscaler(([]ClusterAutoscaler)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1064 := z.EncBinary()
					_ = yym1064
					if false {
					} else {
						h.encSliceClusterAutoscaler(([]ClusterAutoscaler)(x.Items), e)
					}
				}
			}
			if yysep1050 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ClusterAutoscalerList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1065 := z.DecBinary()
	_ = yym1065
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1066 := r.ReadMapStart()
			if yyl1066 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1066, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1066 := r.ReadArrayStart()
			if yyl1066 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1066, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ClusterAutoscalerList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1067Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1067Slc
	var yyhl1067 bool = l >= 0
	for yyj1067 := 0; ; yyj1067++ {
		if yyhl1067 {
			if yyj1067 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1067Slc = r.DecodeBytes(yys1067Slc, true, true)
		yys1067 := string(yys1067Slc)
		switch yys1067 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_unversioned.ListMeta{}
			} else {
				yyv1070 := &x.ListMeta
				yym1071 := z.DecBinary()
				_ = yym1071
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1070) {
				} else {
					z.DecFallback(yyv1070, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv1072 := &x.Items
				yym1073 := z.DecBinary()
				_ = yym1073
				if false {
				} else {
					h.decSliceClusterAutoscaler((*[]ClusterAutoscaler)(yyv1072), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1067)
		} // end switch yys1067
	} // end for yyj1067
	if !yyhl1067 {
		r.ReadEnd()
	}
}

func (x *ClusterAutoscalerList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1074 int
	var yyb1074 bool
	var yyhl1074 bool = l >= 0
	yyj1074++
	if yyhl1074 {
		yyb1074 = yyj1074 > l
	} else {
		yyb1074 = r.CheckBreak()
	}
	if yyb1074 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1074++
	if yyhl1074 {
		yyb1074 = yyj1074 > l
	} else {
		yyb1074 = r.CheckBreak()
	}
	if yyb1074 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1074++
	if yyhl1074 {
		yyb1074 = yyj1074 > l
	} else {
		yyb1074 = r.CheckBreak()
	}
	if yyb1074 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_unversioned.ListMeta{}
	} else {
		yyv1077 := &x.ListMeta
		yym1078 := z.DecBinary()
		_ = yym1078
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1077) {
		} else {
			z.DecFallback(yyv1077, false)
		}
	}
	yyj1074++
	if yyhl1074 {
		yyb1074 = yyj1074 > l
	} else {
		yyb1074 = r.CheckBreak()
	}
	if yyb1074 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv1079 := &x.Items
		yym1080 := z.DecBinary()
		_ = yym1080
		if false {
		} else {
			h.decSliceClusterAutoscaler((*[]ClusterAutoscaler)(yyv1079), d)
		}
	}
	for {
		yyj1074++
		if yyhl1074 {
			yyb1074 = yyj1074 > l
		} else {
			yyb1074 = r.CheckBreak()
		}
		if yyb1074 {
			break
		}
		z.DecStructFieldNotFound(yyj1074-1, "")
	}
	r.ReadEnd()
}

func (x *PodSelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1081 := z.EncBinary()
		_ = yym1081
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1082 := !z.EncBinary()
			yy2arr1082 := z.EncBasicHandle().StructToArray
			var yyq1082 [2]bool
			_, _, _ = yysep1082, yyq1082, yy2arr1082
			const yyr1082 bool = false
			yyq1082[0] = len(x.MatchLabels) != 0
			yyq1082[1] = len(x.MatchExpressions) != 0
			if yyr1082 || yy2arr1082 {
				r.EncodeArrayStart(2)
			} else {
				var yynn1082 int = 0
				for _, b := range yyq1082 {
					if b {
						yynn1082++
					}
				}
				r.EncodeMapStart(yynn1082)
			}
			if yyr1082 || yy2arr1082 {
				if yyq1082[0] {
					if x.MatchLabels == nil {
						r.EncodeNil()
					} else {
						yym1084 := z.EncBinary()
						_ = yym1084
						if false {
						} else {
							z.F.EncMapStringStringV(x.MatchLabels, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1082[0] {
					r.EncodeString(codecSelferC_UTF81234, string("matchLabels"))
					if x.MatchLabels == nil {
						r.EncodeNil()
					} else {
						yym1085 := z.EncBinary()
						_ = yym1085
						if false {
						} else {
							z.F.EncMapStringStringV(x.MatchLabels, false, e)
						}
					}
				}
			}
			if yyr1082 || yy2arr1082 {
				if yyq1082[1] {
					if x.MatchExpressions == nil {
						r.EncodeNil()
					} else {
						yym1087 := z.EncBinary()
						_ = yym1087
						if false {
						} else {
							h.encSlicePodSelectorRequirement(([]PodSelectorRequirement)(x.MatchExpressions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1082[1] {
					r.EncodeString(codecSelferC_UTF81234, string("matchExpressions"))
					if x.MatchExpressions == nil {
						r.EncodeNil()
					} else {
						yym1088 := z.EncBinary()
						_ = yym1088
						if false {
						} else {
							h.encSlicePodSelectorRequirement(([]PodSelectorRequirement)(x.MatchExpressions), e)
						}
					}
				}
			}
			if yysep1082 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PodSelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1089 := z.DecBinary()
	_ = yym1089
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1090 := r.ReadMapStart()
			if yyl1090 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1090, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1090 := r.ReadArrayStart()
			if yyl1090 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1090, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodSelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1091Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1091Slc
	var yyhl1091 bool = l >= 0
	for yyj1091 := 0; ; yyj1091++ {
		if yyhl1091 {
			if yyj1091 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1091Slc = r.DecodeBytes(yys1091Slc, true, true)
		yys1091 := string(yys1091Slc)
		switch yys1091 {
		case "matchLabels":
			if r.TryDecodeAsNil() {
				x.MatchLabels = nil
			} else {
				yyv1092 := &x.MatchLabels
				yym1093 := z.DecBinary()
				_ = yym1093
				if false {
				} else {
					z.F.DecMapStringStringX(yyv1092, false, d)
				}
			}
		case "matchExpressions":
			if r.TryDecodeAsNil() {
				x.MatchExpressions = nil
			} else {
				yyv1094 := &x.MatchExpressions
				yym1095 := z.DecBinary()
				_ = yym1095
				if false {
				} else {
					h.decSlicePodSelectorRequirement((*[]PodSelectorRequirement)(yyv1094), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1091)
		} // end switch yys1091
	} // end for yyj1091
	if !yyhl1091 {
		r.ReadEnd()
	}
}

func (x *PodSelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1096 int
	var yyb1096 bool
	var yyhl1096 bool = l >= 0
	yyj1096++
	if yyhl1096 {
		yyb1096 = yyj1096 > l
	} else {
		yyb1096 = r.CheckBreak()
	}
	if yyb1096 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.MatchLabels = nil
	} else {
		yyv1097 := &x.MatchLabels
		yym1098 := z.DecBinary()
		_ = yym1098
		if false {
		} else {
			z.F.DecMapStringStringX(yyv1097, false, d)
		}
	}
	yyj1096++
	if yyhl1096 {
		yyb1096 = yyj1096 > l
	} else {
		yyb1096 = r.CheckBreak()
	}
	if yyb1096 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.MatchExpressions = nil
	} else {
		yyv1099 := &x.MatchExpressions
		yym1100 := z.DecBinary()
		_ = yym1100
		if false {
		} else {
			h.decSlicePodSelectorRequirement((*[]PodSelectorRequirement)(yyv1099), d)
		}
	}
	for {
		yyj1096++
		if yyhl1096 {
			yyb1096 = yyj1096 > l
		} else {
			yyb1096 = r.CheckBreak()
		}
		if yyb1096 {
			break
		}
		z.DecStructFieldNotFound(yyj1096-1, "")
	}
	r.ReadEnd()
}

func (x *PodSelectorRequirement) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1101 := z.EncBinary()
		_ = yym1101
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1102 := !z.EncBinary()
			yy2arr1102 := z.EncBasicHandle().StructToArray
			var yyq1102 [3]bool
			_, _, _ = yysep1102, yyq1102, yy2arr1102
			const yyr1102 bool = false
			yyq1102[2] = len(x.Values) != 0
			if yyr1102 || yy2arr1102 {
				r.EncodeArrayStart(3)
			} else {
				var yynn1102 int = 2
				for _, b := range yyq1102 {
					if b {
						yynn1102++
					}
				}
				r.EncodeMapStart(yynn1102)
			}
			if yyr1102 || yy2arr1102 {
				yym1104 := z.EncBinary()
				_ = yym1104
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("key"))
				yym1105 := z.EncBinary()
				_ = yym1105
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			}
			if yyr1102 || yy2arr1102 {
				x.Operator.CodecEncodeSelf(e)
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("operator"))
				x.Operator.CodecEncodeSelf(e)
			}
			if yyr1102 || yy2arr1102 {
				if yyq1102[2] {
					if x.Values == nil {
						r.EncodeNil()
					} else {
						yym1108 := z.EncBinary()
						_ = yym1108
						if false {
						} else {
							z.F.EncSliceStringV(x.Values, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1102[2] {
					r.EncodeString(codecSelferC_UTF81234, string("values"))
					if x.Values == nil {
						r.EncodeNil()
					} else {
						yym1109 := z.EncBinary()
						_ = yym1109
						if false {
						} else {
							z.F.EncSliceStringV(x.Values, false, e)
						}
					}
				}
			}
			if yysep1102 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PodSelectorRequirement) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1110 := z.DecBinary()
	_ = yym1110
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1111 := r.ReadMapStart()
			if yyl1111 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1111, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1111 := r.ReadArrayStart()
			if yyl1111 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1111, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodSelectorRequirement) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1112Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1112Slc
	var yyhl1112 bool = l >= 0
	for yyj1112 := 0; ; yyj1112++ {
		if yyhl1112 {
			if yyj1112 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1112Slc = r.DecodeBytes(yys1112Slc, true, true)
		yys1112 := string(yys1112Slc)
		switch yys1112 {
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		case "operator":
			if r.TryDecodeAsNil() {
				x.Operator = ""
			} else {
				x.Operator = PodSelectorOperator(r.DecodeString())
			}
		case "values":
			if r.TryDecodeAsNil() {
				x.Values = nil
			} else {
				yyv1115 := &x.Values
				yym1116 := z.DecBinary()
				_ = yym1116
				if false {
				} else {
					z.F.DecSliceStringX(yyv1115, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1112)
		} // end switch yys1112
	} // end for yyj1112
	if !yyhl1112 {
		r.ReadEnd()
	}
}

func (x *PodSelectorRequirement) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1117 int
	var yyb1117 bool
	var yyhl1117 bool = l >= 0
	yyj1117++
	if yyhl1117 {
		yyb1117 = yyj1117 > l
	} else {
		yyb1117 = r.CheckBreak()
	}
	if yyb1117 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	yyj1117++
	if yyhl1117 {
		yyb1117 = yyj1117 > l
	} else {
		yyb1117 = r.CheckBreak()
	}
	if yyb1117 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Operator = ""
	} else {
		x.Operator = PodSelectorOperator(r.DecodeString())
	}
	yyj1117++
	if yyhl1117 {
		yyb1117 = yyj1117 > l
	} else {
		yyb1117 = r.CheckBreak()
	}
	if yyb1117 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Values = nil
	} else {
		yyv1120 := &x.Values
		yym1121 := z.DecBinary()
		_ = yym1121
		if false {
		} else {
			z.F.DecSliceStringX(yyv1120, false, d)
		}
	}
	for {
		yyj1117++
		if yyhl1117 {
			yyb1117 = yyj1117 > l
		} else {
			yyb1117 = r.CheckBreak()
		}
		if yyb1117 {
			break
		}
		z.DecStructFieldNotFound(yyj1117-1, "")
	}
	r.ReadEnd()
}

func (x PodSelectorOperator) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1122 := z.EncBinary()
	_ = yym1122
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PodSelectorOperator) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1123 := z.DecBinary()
	_ = yym1123
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x codecSelfer1234) encSliceHorizontalPodAutoscaler(v []HorizontalPodAutoscaler, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1124 := range v {
		yy1125 := &yyv1124
		yy1125.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceHorizontalPodAutoscaler(v *[]HorizontalPodAutoscaler, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1126 := *v
	yyh1126, yyl1126 := z.DecSliceHelperStart()

	var yyrr1126, yyrl1126 int
	var yyc1126, yyrt1126 bool
	_, _, _ = yyc1126, yyrt1126, yyrl1126
	yyrr1126 = yyl1126

	if yyv1126 == nil {
		if yyrl1126, yyrt1126 = z.DecInferLen(yyl1126, z.DecBasicHandle().MaxInitLen, 336); yyrt1126 {
			yyrr1126 = yyrl1126
		}
		yyv1126 = make([]HorizontalPodAutoscaler, yyrl1126)
		yyc1126 = true
	}

	if yyl1126 == 0 {
		if len(yyv1126) != 0 {
			yyv1126 = yyv1126[:0]
			yyc1126 = true
		}
	} else if yyl1126 > 0 {

		if yyl1126 > cap(yyv1126) {
			yyrl1126, yyrt1126 = z.DecInferLen(yyl1126, z.DecBasicHandle().MaxInitLen, 336)
			yyv1126 = make([]HorizontalPodAutoscaler, yyrl1126)
			yyc1126 = true

			yyrr1126 = len(yyv1126)
		} else if yyl1126 != len(yyv1126) {
			yyv1126 = yyv1126[:yyl1126]
			yyc1126 = true
		}
		yyj1126 := 0
		for ; yyj1126 < yyrr1126; yyj1126++ {
			if r.TryDecodeAsNil() {
				yyv1126[yyj1126] = HorizontalPodAutoscaler{}
			} else {
				yyv1127 := &yyv1126[yyj1126]
				yyv1127.CodecDecodeSelf(d)
			}

		}
		if yyrt1126 {
			for ; yyj1126 < yyl1126; yyj1126++ {
				yyv1126 = append(yyv1126, HorizontalPodAutoscaler{})
				if r.TryDecodeAsNil() {
					yyv1126[yyj1126] = HorizontalPodAutoscaler{}
				} else {
					yyv1128 := &yyv1126[yyj1126]
					yyv1128.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj1126 := 0; !r.CheckBreak(); yyj1126++ {
			if yyj1126 >= len(yyv1126) {
				yyv1126 = append(yyv1126, HorizontalPodAutoscaler{}) // var yyz1126 HorizontalPodAutoscaler
				yyc1126 = true
			}

			if yyj1126 < len(yyv1126) {
				if r.TryDecodeAsNil() {
					yyv1126[yyj1126] = HorizontalPodAutoscaler{}
				} else {
					yyv1129 := &yyv1126[yyj1126]
					yyv1129.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh1126.End()
	}
	if yyc1126 {
		*v = yyv1126
	}

}

func (x codecSelfer1234) encSliceAPIVersion(v []APIVersion, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1130 := range v {
		yy1131 := &yyv1130
		yy1131.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceAPIVersion(v *[]APIVersion, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1132 := *v
	yyh1132, yyl1132 := z.DecSliceHelperStart()

	var yyrr1132, yyrl1132 int
	var yyc1132, yyrt1132 bool
	_, _, _ = yyc1132, yyrt1132, yyrl1132
	yyrr1132 = yyl1132

	if yyv1132 == nil {
		if yyrl1132, yyrt1132 = z.DecInferLen(yyl1132, z.DecBasicHandle().MaxInitLen, 32); yyrt1132 {
			yyrr1132 = yyrl1132
		}
		yyv1132 = make([]APIVersion, yyrl1132)
		yyc1132 = true
	}

	if yyl1132 == 0 {
		if len(yyv1132) != 0 {
			yyv1132 = yyv1132[:0]
			yyc1132 = true
		}
	} else if yyl1132 > 0 {

		if yyl1132 > cap(yyv1132) {
			yyrl1132, yyrt1132 = z.DecInferLen(yyl1132, z.DecBasicHandle().MaxInitLen, 32)
			yyv1132 = make([]APIVersion, yyrl1132)
			yyc1132 = true

			yyrr1132 = len(yyv1132)
		} else if yyl1132 != len(yyv1132) {
			yyv1132 = yyv1132[:yyl1132]
			yyc1132 = true
		}
		yyj1132 := 0
		for ; yyj1132 < yyrr1132; yyj1132++ {
			if r.TryDecodeAsNil() {
				yyv1132[yyj1132] = APIVersion{}
			} else {
				yyv1133 := &yyv1132[yyj1132]
				yyv1133.CodecDecodeSelf(d)
			}

		}
		if yyrt1132 {
			for ; yyj1132 < yyl1132; yyj1132++ {
				yyv1132 = append(yyv1132, APIVersion{})
				if r.TryDecodeAsNil() {
					yyv1132[yyj1132] = APIVersion{}
				} else {
					yyv1134 := &yyv1132[yyj1132]
					yyv1134.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj1132 := 0; !r.CheckBreak(); yyj1132++ {
			if yyj1132 >= len(yyv1132) {
				yyv1132 = append(yyv1132, APIVersion{}) // var yyz1132 APIVersion
				yyc1132 = true
			}

			if yyj1132 < len(yyv1132) {
				if r.TryDecodeAsNil() {
					yyv1132[yyj1132] = APIVersion{}
				} else {
					yyv1135 := &yyv1132[yyj1132]
					yyv1135.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh1132.End()
	}
	if yyc1132 {
		*v = yyv1132
	}

}

func (x codecSelfer1234) encSliceThirdPartyResource(v []ThirdPartyResource, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1136 := range v {
		yy1137 := &yyv1136
		yy1137.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceThirdPartyResource(v *[]ThirdPartyResource, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1138 := *v
	yyh1138, yyl1138 := z.DecSliceHelperStart()

	var yyrr1138, yyrl1138 int
	var yyc1138, yyrt1138 bool
	_, _, _ = yyc1138, yyrt1138, yyrl1138
	yyrr1138 = yyl1138

	if yyv1138 == nil {
		if yyrl1138, yyrt1138 = z.DecInferLen(yyl1138, z.DecBasicHandle().MaxInitLen, 232); yyrt1138 {
			yyrr1138 = yyrl1138
		}
		yyv1138 = make([]ThirdPartyResource, yyrl1138)
		yyc1138 = true
	}

	if yyl1138 == 0 {
		if len(yyv1138) != 0 {
			yyv1138 = yyv1138[:0]
			yyc1138 = true
		}
	} else if yyl1138 > 0 {

		if yyl1138 > cap(yyv1138) {
			yyrl1138, yyrt1138 = z.DecInferLen(yyl1138, z.DecBasicHandle().MaxInitLen, 232)
			yyv1138 = make([]ThirdPartyResource, yyrl1138)
			yyc1138 = true

			yyrr1138 = len(yyv1138)
		} else if yyl1138 != len(yyv1138) {
			yyv1138 = yyv1138[:yyl1138]
			yyc1138 = true
		}
		yyj1138 := 0
		for ; yyj1138 < yyrr1138; yyj1138++ {
			if r.TryDecodeAsNil() {
				yyv1138[yyj1138] = ThirdPartyResource{}
			} else {
				yyv1139 := &yyv1138[yyj1138]
				yyv1139.CodecDecodeSelf(d)
			}

		}
		if yyrt1138 {
			for ; yyj1138 < yyl1138; yyj1138++ {
				yyv1138 = append(yyv1138, ThirdPartyResource{})
				if r.TryDecodeAsNil() {
					yyv1138[yyj1138] = ThirdPartyResource{}
				} else {
					yyv1140 := &yyv1138[yyj1138]
					yyv1140.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj1138 := 0; !r.CheckBreak(); yyj1138++ {
			if yyj1138 >= len(yyv1138) {
				yyv1138 = append(yyv1138, ThirdPartyResource{}) // var yyz1138 ThirdPartyResource
				yyc1138 = true
			}

			if yyj1138 < len(yyv1138) {
				if r.TryDecodeAsNil() {
					yyv1138[yyj1138] = ThirdPartyResource{}
				} else {
					yyv1141 := &yyv1138[yyj1138]
					yyv1141.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh1138.End()
	}
	if yyc1138 {
		*v = yyv1138
	}

}

func (x codecSelfer1234) encSliceDeployment(v []Deployment, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1142 := range v {
		yy1143 := &yyv1142
		yy1143.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceDeployment(v *[]Deployment, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1144 := *v
	yyh1144, yyl1144 := z.DecSliceHelperStart()

	var yyrr1144, yyrl1144 int
	var yyc1144, yyrt1144 bool
	_, _, _ = yyc1144, yyrt1144, yyrl1144
	yyrr1144 = yyl1144

	if yyv1144 == nil {
		if yyrl1144, yyrt1144 = z.DecInferLen(yyl1144, z.DecBasicHandle().MaxInitLen, 272); yyrt1144 {
			yyrr1144 = yyrl1144
		}
		yyv1144 = make([]Deployment, yyrl1144)
		yyc1144 = true
	}

	if yyl1144 == 0 {
		if len(yyv1144) != 0 {
			yyv1144 = yyv1144[:0]
			yyc1144 = true
		}
	} else if yyl1144 > 0 {

		if yyl1144 > cap(yyv1144) {
			yyrl1144, yyrt1144 = z.DecInferLen(yyl1144, z.DecBasicHandle().MaxInitLen, 272)
			yyv1144 = make([]Deployment, yyrl1144)
			yyc1144 = true

			yyrr1144 = len(yyv1144)
		} else if yyl1144 != len(yyv1144) {
			yyv1144 = yyv1144[:yyl1144]
			yyc1144 = true
		}
		yyj1144 := 0
		for ; yyj1144 < yyrr1144; yyj1144++ {
			if r.TryDecodeAsNil() {
				yyv1144[yyj1144] = Deployment{}
			} else {
				yyv1145 := &yyv1144[yyj1144]
				yyv1145.CodecDecodeSelf(d)
			}

		}
		if yyrt1144 {
			for ; yyj1144 < yyl1144; yyj1144++ {
				yyv1144 = append(yyv1144, Deployment{})
				if r.TryDecodeAsNil() {
					yyv1144[yyj1144] = Deployment{}
				} else {
					yyv1146 := &yyv1144[yyj1144]
					yyv1146.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj1144 := 0; !r.CheckBreak(); yyj1144++ {
			if yyj1144 >= len(yyv1144) {
				yyv1144 = append(yyv1144, Deployment{}) // var yyz1144 Deployment
				yyc1144 = true
			}

			if yyj1144 < len(yyv1144) {
				if r.TryDecodeAsNil() {
					yyv1144[yyj1144] = Deployment{}
				} else {
					yyv1147 := &yyv1144[yyj1144]
					yyv1147.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh1144.End()
	}
	if yyc1144 {
		*v = yyv1144
	}

}

func (x codecSelfer1234) encSliceDaemonSet(v []DaemonSet, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1148 := range v {
		yy1149 := &yyv1148
		yy1149.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceDaemonSet(v *[]DaemonSet, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1150 := *v
	yyh1150, yyl1150 := z.DecSliceHelperStart()

	var yyrr1150, yyrl1150 int
	var yyc1150, yyrt1150 bool
	_, _, _ = yyc1150, yyrt1150, yyrl1150
	yyrr1150 = yyl1150

	if yyv1150 == nil {
		if yyrl1150, yyrt1150 = z.DecInferLen(yyl1150, z.DecBasicHandle().MaxInitLen, 232); yyrt1150 {
			yyrr1150 = yyrl1150
		}
		yyv1150 = make([]DaemonSet, yyrl1150)
		yyc1150 = true
	}

	if yyl1150 == 0 {
		if len(yyv1150) != 0 {
			yyv1150 = yyv1150[:0]
			yyc1150 = true
		}
	} else if yyl1150 > 0 {

		if yyl1150 > cap(yyv1150) {
			yyrl1150, yyrt1150 = z.DecInferLen(yyl1150, z.DecBasicHandle().MaxInitLen, 232)
			yyv1150 = make([]DaemonSet, yyrl1150)
			yyc1150 = true

			yyrr1150 = len(yyv1150)
		} else if yyl1150 != len(yyv1150) {
			yyv1150 = yyv1150[:yyl1150]
			yyc1150 = true
		}
		yyj1150 := 0
		for ; yyj1150 < yyrr1150; yyj1150++ {
			if r.TryDecodeAsNil() {
				yyv1150[yyj1150] = DaemonSet{}
			} else {
				yyv1151 := &yyv1150[yyj1150]
				yyv1151.CodecDecodeSelf(d)
			}

		}
		if yyrt1150 {
			for ; yyj1150 < yyl1150; yyj1150++ {
				yyv1150 = append(yyv1150, DaemonSet{})
				if r.TryDecodeAsNil() {
					yyv1150[yyj1150] = DaemonSet{}
				} else {
					yyv1152 := &yyv1150[yyj1150]
					yyv1152.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj1150 := 0; !r.CheckBreak(); yyj1150++ {
			if yyj1150 >= len(yyv1150) {
				yyv1150 = append(yyv1150, DaemonSet{}) // var yyz1150 DaemonSet
				yyc1150 = true
			}

			if yyj1150 < len(yyv1150) {
				if r.TryDecodeAsNil() {
					yyv1150[yyj1150] = DaemonSet{}
				} else {
					yyv1153 := &yyv1150[yyj1150]
					yyv1153.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh1150.End()
	}
	if yyc1150 {
		*v = yyv1150
	}

}

func (x codecSelfer1234) encSliceThirdPartyResourceData(v []ThirdPartyResourceData, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1154 := range v {
		yy1155 := &yyv1154
		yy1155.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceThirdPartyResourceData(v *[]ThirdPartyResourceData, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1156 := *v
	yyh1156, yyl1156 := z.DecSliceHelperStart()

	var yyrr1156, yyrl1156 int
	var yyc1156, yyrt1156 bool
	_, _, _ = yyc1156, yyrt1156, yyrl1156
	yyrr1156 = yyl1156

	if yyv1156 == nil {
		if yyrl1156, yyrt1156 = z.DecInferLen(yyl1156, z.DecBasicHandle().MaxInitLen, 216); yyrt1156 {
			yyrr1156 = yyrl1156
		}
		yyv1156 = make([]ThirdPartyResourceData, yyrl1156)
		yyc1156 = true
	}

	if yyl1156 == 0 {
		if len(yyv1156) != 0 {
			yyv1156 = yyv1156[:0]
			yyc1156 = true
		}
	} else if yyl1156 > 0 {

		if yyl1156 > cap(yyv1156) {
			yyrl1156, yyrt1156 = z.DecInferLen(yyl1156, z.DecBasicHandle().MaxInitLen, 216)
			yyv1156 = make([]ThirdPartyResourceData, yyrl1156)
			yyc1156 = true

			yyrr1156 = len(yyv1156)
		} else if yyl1156 != len(yyv1156) {
			yyv1156 = yyv1156[:yyl1156]
			yyc1156 = true
		}
		yyj1156 := 0
		for ; yyj1156 < yyrr1156; yyj1156++ {
			if r.TryDecodeAsNil() {
				yyv1156[yyj1156] = ThirdPartyResourceData{}
			} else {
				yyv1157 := &yyv1156[yyj1156]
				yyv1157.CodecDecodeSelf(d)
			}

		}
		if yyrt1156 {
			for ; yyj1156 < yyl1156; yyj1156++ {
				yyv1156 = append(yyv1156, ThirdPartyResourceData{})
				if r.TryDecodeAsNil() {
					yyv1156[yyj1156] = ThirdPartyResourceData{}
				} else {
					yyv1158 := &yyv1156[yyj1156]
					yyv1158.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj1156 := 0; !r.CheckBreak(); yyj1156++ {
			if yyj1156 >= len(yyv1156) {
				yyv1156 = append(yyv1156, ThirdPartyResourceData{}) // var yyz1156 ThirdPartyResourceData
				yyc1156 = true
			}

			if yyj1156 < len(yyv1156) {
				if r.TryDecodeAsNil() {
					yyv1156[yyj1156] = ThirdPartyResourceData{}
				} else {
					yyv1159 := &yyv1156[yyj1156]
					yyv1159.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh1156.End()
	}
	if yyc1156 {
		*v = yyv1156
	}

}

func (x codecSelfer1234) encSliceJob(v []Job, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1160 := range v {
		yy1161 := &yyv1160
		yy1161.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceJob(v *[]Job, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1162 := *v
	yyh1162, yyl1162 := z.DecSliceHelperStart()

	var yyrr1162, yyrl1162 int
	var yyc1162, yyrt1162 bool
	_, _, _ = yyc1162, yyrt1162, yyrl1162
	yyrr1162 = yyl1162

	if yyv1162 == nil {
		if yyrl1162, yyrt1162 = z.DecInferLen(yyl1162, z.DecBasicHandle().MaxInitLen, 608); yyrt1162 {
			yyrr1162 = yyrl1162
		}
		yyv1162 = make([]Job, yyrl1162)
		yyc1162 = true
	}

	if yyl1162 == 0 {
		if len(yyv1162) != 0 {
			yyv1162 = yyv1162[:0]
			yyc1162 = true
		}
	} else if yyl1162 > 0 {

		if yyl1162 > cap(yyv1162) {
			yyrl1162, yyrt1162 = z.DecInferLen(yyl1162, z.DecBasicHandle().MaxInitLen, 608)
			yyv1162 = make([]Job, yyrl1162)
			yyc1162 = true

			yyrr1162 = len(yyv1162)
		} else if yyl1162 != len(yyv1162) {
			yyv1162 = yyv1162[:yyl1162]
			yyc1162 = true
		}
		yyj1162 := 0
		for ; yyj1162 < yyrr1162; yyj1162++ {
			if r.TryDecodeAsNil() {
				yyv1162[yyj1162] = Job{}
			} else {
				yyv1163 := &yyv1162[yyj1162]
				yyv1163.CodecDecodeSelf(d)
			}

		}
		if yyrt1162 {
			for ; yyj1162 < yyl1162; yyj1162++ {
				yyv1162 = append(yyv1162, Job{})
				if r.TryDecodeAsNil() {
					yyv1162[yyj1162] = Job{}
				} else {
					yyv1164 := &yyv1162[yyj1162]
					yyv1164.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj1162 := 0; !r.CheckBreak(); yyj1162++ {
			if yyj1162 >= len(yyv1162) {
				yyv1162 = append(yyv1162, Job{}) // var yyz1162 Job
				yyc1162 = true
			}

			if yyj1162 < len(yyv1162) {
				if r.TryDecodeAsNil() {
					yyv1162[yyj1162] = Job{}
				} else {
					yyv1165 := &yyv1162[yyj1162]
					yyv1165.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh1162.End()
	}
	if yyc1162 {
		*v = yyv1162
	}

}

func (x codecSelfer1234) encSliceJobCondition(v []JobCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1166 := range v {
		yy1167 := &yyv1166
		yy1167.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceJobCondition(v *[]JobCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1168 := *v
	yyh1168, yyl1168 := z.DecSliceHelperStart()

	var yyrr1168, yyrl1168 int
	var yyc1168, yyrt1168 bool
	_, _, _ = yyc1168, yyrt1168, yyrl1168
	yyrr1168 = yyl1168

	if yyv1168 == nil {
		if yyrl1168, yyrt1168 = z.DecInferLen(yyl1168, z.DecBasicHandle().MaxInitLen, 112); yyrt1168 {
			yyrr1168 = yyrl1168
		}
		yyv1168 = make([]JobCondition, yyrl1168)
		yyc1168 = true
	}

	if yyl1168 == 0 {
		if len(yyv1168) != 0 {
			yyv1168 = yyv1168[:0]
			yyc1168 = true
		}
	} else if yyl1168 > 0 {

		if yyl1168 > cap(yyv1168) {
			yyrl1168, yyrt1168 = z.DecInferLen(yyl1168, z.DecBasicHandle().MaxInitLen, 112)
			yyv1168 = make([]JobCondition, yyrl1168)
			yyc1168 = true

			yyrr1168 = len(yyv1168)
		} else if yyl1168 != len(yyv1168) {
			yyv1168 = yyv1168[:yyl1168]
			yyc1168 = true
		}
		yyj1168 := 0
		for ; yyj1168 < yyrr1168; yyj1168++ {
			if r.TryDecodeAsNil() {
				yyv1168[yyj1168] = JobCondition{}
			} else {
				yyv1169 := &yyv1168[yyj1168]
				yyv1169.CodecDecodeSelf(d)
			}

		}
		if yyrt1168 {
			for ; yyj1168 < yyl1168; yyj1168++ {
				yyv1168 = append(yyv1168, JobCondition{})
				if r.TryDecodeAsNil() {
					yyv1168[yyj1168] = JobCondition{}
				} else {
					yyv1170 := &yyv1168[yyj1168]
					yyv1170.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj1168 := 0; !r.CheckBreak(); yyj1168++ {
			if yyj1168 >= len(yyv1168) {
				yyv1168 = append(yyv1168, JobCondition{}) // var yyz1168 JobCondition
				yyc1168 = true
			}

			if yyj1168 < len(yyv1168) {
				if r.TryDecodeAsNil() {
					yyv1168[yyj1168] = JobCondition{}
				} else {
					yyv1171 := &yyv1168[yyj1168]
					yyv1171.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh1168.End()
	}
	if yyc1168 {
		*v = yyv1168
	}

}

func (x codecSelfer1234) encSliceIngress(v []Ingress, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1172 := range v {
		yy1173 := &yyv1172
		yy1173.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceIngress(v *[]Ingress, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1174 := *v
	yyh1174, yyl1174 := z.DecSliceHelperStart()

	var yyrr1174, yyrl1174 int
	var yyc1174, yyrt1174 bool
	_, _, _ = yyc1174, yyrt1174, yyrl1174
	yyrr1174 = yyl1174

	if yyv1174 == nil {
		if yyrl1174, yyrt1174 = z.DecInferLen(yyl1174, z.DecBasicHandle().MaxInitLen, 248); yyrt1174 {
			yyrr1174 = yyrl1174
		}
		yyv1174 = make([]Ingress, yyrl1174)
		yyc1174 = true
	}

	if yyl1174 == 0 {
		if len(yyv1174) != 0 {
			yyv1174 = yyv1174[:0]
			yyc1174 = true
		}
	} else if yyl1174 > 0 {

		if yyl1174 > cap(yyv1174) {
			yyrl1174, yyrt1174 = z.DecInferLen(yyl1174, z.DecBasicHandle().MaxInitLen, 248)
			yyv1174 = make([]Ingress, yyrl1174)
			yyc1174 = true

			yyrr1174 = len(yyv1174)
		} else if yyl1174 != len(yyv1174) {
			yyv1174 = yyv1174[:yyl1174]
			yyc1174 = true
		}
		yyj1174 := 0
		for ; yyj1174 < yyrr1174; yyj1174++ {
			if r.TryDecodeAsNil() {
				yyv1174[yyj1174] = Ingress{}
			} else {
				yyv1175 := &yyv1174[yyj1174]
				yyv1175.CodecDecodeSelf(d)
			}

		}
		if yyrt1174 {
			for ; yyj1174 < yyl1174; yyj1174++ {
				yyv1174 = append(yyv1174, Ingress{})
				if r.TryDecodeAsNil() {
					yyv1174[yyj1174] = Ingress{}
				} else {
					yyv1176 := &yyv1174[yyj1174]
					yyv1176.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj1174 := 0; !r.CheckBreak(); yyj1174++ {
			if yyj1174 >= len(yyv1174) {
				yyv1174 = append(yyv1174, Ingress{}) // var yyz1174 Ingress
				yyc1174 = true
			}

			if yyj1174 < len(yyv1174) {
				if r.TryDecodeAsNil() {
					yyv1174[yyj1174] = Ingress{}
				} else {
					yyv1177 := &yyv1174[yyj1174]
					yyv1177.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh1174.End()
	}
	if yyc1174 {
		*v = yyv1174
	}

}

func (x codecSelfer1234) encSliceIngressRule(v []IngressRule, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1178 := range v {
		yy1179 := &yyv1178
		yy1179.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceIngressRule(v *[]IngressRule, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1180 := *v
	yyh1180, yyl1180 := z.DecSliceHelperStart()

	var yyrr1180, yyrl1180 int
	var yyc1180, yyrt1180 bool
	_, _, _ = yyc1180, yyrt1180, yyrl1180
	yyrr1180 = yyl1180

	if yyv1180 == nil {
		if yyrl1180, yyrt1180 = z.DecInferLen(yyl1180, z.DecBasicHandle().MaxInitLen, 24); yyrt1180 {
			yyrr1180 = yyrl1180
		}
		yyv1180 = make([]IngressRule, yyrl1180)
		yyc1180 = true
	}

	if yyl1180 == 0 {
		if len(yyv1180) != 0 {
			yyv1180 = yyv1180[:0]
			yyc1180 = true
		}
	} else if yyl1180 > 0 {

		if yyl1180 > cap(yyv1180) {
			yyrl1180, yyrt1180 = z.DecInferLen(yyl1180, z.DecBasicHandle().MaxInitLen, 24)
			yyv1180 = make([]IngressRule, yyrl1180)
			yyc1180 = true

			yyrr1180 = len(yyv1180)
		} else if yyl1180 != len(yyv1180) {
			yyv1180 = yyv1180[:yyl1180]
			yyc1180 = true
		}
		yyj1180 := 0
		for ; yyj1180 < yyrr1180; yyj1180++ {
			if r.TryDecodeAsNil() {
				yyv1180[yyj1180] = IngressRule{}
			} else {
				yyv1181 := &yyv1180[yyj1180]
				yyv1181.CodecDecodeSelf(d)
			}

		}
		if yyrt1180 {
			for ; yyj1180 < yyl1180; yyj1180++ {
				yyv1180 = append(yyv1180, IngressRule{})
				if r.TryDecodeAsNil() {
					yyv1180[yyj1180] = IngressRule{}
				} else {
					yyv1182 := &yyv1180[yyj1180]
					yyv1182.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj1180 := 0; !r.CheckBreak(); yyj1180++ {
			if yyj1180 >= len(yyv1180) {
				yyv1180 = append(yyv1180, IngressRule{}) // var yyz1180 IngressRule
				yyc1180 = true
			}

			if yyj1180 < len(yyv1180) {
				if r.TryDecodeAsNil() {
					yyv1180[yyj1180] = IngressRule{}
				} else {
					yyv1183 := &yyv1180[yyj1180]
					yyv1183.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh1180.End()
	}
	if yyc1180 {
		*v = yyv1180
	}

}

func (x codecSelfer1234) encSliceHTTPIngressPath(v []HTTPIngressPath, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1184 := range v {
		yy1185 := &yyv1184
		yy1185.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceHTTPIngressPath(v *[]HTTPIngressPath, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1186 := *v
	yyh1186, yyl1186 := z.DecSliceHelperStart()

	var yyrr1186, yyrl1186 int
	var yyc1186, yyrt1186 bool
	_, _, _ = yyc1186, yyrt1186, yyrl1186
	yyrr1186 = yyl1186

	if yyv1186 == nil {
		if yyrl1186, yyrt1186 = z.DecInferLen(yyl1186, z.DecBasicHandle().MaxInitLen, 64); yyrt1186 {
			yyrr1186 = yyrl1186
		}
		yyv1186 = make([]HTTPIngressPath, yyrl1186)
		yyc1186 = true
	}

	if yyl1186 == 0 {
		if len(yyv1186) != 0 {
			yyv1186 = yyv1186[:0]
			yyc1186 = true
		}
	} else if yyl1186 > 0 {

		if yyl1186 > cap(yyv1186) {
			yyrl1186, yyrt1186 = z.DecInferLen(yyl1186, z.DecBasicHandle().MaxInitLen, 64)
			yyv1186 = make([]HTTPIngressPath, yyrl1186)
			yyc1186 = true

			yyrr1186 = len(yyv1186)
		} else if yyl1186 != len(yyv1186) {
			yyv1186 = yyv1186[:yyl1186]
			yyc1186 = true
		}
		yyj1186 := 0
		for ; yyj1186 < yyrr1186; yyj1186++ {
			if r.TryDecodeAsNil() {
				yyv1186[yyj1186] = HTTPIngressPath{}
			} else {
				yyv1187 := &yyv1186[yyj1186]
				yyv1187.CodecDecodeSelf(d)
			}

		}
		if yyrt1186 {
			for ; yyj1186 < yyl1186; yyj1186++ {
				yyv1186 = append(yyv1186, HTTPIngressPath{})
				if r.TryDecodeAsNil() {
					yyv1186[yyj1186] = HTTPIngressPath{}
				} else {
					yyv1188 := &yyv1186[yyj1186]
					yyv1188.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj1186 := 0; !r.CheckBreak(); yyj1186++ {
			if yyj1186 >= len(yyv1186) {
				yyv1186 = append(yyv1186, HTTPIngressPath{}) // var yyz1186 HTTPIngressPath
				yyc1186 = true
			}

			if yyj1186 < len(yyv1186) {
				if r.TryDecodeAsNil() {
					yyv1186[yyj1186] = HTTPIngressPath{}
				} else {
					yyv1189 := &yyv1186[yyj1186]
					yyv1189.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh1186.End()
	}
	if yyc1186 {
		*v = yyv1186
	}

}

func (x codecSelfer1234) encSliceNodeUtilization(v []NodeUtilization, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1190 := range v {
		yy1191 := &yyv1190
		yy1191.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceNodeUtilization(v *[]NodeUtilization, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1192 := *v
	yyh1192, yyl1192 := z.DecSliceHelperStart()

	var yyrr1192, yyrl1192 int
	var yyc1192, yyrt1192 bool
	_, _, _ = yyc1192, yyrt1192, yyrl1192
	yyrr1192 = yyl1192

	if yyv1192 == nil {
		if yyrl1192, yyrt1192 = z.DecInferLen(yyl1192, z.DecBasicHandle().MaxInitLen, 24); yyrt1192 {
			yyrr1192 = yyrl1192
		}
		yyv1192 = make([]NodeUtilization, yyrl1192)
		yyc1192 = true
	}

	if yyl1192 == 0 {
		if len(yyv1192) != 0 {
			yyv1192 = yyv1192[:0]
			yyc1192 = true
		}
	} else if yyl1192 > 0 {

		if yyl1192 > cap(yyv1192) {
			yyrl1192, yyrt1192 = z.DecInferLen(yyl1192, z.DecBasicHandle().MaxInitLen, 24)
			yyv1192 = make([]NodeUtilization, yyrl1192)
			yyc1192 = true

			yyrr1192 = len(yyv1192)
		} else if yyl1192 != len(yyv1192) {
			yyv1192 = yyv1192[:yyl1192]
			yyc1192 = true
		}
		yyj1192 := 0
		for ; yyj1192 < yyrr1192; yyj1192++ {
			if r.TryDecodeAsNil() {
				yyv1192[yyj1192] = NodeUtilization{}
			} else {
				yyv1193 := &yyv1192[yyj1192]
				yyv1193.CodecDecodeSelf(d)
			}

		}
		if yyrt1192 {
			for ; yyj1192 < yyl1192; yyj1192++ {
				yyv1192 = append(yyv1192, NodeUtilization{})
				if r.TryDecodeAsNil() {
					yyv1192[yyj1192] = NodeUtilization{}
				} else {
					yyv1194 := &yyv1192[yyj1192]
					yyv1194.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj1192 := 0; !r.CheckBreak(); yyj1192++ {
			if yyj1192 >= len(yyv1192) {
				yyv1192 = append(yyv1192, NodeUtilization{}) // var yyz1192 NodeUtilization
				yyc1192 = true
			}

			if yyj1192 < len(yyv1192) {
				if r.TryDecodeAsNil() {
					yyv1192[yyj1192] = NodeUtilization{}
				} else {
					yyv1195 := &yyv1192[yyj1192]
					yyv1195.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh1192.End()
	}
	if yyc1192 {
		*v = yyv1192
	}

}

func (x codecSelfer1234) encSliceClusterAutoscaler(v []ClusterAutoscaler, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1196 := range v {
		yy1197 := &yyv1196
		yy1197.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceClusterAutoscaler(v *[]ClusterAutoscaler, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1198 := *v
	yyh1198, yyl1198 := z.DecSliceHelperStart()

	var yyrr1198, yyrl1198 int
	var yyc1198, yyrt1198 bool
	_, _, _ = yyc1198, yyrt1198, yyrl1198
	yyrr1198 = yyl1198

	if yyv1198 == nil {
		if yyrl1198, yyrt1198 = z.DecInferLen(yyl1198, z.DecBasicHandle().MaxInitLen, 232); yyrt1198 {
			yyrr1198 = yyrl1198
		}
		yyv1198 = make([]ClusterAutoscaler, yyrl1198)
		yyc1198 = true
	}

	if yyl1198 == 0 {
		if len(yyv1198) != 0 {
			yyv1198 = yyv1198[:0]
			yyc1198 = true
		}
	} else if yyl1198 > 0 {

		if yyl1198 > cap(yyv1198) {
			yyrl1198, yyrt1198 = z.DecInferLen(yyl1198, z.DecBasicHandle().MaxInitLen, 232)
			yyv1198 = make([]ClusterAutoscaler, yyrl1198)
			yyc1198 = true

			yyrr1198 = len(yyv1198)
		} else if yyl1198 != len(yyv1198) {
			yyv1198 = yyv1198[:yyl1198]
			yyc1198 = true
		}
		yyj1198 := 0
		for ; yyj1198 < yyrr1198; yyj1198++ {
			if r.TryDecodeAsNil() {
				yyv1198[yyj1198] = ClusterAutoscaler{}
			} else {
				yyv1199 := &yyv1198[yyj1198]
				yyv1199.CodecDecodeSelf(d)
			}

		}
		if yyrt1198 {
			for ; yyj1198 < yyl1198; yyj1198++ {
				yyv1198 = append(yyv1198, ClusterAutoscaler{})
				if r.TryDecodeAsNil() {
					yyv1198[yyj1198] = ClusterAutoscaler{}
				} else {
					yyv1200 := &yyv1198[yyj1198]
					yyv1200.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj1198 := 0; !r.CheckBreak(); yyj1198++ {
			if yyj1198 >= len(yyv1198) {
				yyv1198 = append(yyv1198, ClusterAutoscaler{}) // var yyz1198 ClusterAutoscaler
				yyc1198 = true
			}

			if yyj1198 < len(yyv1198) {
				if r.TryDecodeAsNil() {
					yyv1198[yyj1198] = ClusterAutoscaler{}
				} else {
					yyv1201 := &yyv1198[yyj1198]
					yyv1201.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh1198.End()
	}
	if yyc1198 {
		*v = yyv1198
	}

}

func (x codecSelfer1234) encSlicePodSelectorRequirement(v []PodSelectorRequirement, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1202 := range v {
		yy1203 := &yyv1202
		yy1203.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSlicePodSelectorRequirement(v *[]PodSelectorRequirement, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1204 := *v
	yyh1204, yyl1204 := z.DecSliceHelperStart()

	var yyrr1204, yyrl1204 int
	var yyc1204, yyrt1204 bool
	_, _, _ = yyc1204, yyrt1204, yyrl1204
	yyrr1204 = yyl1204

	if yyv1204 == nil {
		if yyrl1204, yyrt1204 = z.DecInferLen(yyl1204, z.DecBasicHandle().MaxInitLen, 56); yyrt1204 {
			yyrr1204 = yyrl1204
		}
		yyv1204 = make([]PodSelectorRequirement, yyrl1204)
		yyc1204 = true
	}

	if yyl1204 == 0 {
		if len(yyv1204) != 0 {
			yyv1204 = yyv1204[:0]
			yyc1204 = true
		}
	} else if yyl1204 > 0 {

		if yyl1204 > cap(yyv1204) {
			yyrl1204, yyrt1204 = z.DecInferLen(yyl1204, z.DecBasicHandle().MaxInitLen, 56)
			yyv1204 = make([]PodSelectorRequirement, yyrl1204)
			yyc1204 = true

			yyrr1204 = len(yyv1204)
		} else if yyl1204 != len(yyv1204) {
			yyv1204 = yyv1204[:yyl1204]
			yyc1204 = true
		}
		yyj1204 := 0
		for ; yyj1204 < yyrr1204; yyj1204++ {
			if r.TryDecodeAsNil() {
				yyv1204[yyj1204] = PodSelectorRequirement{}
			} else {
				yyv1205 := &yyv1204[yyj1204]
				yyv1205.CodecDecodeSelf(d)
			}

		}
		if yyrt1204 {
			for ; yyj1204 < yyl1204; yyj1204++ {
				yyv1204 = append(yyv1204, PodSelectorRequirement{})
				if r.TryDecodeAsNil() {
					yyv1204[yyj1204] = PodSelectorRequirement{}
				} else {
					yyv1206 := &yyv1204[yyj1204]
					yyv1206.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj1204 := 0; !r.CheckBreak(); yyj1204++ {
			if yyj1204 >= len(yyv1204) {
				yyv1204 = append(yyv1204, PodSelectorRequirement{}) // var yyz1204 PodSelectorRequirement
				yyc1204 = true
			}

			if yyj1204 < len(yyv1204) {
				if r.TryDecodeAsNil() {
					yyv1204[yyj1204] = PodSelectorRequirement{}
				} else {
					yyv1207 := &yyv1204[yyj1204]
					yyv1207.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh1204.End()
	}
	if yyc1204 {
		*v = yyv1204
	}

}
